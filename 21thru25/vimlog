
chdir(/usr/share/vim)
fchdir() to previous dir
sourcing "$VIM/vimrc"
line 1: " All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
line 2: " the call to :runtime you can find below.  If you wish to change any of those
line 3: " settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
line 4: " will be overwritten everytime an upgrade of the vim packages is performed.
line 5: " It is recommended to make changes after sourcing debian.vim since it alters
line 6: " the value of the 'compatible' option.
line 7: 
line 8: " This line should not be removed as it ensures that various options are
line 9: " properly set to work with the Vim-related packages available in Debian.
line 10: runtime! debian.vim
Searching for "debian.vim" in "/home/computer/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/home/computer/.vim/after"
Searching for "/home/computer/.vim/debian.vim"
Searching for "/usr/share/vim/vimfiles/debian.vim"
Searching for "/usr/share/vim/vim74/debian.vim"
chdir(/usr/share/vim/vim74)
fchdir() to previous dir
line 10: sourcing "/usr/share/vim/vim74/debian.vim"
line 1: " Debian system-wide default configuration Vim
line 2: 
line 3: set runtimepath=~/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim/after
line 4: 
line 5: " Normally we use vim-extensions. If you want true vi-compatibility
line 6: " remove change the following statements
line 7: set nocompatible^I" Use Vim defaults instead of 100% vi compatibility
line 8: set backspace=indent,eol,start^I" more powerful backspacing
line 9: 
line 10: " Now we set some defaults for the editor
line 11: set history=50^I^I" keep 50 lines of command line history
line 12: set ruler^I^I" show the cursor position all the time
line 13: 
line 14: " modelines have historically been a source of security/resource
line 15: " vulnerabilities -- disable by default, even when 'nocompatible' is set
line 16: set nomodeline
line 17: 
line 18: " Suffixes that get lower priority when doing tab completion for filenames.
line 19: " These are files we are not likely to want to edit or read.
line 20: set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
line 21: 
line 22: " We know xterm-debian is a color terminal
line 23: if &term =~ "xterm-debian" || &term =~ "xterm-xfree86"
line 24:   set t_Co=16
line 25:   set t_Sf=^[[3%dm
line 26:   set t_Sb=^[[4%dm
line 27: endif
line 28: 
line 29: " Some Debian-specific things
line 30: if has("autocmd")
line 31:   " set mail filetype for reportbug's temp files
line 32:   augroup debian
line 33:     au BufRead reportbug-*^I^Iset ft=mail
line 34:   augroup END
line 35:   if has('gui')
line 36:     " Make shift-insert work like in Xterm
line 37:     autocmd GUIEnter * if empty(maparg("<S-Insert>", "nvso")) | execute "map <S-Insert> <MiddleMouse>" | endif
line 38:     autocmd GUIEnter * if empty(maparg("<S-Insert>", "ic")) | execute "map! <S-Insert> <MiddleMouse>" | endif
line 39:   endif
line 40: endif
line 41: 
line 42: " Set paper size from /etc/papersize if available (Debian-specific)
line 43: if filereadable("/etc/papersize")
line 44:   let s:papersize = matchstr(readfile('/etc/papersize', '', 1), '\p*')
line 45:   if strlen(s:papersize)
line 46:     exe "set printoptions+=paper:" . s:papersize
line 46: set printoptions+=paper:letter
line 47:   endif
line 48: endif
line 49: 
finished sourcing /usr/share/vim/vim74/debian.vim
continuing in /usr/share/vim/vimrc
Searching for "/usr/share/vim/vimfiles/after/debian.vim"
Searching for "/home/computer/.vim/after/debian.vim"
line 11: 
line 12: " Uncomment the next line to make Vim more Vi-compatible
line 13: " NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
line 14: " options, so any other options should be set AFTER setting 'compatible'.
line 15: "set compatible
line 16: 
line 17: " Vim5 and later versions support syntax highlighting. Uncommenting the next
line 18: " line enables syntax highlighting by default.
line 19: if has("syntax")
line 20:   syntax on
line 20: so $VIMRUNTIME/syntax/syntax.vim
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 20: sourcing "/usr/share/vim/vim74/syntax/syntax.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 04
line 4: 
line 5: " This file is used for ":syntax on".
line 6: " It installs the autocommands and starts highlighting for all buffers.
line 7: 
line 8: if !has("syntax")
line 9:   finish
line 10: endif
line 11: 
line 12: " If Syntax highlighting appears to be on already, turn it off first, so that
line 13: " any leftovers are cleared.
line 14: if exists("syntax_on") || exists("syntax_manual")
line 15:   so <sfile>:p:h/nosyntax.vim
line 16: endif
line 17: 
line 18: " Load the Syntax autocommands and set the default methods for highlighting.
line 19: runtime syntax/synload.vim
Searching for "syntax/synload.vim" in "/home/computer/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after"
Searching for "/home/computer/.vim/syntax/synload.vim"
Searching for "/var/lib/vim/addons/syntax/synload.vim"
Searching for "/usr/share/vim/vimfiles/syntax/synload.vim"
Searching for "/usr/share/vim/vim74/syntax/synload.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 19: sourcing "/usr/share/vim/vim74/syntax/synload.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2012 Sep 25
line 4: 
line 5: " This file sets up for syntax highlighting.
line 6: " It is loaded from "syntax.vim" and "manual.vim".
line 7: " 1. Set the default highlight groups.
line 8: " 2. Install Syntax autocommands for all the available syntax files.
line 9: 
line 10: if !has("syntax")
line 11:   finish
line 12: endif
line 13: 
line 14: " let others know that syntax has been switched on
line 15: let syntax_on = 1
line 16: 
line 17: " Set the default highlighting colors.  Use a color scheme if specified.
line 18: if exists("colors_name")
line 19:   exe "colors " . colors_name
line 20: else
line 21:   runtime! syntax/syncolor.vim
Searching for "syntax/syncolor.vim" in "/home/computer/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after"
Searching for "/home/computer/.vim/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/syntax/syncolor.vim"
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"
Searching for "/usr/share/vim/vim74/syntax/syncolor.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 21: sourcing "/usr/share/vim/vim74/syntax/syncolor.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 12
line 4: 
line 5: " This file sets up the default methods for highlighting.
line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".
line 7: " Also used from init_highlight().
line 8: 
line 9: if !exists("syntax_cmd") || syntax_cmd == "on"
line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links
line 11:   command -nargs=* SynColor hi <args>
line 12:   command -nargs=* SynLink hi link <args>
line 13: else
line 14:   if syntax_cmd == "enable"
line 15:     " ":syntax enable" keeps any existing colors
line 16:     command -nargs=* SynColor hi def <args>
line 17:     command -nargs=* SynLink hi def link <args>
line 18:   elseif syntax_cmd == "reset"
line 19:     " ":syntax reset" resets all colors to the default
line 20:     command -nargs=* SynColor hi <args>
line 21:     command -nargs=* SynLink hi! link <args>
line 22:   else
line 23:     " User defined syncolor file has already set the colors.
line 24:     finish
line 25:   endif
line 26: endif
line 27: 
line 28: " Many terminals can only use six different colors (plus black and white).
line 29: " Therefore the number of colors used is kept low. It doesn't look nice with
line 30: " too many colors anyway.
line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.
line 32: " There are two sets of defaults: for a dark and a light background.
line 33: if &background == "dark"
line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 43: else
line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE
line 44: hi Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE
line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE
line 45: hi Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE
line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE
line 46: hi Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE
line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE
line 47: hi Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE
line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE
line 48: hi Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE
line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE
line 49: hi PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE
line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE
line 50: hi Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE
line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue
line 51: hi Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue
line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 52: hi Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 53: endif
line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 56: 
line 57: " Common groups that link to default highlighting.
line 58: " You can specify other highlighting easily.
line 59: SynLink String^I^IConstant
line 59: hi link String^I^IConstant
line 60: SynLink Character^IConstant
line 60: hi link Character^IConstant
line 61: SynLink Number^I^IConstant
line 61: hi link Number^I^IConstant
line 62: SynLink Boolean^I^IConstant
line 62: hi link Boolean^I^IConstant
line 63: SynLink Float^I^INumber
line 63: hi link Float^I^INumber
line 64: SynLink Function^IIdentifier
line 64: hi link Function^IIdentifier
line 65: SynLink Conditional^IStatement
line 65: hi link Conditional^IStatement
line 66: SynLink Repeat^I^IStatement
line 66: hi link Repeat^I^IStatement
line 67: SynLink Label^I^IStatement
line 67: hi link Label^I^IStatement
line 68: SynLink Operator^IStatement
line 68: hi link Operator^IStatement
line 69: SynLink Keyword^I^IStatement
line 69: hi link Keyword^I^IStatement
line 70: SynLink Exception^IStatement
line 70: hi link Exception^IStatement
line 71: SynLink Include^I^IPreProc
line 71: hi link Include^I^IPreProc
line 72: SynLink Define^I^IPreProc
line 72: hi link Define^I^IPreProc
line 73: SynLink Macro^I^IPreProc
line 73: hi link Macro^I^IPreProc
line 74: SynLink PreCondit^IPreProc
line 74: hi link PreCondit^IPreProc
line 75: SynLink StorageClass^IType
line 75: hi link StorageClass^IType
line 76: SynLink Structure^IType
line 76: hi link Structure^IType
line 77: SynLink Typedef^I^IType
line 77: hi link Typedef^I^IType
line 78: SynLink Tag^I^ISpecial
line 78: hi link Tag^I^ISpecial
line 79: SynLink SpecialChar^ISpecial
line 79: hi link SpecialChar^ISpecial
line 80: SynLink Delimiter^ISpecial
line 80: hi link Delimiter^ISpecial
line 81: SynLink SpecialComment^ISpecial
line 81: hi link SpecialComment^ISpecial
line 82: SynLink Debug^I^ISpecial
line 82: hi link Debug^I^ISpecial
line 83: 
line 84: delcommand SynColor
line 85: delcommand SynLink
finished sourcing /usr/share/vim/vim74/syntax/syncolor.vim
continuing in /usr/share/vim/vim74/syntax/synload.vim
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/after/syntax/syncolor.vim"
Searching for "/home/computer/.vim/after/syntax/syncolor.vim"
line 22: endif
line 23: 
line 24: " Line continuation is used here, remove 'C' from 'cpoptions'
line 25: let s:cpo_save = &cpo
line 26: set cpo&vim
line 27: 
line 28: " First remove all old syntax autocommands.
line 29: au! Syntax
line 30: 
line 31: au Syntax *^I^Icall s:SynSet()
line 32: 
line 33: fun! s:SynSet()
line 61: 
line 62: 
line 63: " Handle adding doxygen to other languages (C, C++, C#, IDL, java, php, DataScript)
line 68: au Syntax c,cpp,cs,idl,java,php,datascript if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif
line 69: 
line 70: 
line 71: " Source the user-specified syntax highlighting file
line 72: if exists("mysyntaxfile") && filereadable(expand(mysyntaxfile))
line 73:   execute "source " . mysyntaxfile
line 74: endif
line 75: 
line 76: " Restore 'cpoptions'
line 77: let &cpo = s:cpo_save
line 78: unlet s:cpo_save
finished sourcing /usr/share/vim/vim74/syntax/synload.vim
continuing in /usr/share/vim/vim74/syntax/syntax.vim
line 20: 
line 21: " Load the FileType autocommands if not done yet.
line 22: if exists("did_load_filetypes")
line 23:   let s:did_ft = 1
line 24: else
line 25:   filetype on
Searching for "filetype.vim" in "/home/computer/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after"
Searching for "/home/computer/.vim/filetype.vim"
Searching for "/var/lib/vim/addons/filetype.vim"
Searching for "/usr/share/vim/vimfiles/filetype.vim"
Searching for "/usr/share/vim/vim74/filetype.vim"
chdir(/usr/share/vim/vim74)
fchdir() to previous dir
line 25: sourcing "/usr/share/vim/vim74/filetype.vim"
line 1: " Vim support file to detect file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last Change:^I2015 Dec 03
line 5: 
line 6: " Listen very carefully, I will say this only once
line 7: if exists("did_load_filetypes")
line 8:   finish
line 9: endif
line 10: let did_load_filetypes = 1
line 11: 
line 12: " Line continuation is used here, remove 'C' from 'cpoptions'
line 13: let s:cpo_save = &cpo
line 14: set cpo&vim
line 15: 
line 16: augroup filetypedetect
line 17: 
line 18: " Ignored extensions
line 19: if exists("*fnameescape")
line 21: au BufNewFile,BufRead ?\+.orig,?\+.bak,?\+.old,?\+.new,?\+.dpkg-dist,?\+.dpkg-old,?\+.dpkg-new,?\+.dpkg-bak,?\+.rpmsave,?\+.rpmnew exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r"))
line 28: au BufNewFile,BufRead *~ let s:name = expand("<afile>") | let s:short = substitute(s:name, '\~$', '', '') | if s:name != s:short && s:short != "" |   exe "doau filetypedetect BufRead " . fnameescape(s:short) | endif | unlet! s:name s:short
line 32: au BufNewFile,BufRead ?\+.in if expand("<afile>:t") != "configure.in" |   exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r")) | endif
line 33: elseif &verbose > 0
line 34:   echomsg "Warning: some filetypes will not be recognized because this version of Vim does not have fnameescape()"
line 35: endif
line 36: 
line 37: " Pattern used to match file names which should not be inspected.
line 38: " Currently finds compressed files.
line 39: if !exists("g:ft_ignore_pat")
line 40:   let g:ft_ignore_pat = '\.\(Z\|gz\|bz2\|zip\|tgz\)$'
line 41: endif
line 42: 
line 43: " Function used for patterns that end in a star: don't set the filetype if the
line 44: " file name matches ft_ignore_pat.
line 45: func! s:StarSetf(ft)
line 50: 
line 51: " Abaqus or Trasys
line 52: au BufNewFile,BufRead *.inp^I^I^Icall s:Check_inp()
line 53: 
line 54: func! s:Check_inp()
line 73: 
line 74: " A-A-P recipe
line 75: au BufNewFile,BufRead *.aap^I^I^Isetf aap
line 76: 
line 77: " A2ps printing utility
line 78: au BufNewFile,BufRead */etc/a2ps.cfg,*/etc/a2ps/*.cfg,a2psrc,.a2psrc setf a2ps
line 79: 
line 80: " ABAB/4
line 81: au BufNewFile,BufRead *.abap^I^I^Isetf abap
line 82: 
line 83: " ABC music notation
line 84: au BufNewFile,BufRead *.abc^I^I^Isetf abc
line 85: 
line 86: " ABEL
line 87: au BufNewFile,BufRead *.abl^I^I^Isetf abel
line 88: 
line 89: " AceDB
line 90: au BufNewFile,BufRead *.wrm^I^I^Isetf acedb
line 91: 
line 92: " Ada (83, 9X, 95)
line 93: au BufNewFile,BufRead *.adb,*.ads,*.ada^I^Isetf ada
line 94: if has("vms")
line 95:   au BufNewFile,BufRead *.gpr,*.ada_m,*.adc^Isetf ada
line 96: else
line 97:   au BufNewFile,BufRead *.gpr^I^I^Isetf ada
line 98: endif
line 99: 
line 100: " AHDL
line 101: au BufNewFile,BufRead *.tdf^I^I^Isetf ahdl
line 102: 
line 103: " AMPL
line 104: au BufNewFile,BufRead *.run^I^I^Isetf ampl
line 105: 
line 106: " Ant
line 107: au BufNewFile,BufRead build.xml^I^I^Isetf ant
line 108: 
line 109: " Arduino
line 110: au BufNewFile,BufRead *.ino,*.pde^I^Isetf arduino
line 111: 
line 112: " Apache style config file
line 113: au BufNewFile,BufRead proftpd.conf*^I^Icall s:StarSetf('apachestyle')
line 114: 
line 115: " Apache config file
line 116: au BufNewFile,BufRead .htaccess,*/etc/httpd/*.conf^I^Isetf apache
line 117: 
line 118: " XA65 MOS6510 cross assembler
line 119: au BufNewFile,BufRead *.a65^I^I^Isetf a65
line 120: 
line 121: " Applescript
line 122: au BufNewFile,BufRead *.scpt^I^I^Isetf applescript
line 123: 
line 124: " Applix ELF
line 126: au BufNewFile,BufRead *.am if expand("<afile>") !~? 'Makefile.am\>' | setf elf | endif
line 127: 
line 128: " ALSA configuration
line 129: au BufNewFile,BufRead .asoundrc,*/usr/share/alsa/alsa.conf,*/etc/asound.conf setf alsaconf
line 130: 
line 131: " Arc Macro Language
line 132: au BufNewFile,BufRead *.aml^I^I^Isetf aml
line 133: 
line 134: " APT config file
line 135: au BufNewFile,BufRead apt.conf^I^I       setf aptconf
line 136: au BufNewFile,BufRead */.aptitude/config       setf aptconf
line 137: au BufNewFile,BufRead */etc/apt/apt.conf.d/{[-_[:alnum:]]\+,[-_.[:alnum:]]\+.conf} setf aptconf
line 138: 
line 139: " Arch Inventory file
line 140: au BufNewFile,BufRead .arch-inventory,=tagging-method^Isetf arch
line 141: 
line 142: " ART*Enterprise (formerly ART-IM)
line 143: au BufNewFile,BufRead *.art^I^I^Isetf art
line 144: 
line 145: " AsciiDoc
line 146: au BufNewFile,BufRead *.asciidoc,*.adoc^I^Isetf asciidoc
line 147: 
line 148: " ASN.1
line 149: au BufNewFile,BufRead *.asn,*.asn1^I^Isetf asn
line 150: 
line 151: " Active Server Pages (with Visual Basic Script)
line 157: au BufNewFile,BufRead *.asa if exists("g:filetype_asa") |   exe "setf " . g:filetype_asa | else |   setf aspvbs | endif
line 158: 
line 159: " Active Server Pages (with Perl or Visual Basic Script)
line 167: au BufNewFile,BufRead *.asp if exists("g:filetype_asp") |   exe "setf " . g:filetype_asp | elseif getline(1) . getline(2) . getline(3) =~? "perlscript" |   setf aspperl | else |   setf aspvbs | endif
line 168: 
line 169: " Grub (must be before catch *.lst)
line 170: au BufNewFile,BufRead */boot/grub/menu.lst,*/boot/grub/grub.conf,*/etc/grub.conf setf grub
line 171: 
line 172: " Assembly (all kinds)
line 173: " *.lst is not pure assembly, it has two extra columns (address, byte codes)
line 174: au BufNewFile,BufRead *.asm,*.[sS],*.[aA],*.mac,*.lst^Icall s:FTasm()
line 175: 
line 176: " This function checks for the kind of assembly that is wanted by the user, or
line 177: " can be detected from the first five lines of the file.
line 178: func! s:FTasm()
line 199: 
line 200: func! s:FTasmsyntax()
line 212: 
line 213: " Macro (VAX)
line 214: au BufNewFile,BufRead *.mar^I^I^Isetf vmasm
line 215: 
line 216: " Atlas
line 217: au BufNewFile,BufRead *.atl,*.as^I^Isetf atlas
line 218: 
line 219: " Autoit v3
line 220: au BufNewFile,BufRead *.au3^I^I^Isetf autoit
line 221: 
line 222: " Autohotkey
line 223: au BufNewFile,BufRead *.ahk^I^I^Isetf autohotkey
line 224: 
line 225: " Automake
line 226: au BufNewFile,BufRead [mM]akefile.am,GNUmakefile.am^Isetf automake
line 227: 
line 228: " Autotest .at files are actually m4
line 229: au BufNewFile,BufRead *.at^I^I^Isetf m4
line 230: 
line 231: " Avenue
line 232: au BufNewFile,BufRead *.ave^I^I^Isetf ave
line 233: 
line 234: " Awk
line 235: au BufNewFile,BufRead *.awk^I^I^Isetf awk
line 236: 
line 237: " B
line 238: au BufNewFile,BufRead *.mch,*.ref,*.imp^I^Isetf b
line 239: 
line 240: " BASIC or Visual Basic
line 241: au BufNewFile,BufRead *.bas^I^I^Icall s:FTVB("basic")
line 242: 
line 243: " Check if one of the first five lines contains "VB_Name".  In that case it is
line 244: " probably a Visual Basic file.  Otherwise it's assumed to be "alt" filetype.
line 245: func! s:FTVB(alt)
line 252: 
line 253: " Visual Basic Script (close to Visual Basic) or Visual Basic .NET
line 254: au BufNewFile,BufRead *.vb,*.vbs,*.dsm,*.ctl^Isetf vb
line 255: 
line 256: " IBasic file (similar to QBasic)
line 257: au BufNewFile,BufRead *.iba,*.ibi^I^Isetf ibasic
line 258: 
line 259: " FreeBasic file (similar to QBasic)
line 260: au BufNewFile,BufRead *.fb,*.bi^I^I^Isetf freebasic
line 261: 
line 262: " Batch file for MSDOS.
line 263: au BufNewFile,BufRead *.bat,*.sys^I^Isetf dosbatch
line 264: " *.cmd is close to a Batch file, but on OS/2 Rexx files also use *.cmd.
line 266: au BufNewFile,BufRead *.cmd if getline(1) =~ '^/\*' | setf rexx | else | setf dosbatch | endif
line 267: 
line 268: " Batch file for 4DOS
line 269: au BufNewFile,BufRead *.btm^I^I^Icall s:FTbtm()
line 270: func! s:FTbtm()
line 277: 
line 278: " BC calculator
line 279: au BufNewFile,BufRead *.bc^I^I^Isetf bc
line 280: 
line 281: " BDF font
line 282: au BufNewFile,BufRead *.bdf^I^I^Isetf bdf
line 283: 
line 284: " BibTeX bibliography database file
line 285: au BufNewFile,BufRead *.bib^I^I^Isetf bib
line 286: 
line 287: " BibTeX Bibliography Style
line 288: au BufNewFile,BufRead *.bst^I^I^Isetf bst
line 289: 
line 290: " BIND configuration
line 291: au BufNewFile,BufRead named.conf,rndc.conf^Isetf named
line 292: 
line 293: " BIND zone
line 294: au BufNewFile,BufRead named.root^I^Isetf bindzone
line 295: au BufNewFile,BufRead *.db^I^I^Icall s:BindzoneCheck('')
line 296: 
line 297: func! s:BindzoneCheck(default)
line 304: 
line 305: " Blank
line 306: au BufNewFile,BufRead *.bl^I^I^Isetf blank
line 307: 
line 308: " Blkid cache file
line 309: au BufNewFile,BufRead */etc/blkid.tab,*/etc/blkid.tab.old   setf xml
line 310: 
line 311: " Bazel (http://bazel.io)
line 312: autocmd BufRead,BufNewFile *.bzl,BUILD,WORKSPACE setfiletype bzl
line 313: 
line 314: " C or lpc
line 315: au BufNewFile,BufRead *.c^I^I^Icall s:FTlpc()
line 316: 
line 317: func! s:FTlpc()
line 330: 
line 331: " Calendar
line 332: au BufNewFile,BufRead calendar^I^I^Isetf calendar
line 333: 
line 334: " C#
line 335: au BufNewFile,BufRead *.cs^I^I^Isetf cs
line 336: 
line 337: " CSDL
line 338: au BufNewFile,BufRead *.csdl^I^I^Isetf csdl
line 339: 
line 340: " Cabal
line 341: au BufNewFile,BufRead *.cabal^I^I^Isetf cabal
line 342: 
line 343: " Cdrdao TOC
line 344: au BufNewFile,BufRead *.toc^I^I^Isetf cdrtoc
line 345: 
line 346: " Cdrdao config
line 347: au BufNewFile,BufRead */etc/cdrdao.conf,*/etc/defaults/cdrdao,*/etc/default/cdrdao,.cdrdao^Isetf cdrdaoconf
line 348: 
line 349: " Cfengine
line 350: au BufNewFile,BufRead cfengine.conf^I^Isetf cfengine
line 351: 
line 352: " ChaiScript
line 353: au BufRead,BufNewFile *.chai^I^I^Isetf chaiscript
line 354: 
line 355: " Comshare Dimension Definition Language
line 356: au BufNewFile,BufRead *.cdl^I^I^Isetf cdl
line 357: 
line 358: " Conary Recipe
line 359: au BufNewFile,BufRead *.recipe^I^I^Isetf conaryrecipe
line 360: 
line 361: " Controllable Regex Mutilator
line 362: au BufNewFile,BufRead *.crm^I^I^Isetf crm
line 363: 
line 364: " Cyn++
line 365: au BufNewFile,BufRead *.cyn^I^I^Isetf cynpp
line 366: 
line 367: " Cynlib
line 368: " .cc and .cpp files can be C++ or Cynlib.
line 370: au BufNewFile,BufRead *.cc if exists("cynlib_syntax_for_cc")|setf cynlib|else|setf cpp|endif
line 372: au BufNewFile,BufRead *.cpp if exists("cynlib_syntax_for_cpp")|setf cynlib|else|setf cpp|endif
line 373: 
line 374: " C++
line 375: au BufNewFile,BufRead *.cxx,*.c++,*.hh,*.hxx,*.hpp,*.ipp,*.moc,*.tcc,*.inl setf cpp
line 376: if has("fname_case")
line 377:   au BufNewFile,BufRead *.C,*.H setf cpp
line 378: endif
line 379: 
line 380: " .h files can be C, Ch C++, ObjC or ObjC++.
line 381: " Set c_syntax_for_h if you want C, ch_syntax_for_h if you want Ch. ObjC is
line 382: " detected automatically.
line 383: au BufNewFile,BufRead *.h^I^I^Icall s:FTheader()
line 384: 
line 385: func! s:FTheader()
line 400: 
line 401: " Ch (CHscript)
line 402: au BufNewFile,BufRead *.chf^I^I^Isetf ch
line 403: 
line 404: " TLH files are C++ headers generated by Visual C++'s #import from typelibs
line 405: au BufNewFile,BufRead *.tlh^I^I^Isetf cpp
line 406: 
line 407: " Cascading Style Sheets
line 408: au BufNewFile,BufRead *.css^I^I^Isetf css
line 409: 
line 410: " Century Term Command Scripts (*.cmd too)
line 411: au BufNewFile,BufRead *.con^I^I^Isetf cterm
line 412: 
line 413: " Changelog
line 415: au BufNewFile,BufRead changelog.Debian,changelog.dch,NEWS.Debian,NEWS.dch^Isetf debchangelog
line 416: 
line 422: au BufNewFile,BufRead [cC]hange[lL]og  if getline(1) =~ '; urgency='|   setf debchangelog| else|   setf changelog| endif
line 423: 
line 427: au BufNewFile,BufRead NEWS  if getline(1) =~ '; urgency='|   setf debchangelog| endif
line 428: 
line 429: " CHILL
line 430: au BufNewFile,BufRead *..ch^I^I^Isetf chill
line 431: 
line 432: " Changes for WEB and CWEB or CHILL
line 433: au BufNewFile,BufRead *.ch^I^I^Icall s:FTchange()
line 434: 
line 435: " This function checks if one of the first ten lines start with a '@'.  In
line 436: " that case it is probably a change file.
line 437: " If the first line starts with # or ! it's probably a ch file.
line 438: " If a line has "main", "include", "//" ir "/*" it's probably ch.
line 439: " Otherwise CHILL is assumed.
line 440: func! s:FTchange()
line 463: 
line 464: " ChordPro
line 465: au BufNewFile,BufRead *.chopro,*.crd,*.cho,*.crdpro,*.chordpro^Isetf chordpro
line 466: 
line 467: " Clean
line 468: au BufNewFile,BufRead *.dcl,*.icl^I^Isetf clean
line 469: 
line 470: " Clever
line 471: au BufNewFile,BufRead *.eni^I^I^Isetf cl
line 472: 
line 473: " Clever or dtd
line 474: au BufNewFile,BufRead *.ent^I^I^Icall s:FTent()
line 475: 
line 476: func! s:FTent()
line 495: 
line 496: " Clipper (or FoxPro; could also be eviews)
line 502: au BufNewFile,BufRead *.prg if exists("g:filetype_prg") |   exe "setf " . g:filetype_prg | else |   setf clipper | endif
line 503: 
line 504: " Clojure
line 505: au BufNewFile,BufRead *.clj,*.cljs,*.cljx,*.cljc^I^Isetf clojure
line 506: 
line 507: " Cmake
line 508: au BufNewFile,BufRead CMakeLists.txt,*.cmake,*.cmake.in^I^Isetf cmake
line 509: 
line 510: " Cmusrc
line 511: au BufNewFile,BufRead */.cmus/{autosave,rc,command-history,*.theme} setf cmusrc
line 512: au BufNewFile,BufRead */cmus/{rc,*.theme}^I^I^Isetf cmusrc
line 513: 
line 514: " Cobol
line 515: au BufNewFile,BufRead *.cbl,*.cob,*.lib^Isetf cobol
line 516: "   cobol or zope form controller python script? (heuristic)
line 522: au BufNewFile,BufRead *.cpy if getline(1) =~ '^##' |   setf python | else |   setf cobol | endif
line 523: 
line 524: " Coco/R
line 525: au BufNewFile,BufRead *.atg^I^I^Isetf coco
line 526: 
line 527: " Cold Fusion
line 528: au BufNewFile,BufRead *.cfm,*.cfi,*.cfc^I^Isetf cf
line 529: 
line 530: " Configure scripts
line 531: au BufNewFile,BufRead configure.in,configure.ac setf config
line 532: 
line 533: " CUDA  Cumpute Unified Device Architecture
line 534: au BufNewFile,BufRead *.cu^I^I^Isetf cuda
line 535: 
line 536: " Dockerfile
line 537: au BufNewFile,BufRead Dockerfile^I^Isetf dockerfile
line 538: 
line 539: " WildPackets EtherPeek Decoder
line 540: au BufNewFile,BufRead *.dcd^I^I^Isetf dcd
line 541: 
line 542: " Enlightenment configuration files
line 543: au BufNewFile,BufRead *enlightenment/*.cfg^Isetf c
line 544: 
line 545: " Eterm
line 546: au BufNewFile,BufRead *Eterm/*.cfg^I^Isetf eterm
line 547: 
line 548: " Euphoria 3 or 4
line 549: au BufNewFile,BufRead *.eu,*.ew,*.ex,*.exu,*.exw  call s:EuphoriaCheck()
line 550: if has("fname_case")
line 551:    au BufNewFile,BufRead *.EU,*.EW,*.EX,*.EXU,*.EXW  call s:EuphoriaCheck()
line 552: endif
line 553: 
line 554: func! s:EuphoriaCheck()
line 561: 
line 562: " Lynx config files
line 563: au BufNewFile,BufRead lynx.cfg^I^I^Isetf lynx
line 564: 
line 565: " Quake
line 566: au BufNewFile,BufRead *baseq[2-3]/*.cfg,*id1/*.cfg^Isetf quake
line 567: au BufNewFile,BufRead *quake[1-3]/*.cfg^I^I^Isetf quake
line 568: 
line 569: " Quake C
line 570: au BufNewFile,BufRead *.qc^I^I^Isetf c
line 571: 
line 572: " Configure files
line 573: au BufNewFile,BufRead *.cfg^I^I^Isetf cfg
line 574: 
line 575: " Cucumber
line 576: au BufNewFile,BufRead *.feature^I^I^Isetf cucumber
line 577: 
line 578: " Communicating Sequential Processes
line 579: au BufNewFile,BufRead *.csp,*.fdr^I^Isetf csp
line 580: 
line 581: " CUPL logic description and simulation
line 582: au BufNewFile,BufRead *.pld^I^I^Isetf cupl
line 583: au BufNewFile,BufRead *.si^I^I^Isetf cuplsim
line 584: 
line 585: " Debian Control
line 586: au BufNewFile,BufRead */debian/control^I^Isetf debcontrol
line 590: au BufNewFile,BufRead control  if getline(1) =~ '^Source:'|   setf debcontrol| endif
line 591: 
line 592: " Debian Sources.list
line 593: au BufNewFile,BufRead */etc/apt/sources.list^I^Isetf debsources
line 594: au BufNewFile,BufRead */etc/apt/sources.list.d/*.list^Isetf debsources
line 595: 
line 596: " Deny hosts
line 597: au BufNewFile,BufRead denyhosts.conf^I^Isetf denyhosts
line 598: 
line 599: " dnsmasq(8) configuration files
line 600: au BufNewFile,BufRead */etc/dnsmasq.conf^Isetf dnsmasq
line 601: 
line 602: " ROCKLinux package description
line 603: au BufNewFile,BufRead *.desc^I^I^Isetf desc
line 604: 
line 605: " the D language or dtrace
line 606: au BufNewFile,BufRead *.d^I^I^Icall s:DtraceCheck()
line 607: 
line 608: func! s:DtraceCheck()
line 619: 
line 620: " Desktop files
line 621: au BufNewFile,BufRead *.desktop,.directory^Isetf desktop
line 622: 
line 623: " Dict config
line 624: au BufNewFile,BufRead dict.conf,.dictrc^I^Isetf dictconf
line 625: 
line 626: " Dictd config
line 627: au BufNewFile,BufRead dictd.conf^I^Isetf dictdconf
line 628: 
line 629: " Diff files
line 630: au BufNewFile,BufRead *.diff,*.rej,*.patch^Isetf diff
line 631: 
line 632: " Dircolors
line 633: au BufNewFile,BufRead .dir_colors,.dircolors,*/etc/DIR_COLORS^Isetf dircolors
line 634: 
line 635: " Diva (with Skill) or InstallShield
line 641: au BufNewFile,BufRead *.rul if getline(1).getline(2).getline(3).getline(4).getline(5).getline(6) =~? 'InstallShield' |   setf ishd | else |   setf diva | endif
line 642: 
line 643: " DCL (Digital Command Language - vms) or DNS zone file
line 644: au BufNewFile,BufRead *.com^I^I^Icall s:BindzoneCheck('dcl')
line 645: 
line 646: " DOT
line 647: au BufNewFile,BufRead *.dot^I^I^Isetf dot
line 648: 
line 649: " Dylan - lid files
line 650: au BufNewFile,BufRead *.lid^I^I^Isetf dylanlid
line 651: 
line 652: " Dylan - intr files (melange)
line 653: au BufNewFile,BufRead *.intr^I^I^Isetf dylanintr
line 654: 
line 655: " Dylan
line 656: au BufNewFile,BufRead *.dylan^I^I^Isetf dylan
line 657: 
line 658: " Microsoft Module Definition
line 659: au BufNewFile,BufRead *.def^I^I^Isetf def
line 660: 
line 661: " Dracula
line 662: au BufNewFile,BufRead *.drac,*.drc,*lvs,*lpe^Isetf dracula
line 663: 
line 664: " Datascript
line 665: au BufNewFile,BufRead *.ds^I^I^Isetf datascript
line 666: 
line 667: " dsl
line 668: au BufNewFile,BufRead *.dsl^I^I^Isetf dsl
line 669: 
line 670: " DTD (Document Type Definition for XML)
line 671: au BufNewFile,BufRead *.dtd^I^I^Isetf dtd
line 672: 
line 673: " DTS/DSTI (device tree files)
line 674: au BufNewFile,BufRead *.dts,*.dtsi^I^Isetf dts
line 675: 
line 676: " EDIF (*.edf,*.edif,*.edn,*.edo)
line 677: au BufNewFile,BufRead *.ed\(f\|if\|n\|o\)^Isetf edif
line 678: 
line 679: " Embedix Component Description
line 680: au BufNewFile,BufRead *.ecd^I^I^Isetf ecd
line 681: 
line 682: " Eiffel or Specman or Euphoria
line 683: au BufNewFile,BufRead *.e,*.E^I^I^Icall s:FTe()
line 684: 
line 685: " Elinks configuration
line 686: au BufNewFile,BufRead */etc/elinks.conf,*/.elinks/elinks.conf^Isetf elinks
line 687: 
line 688: func! s:FTe()
line 703: 
line 704: " ERicsson LANGuage; Yaws is erlang too
line 705: au BufNewFile,BufRead *.erl,*.hrl,*.yaws^Isetf erlang
line 706: 
line 707: " Elm Filter Rules file
line 708: au BufNewFile,BufRead filter-rules^I^Isetf elmfilt
line 709: 
line 710: " ESMTP rc file
line 711: au BufNewFile,BufRead *esmtprc^I^I^Isetf esmtprc
line 712: 
line 713: " ESQL-C
line 714: au BufNewFile,BufRead *.ec,*.EC^I^I^Isetf esqlc
line 715: 
line 716: " Esterel
line 717: au BufNewFile,BufRead *.strl^I^I^Isetf esterel
line 718: 
line 719: " Essbase script
line 720: au BufNewFile,BufRead *.csc^I^I^Isetf csc
line 721: 
line 722: " Exim
line 723: au BufNewFile,BufRead exim.conf^I^I^Isetf exim
line 724: 
line 725: " Expect
line 726: au BufNewFile,BufRead *.exp^I^I^Isetf expect
line 727: 
line 728: " Exports
line 729: au BufNewFile,BufRead exports^I^I^Isetf exports
line 730: 
line 731: " Falcon
line 732: au BufNewFile,BufRead *.fal^I^I^Isetf falcon
line 733: 
line 734: " Fantom
line 735: au BufNewFile,BufRead *.fan,*.fwt^I^Isetf fan
line 736: 
line 737: " Factor
line 738: au BufNewFile,BufRead *.factor^I^I^Isetf factor
line 739: 
line 740: " Fetchmail RC file
line 741: au BufNewFile,BufRead .fetchmailrc^I^Isetf fetchmail
line 742: 
line 743: " FlexWiki - disabled, because it has side effects when a .wiki file
line 744: " is not actually FlexWiki
line 745: "au BufNewFile,BufRead *.wiki^I^I^Isetf flexwiki
line 746: 
line 747: " Focus Executable
line 748: au BufNewFile,BufRead *.fex,*.focexec^I^Isetf focexec
line 749: 
line 750: " Focus Master file (but not for auto.master)
line 751: au BufNewFile,BufRead auto.master^I^Isetf conf
line 752: au BufNewFile,BufRead *.mas,*.master^I^Isetf master
line 753: 
line 754: " Forth
line 755: au BufNewFile,BufRead *.fs,*.ft^I^I^Isetf forth
line 756: 
line 757: " Reva Forth
line 758: au BufNewFile,BufRead *.frt^I^I^Isetf reva
line 759: 
line 760: " Fortran
line 761: if has("fname_case")
line 762:   au BufNewFile,BufRead *.F,*.FOR,*.FPP,*.FTN,*.F77,*.F90,*.F95,*.F03,*.F08^I setf fortran
line 763: endif
line 764: au BufNewFile,BufRead   *.f,*.for,*.fortran,*.fpp,*.ftn,*.f77,*.f90,*.f95,*.f03,*.f08  setf fortran
line 765: 
line 766: " Framescript
line 767: au BufNewFile,BufRead *.fsl^I^I^Isetf framescript
line 768: 
line 769: " FStab
line 770: au BufNewFile,BufRead fstab,mtab^I^Isetf fstab
line 771: 
line 772: " GDB command files
line 773: au BufNewFile,BufRead .gdbinit^I^I^Isetf gdb
line 774: 
line 775: " GDMO
line 776: au BufNewFile,BufRead *.mo,*.gdmo^I^Isetf gdmo
line 777: 
line 778: " Gedcom
line 779: au BufNewFile,BufRead *.ged,lltxxxxx.txt^Isetf gedcom
line 780: 
line 781: " Git
line 782: au BufNewFile,BufRead COMMIT_EDITMSG^I^Isetf gitcommit
line 783: au BufNewFile,BufRead MERGE_MSG^I^I^Isetf gitcommit
line 784: au BufNewFile,BufRead *.git/config,.gitconfig,.gitmodules setf gitconfig
line 785: au BufNewFile,BufRead *.git/modules/*/config^Isetf gitconfig
line 786: au BufNewFile,BufRead */.config/git/config^Isetf gitconfig
line 787: if !empty($XDG_CONFIG_HOME)
line 788:   au BufNewFile,BufRead $XDG_CONFIG_HOME/git/config^Isetf gitconfig
line 789: endif
line 790: au BufNewFile,BufRead git-rebase-todo^I^Isetf gitrebase
line 794: au BufNewFile,BufRead .msg.[0-9]* if getline(1) =~ '^From.*# This line is ignored.$' |   setf gitsendemail | endif
line 798: au BufNewFile,BufRead *.git/* if getline(1) =~ '^\x\{40\}\>\|^ref: ' |   setf git | endif
line 799: 
line 800: " Gkrellmrc
line 801: au BufNewFile,BufRead gkrellmrc,gkrellmrc_?^Isetf gkrellmrc
line 802: 
line 803: " GP scripts (2.0 and onward)
line 804: au BufNewFile,BufRead *.gp,.gprc^I^Isetf gp
line 805: 
line 806: " GPG
line 807: au BufNewFile,BufRead */.gnupg/options^I^Isetf gpg
line 808: au BufNewFile,BufRead */.gnupg/gpg.conf^I^Isetf gpg
line 809: au BufNewFile,BufRead */usr/*/gnupg/options.skel setf gpg
line 810: 
line 811: " gnash(1) configuration files
line 812: au BufNewFile,BufRead gnashrc,.gnashrc,gnashpluginrc,.gnashpluginrc setf gnash
line 813: 
line 814: " Gitolite
line 815: au BufNewFile,BufRead gitolite.conf^I^Isetf gitolite
line 816: au BufNewFile,BufRead */gitolite-admin/conf/*^Icall s:StarSetf('gitolite')
line 817: au BufNewFile,BufRead {,.}gitolite.rc,example.gitolite.rc^Isetf perl
line 818: 
line 819: " Gnuplot scripts
line 820: au BufNewFile,BufRead *.gpi^I^I^Isetf gnuplot
line 821: 
line 822: " Go (Google)
line 823: au BufNewFile,BufRead *.go^I^I^Isetf go
line 824: 
line 825: " GrADS scripts
line 826: au BufNewFile,BufRead *.gs^I^I^Isetf grads
line 827: 
line 828: " Gretl
line 829: au BufNewFile,BufRead *.gretl^I^I^Isetf gretl
line 830: 
line 831: " Groovy
line 832: au BufNewFile,BufRead *.gradle,*.groovy^I^Isetf groovy
line 833: 
line 834: " GNU Server Pages
line 835: au BufNewFile,BufRead *.gsp^I^I^Isetf gsp
line 836: 
line 837: " Group file
line 838: au BufNewFile,BufRead */etc/group,*/etc/group-,*/etc/group.edit,*/etc/gshadow,*/etc/gshadow-,*/etc/gshadow.edit,*/var/backups/group.bak,*/var/backups/gshadow.bak  setf group
line 839: 
line 840: " GTK RC
line 841: au BufNewFile,BufRead .gtkrc,gtkrc^I^Isetf gtkrc
line 842: 
line 843: " Haml
line 844: au BufNewFile,BufRead *.haml^I^I^Isetf haml
line 845: 
line 846: " Hamster Classic | Playground files
line 847: au BufNewFile,BufRead *.hsc,*.hsm^I^Isetf hamster
line 848: 
line 849: " Haskell
line 850: au BufNewFile,BufRead *.hs,*.hs-boot^I^Isetf haskell
line 851: au BufNewFile,BufRead *.lhs^I^I^Isetf lhaskell
line 852: au BufNewFile,BufRead *.chs^I^I^Isetf chaskell
line 853: 
line 854: " Haste
line 855: au BufNewFile,BufRead *.ht^I^I^Isetf haste
line 856: au BufNewFile,BufRead *.htpp^I^I^Isetf hastepreproc
line 857: 
line 858: " Hercules
line 859: au BufNewFile,BufRead *.vc,*.ev,*.rs,*.sum,*.errsum^Isetf hercules
line 860: 
line 861: " HEX (Intel)
line 862: au BufNewFile,BufRead *.hex,*.h32^I^Isetf hex
line 863: 
line 864: " Tilde (must be before HTML)
line 865: au BufNewFile,BufRead *.t.html^I^I^Isetf tilde
line 866: 
line 867: " HTML (.shtml and .stm for server side)
line 868: au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm  call s:FThtml()
line 869: 
line 870: " Distinguish between HTML, XHTML and Django
line 871: func! s:FThtml()
line 886: 
line 887: " HTML with Ruby - eRuby
line 888: au BufNewFile,BufRead *.erb,*.rhtml^I^Isetf eruby
line 889: 
line 890: " HTML with M4
line 891: au BufNewFile,BufRead *.html.m4^I^I^Isetf htmlm4
line 892: 
line 893: " HTML Cheetah template
line 894: au BufNewFile,BufRead *.tmpl^I^I^Isetf htmlcheetah
line 895: 
line 896: " Host config
line 897: au BufNewFile,BufRead */etc/host.conf^I^Isetf hostconf
line 898: 
line 899: " Hosts access
line 900: au BufNewFile,BufRead */etc/hosts.allow,*/etc/hosts.deny  setf hostsaccess
line 901: 
line 902: " Hyper Builder
line 903: au BufNewFile,BufRead *.hb^I^I^Isetf hb
line 904: 
line 905: " Httest
line 906: au BufNewFile,BufRead *.htt,*.htb^I^Isetf httest
line 907: 
line 908: " Icon
line 909: au BufNewFile,BufRead *.icn^I^I^Isetf icon
line 910: 
line 911: " IDL (Interface Description Language)
line 912: au BufNewFile,BufRead *.idl^I^I^Icall s:FTidl()
line 913: 
line 914: " Distinguish between standard IDL and MS-IDL
line 915: func! s:FTidl()
line 926: 
line 927: " Microsoft IDL (Interface Description Language)  Also *.idl
line 928: " MOF = WMI (Windows Management Instrumentation) Managed Object Format
line 929: au BufNewFile,BufRead *.odl,*.mof^I^Isetf msidl
line 930: 
line 931: " Icewm menu
line 932: au BufNewFile,BufRead */.icewm/menu^I^Isetf icemenu
line 933: 
line 934: " Indent profile (must come before IDL *.pro!)
line 935: au BufNewFile,BufRead .indent.pro^I^Isetf indent
line 936: au BufNewFile,BufRead indent.pro^I^Icall s:ProtoCheck('indent')
line 937: 
line 938: " IDL (Interactive Data Language)
line 939: au BufNewFile,BufRead *.pro^I^I^Icall s:ProtoCheck('idlang')
line 940: 
line 941: " Distinguish between "default" and Cproto prototype file. */
line 942: func! s:ProtoCheck(default)
line 954: 
line 955: 
line 956: " Indent RC
line 957: au BufNewFile,BufRead indentrc^I^I^Isetf indent
line 958: 
line 959: " Inform
line 960: au BufNewFile,BufRead *.inf,*.INF^I^Isetf inform
line 961: 
line 962: " Initng
line 963: au BufNewFile,BufRead */etc/initng/*/*.i,*.ii^Isetf initng
line 964: 
line 965: " Innovation Data Processing
line 966: au BufRead,BufNewFile upstream.dat\c,upstream.*.dat\c,*.upstream.dat\c ^Isetf upstreamdat
line 967: au BufRead,BufNewFile upstream.log\c,upstream.*.log\c,*.upstream.log\c ^Isetf upstreamlog
line 968: au BufRead,BufNewFile upstreaminstall.log\c,upstreaminstall.*.log\c,*.upstreaminstall.log\c setf upstreaminstalllog
line 969: au BufRead,BufNewFile usserver.log\c,usserver.*.log\c,*.usserver.log\c ^Isetf usserverlog
line 970: au BufRead,BufNewFile usw2kagt.log\c,usw2kagt.*.log\c,*.usw2kagt.log\c ^Isetf usw2kagtlog
line 971: 
line 972: " Ipfilter
line 973: au BufNewFile,BufRead ipf.conf,ipf6.conf,ipf.rules^Isetf ipfilter
line 974: 
line 975: " Informix 4GL (source - canonical, include file, I4GL+M4 preproc.)
line 976: au BufNewFile,BufRead *.4gl,*.4gh,*.m4gl^Isetf fgl
line 977: 
line 978: " .INI file for MSDOS
line 979: au BufNewFile,BufRead *.ini^I^I^Isetf dosini
line 980: 
line 981: " SysV Inittab
line 982: au BufNewFile,BufRead inittab^I^I^Isetf inittab
line 983: 
line 984: " Inno Setup
line 985: au BufNewFile,BufRead *.iss^I^I^Isetf iss
line 986: 
line 987: " J
line 988: au BufNewFile,BufRead *.ijs^I^I^Isetf j
line 989: 
line 990: " JAL
line 991: au BufNewFile,BufRead *.jal,*.JAL^I^Isetf jal
line 992: 
line 993: " Jam
line 994: au BufNewFile,BufRead *.jpl,*.jpr^I^Isetf jam
line 995: 
line 996: " Java
line 997: au BufNewFile,BufRead *.java,*.jav^I^Isetf java
line 998: 
line 999: " JavaCC
line 1000: au BufNewFile,BufRead *.jj,*.jjt^I^Isetf javacc
line 1001: 
line 1002: " JavaScript, ECMAScript
line 1003: au BufNewFile,BufRead *.js,*.javascript,*.es,*.jsx   setf javascript
line 1004: 
line 1005: " Java Server Pages
line 1006: au BufNewFile,BufRead *.jsp^I^I^Isetf jsp
line 1007: 
line 1008: " Java Properties resource file (note: doesn't catch font.properties.pl)
line 1009: au BufNewFile,BufRead *.properties,*.properties_??,*.properties_??_??^Isetf jproperties
line 1010: au BufNewFile,BufRead *.properties_??_??_*^Icall s:StarSetf('jproperties')
line 1011: 
line 1012: " Jess
line 1013: au BufNewFile,BufRead *.clp^I^I^Isetf jess
line 1014: 
line 1015: " Jgraph
line 1016: au BufNewFile,BufRead *.jgr^I^I^Isetf jgraph
line 1017: 
line 1018: " Jovial
line 1019: au BufNewFile,BufRead *.jov,*.j73,*.jovial^Isetf jovial
line 1020: 
line 1021: " JSON
line 1022: au BufNewFile,BufRead *.json,*.jsonp^I^Isetf json
line 1023: 
line 1024: " Kixtart
line 1025: au BufNewFile,BufRead *.kix^I^I^Isetf kix
line 1026: 
line 1027: " Kimwitu[++]
line 1028: au BufNewFile,BufRead *.k^I^I^Isetf kwt
line 1029: 
line 1030: " Kivy
line 1031: au BufNewFile,BufRead *.kv^I^I^Isetf kivy
line 1032: 
line 1033: " KDE script
line 1034: au BufNewFile,BufRead *.ks^I^I^Isetf kscript
line 1035: 
line 1036: " Kconfig
line 1037: au BufNewFile,BufRead Kconfig,Kconfig.debug^Isetf kconfig
line 1038: 
line 1039: " Lace (ISE)
line 1040: au BufNewFile,BufRead *.ace,*.ACE^I^Isetf lace
line 1041: 
line 1042: " Latte
line 1043: au BufNewFile,BufRead *.latte,*.lte^I^Isetf latte
line 1044: 
line 1045: " Limits
line 1046: au BufNewFile,BufRead */etc/limits,*/etc/*limits.conf,*/etc/*limits.d/*.conf^Isetf limits
line 1047: 
line 1048: " LambdaProlog (*.mod too, see Modsim)
line 1049: au BufNewFile,BufRead *.sig^I^I^Isetf lprolog
line 1050: 
line 1051: " LDAP LDIF
line 1052: au BufNewFile,BufRead *.ldif^I^I^Isetf ldif
line 1053: 
line 1054: " Ld loader
line 1055: au BufNewFile,BufRead *.ld^I^I^Isetf ld
line 1056: 
line 1057: " Less
line 1058: au BufNewFile,BufRead *.less^I^I^Isetf less
line 1059: 
line 1060: " Lex
line 1061: au BufNewFile,BufRead *.lex,*.l,*.lxx,*.l++^Isetf lex
line 1062: 
line 1063: " Libao
line 1064: au BufNewFile,BufRead */etc/libao.conf,*/.libao^Isetf libao
line 1065: 
line 1066: " Libsensors
line 1067: au BufNewFile,BufRead */etc/sensors.conf,*/etc/sensors3.conf^Isetf sensors
line 1068: 
line 1069: " LFTP
line 1070: au BufNewFile,BufRead lftp.conf,.lftprc,*lftp/rc^Isetf lftp
line 1071: 
line 1072: " Lifelines (or Lex for C++!)
line 1073: au BufNewFile,BufRead *.ll^I^I^Isetf lifelines
line 1074: 
line 1075: " Lilo: Linux loader
line 1076: au BufNewFile,BufRead lilo.conf^I^I^Isetf lilo
line 1077: 
line 1078: " Lisp (*.el = ELisp, *.cl = Common Lisp, *.jl = librep Lisp)
line 1079: if has("fname_case")
line 1080:   au BufNewFile,BufRead *.lsp,*.lisp,*.el,*.cl,*.jl,*.L,.emacs,.sawfishrc setf lisp
line 1081: else
line 1082:   au BufNewFile,BufRead *.lsp,*.lisp,*.el,*.cl,*.jl,.emacs,.sawfishrc setf lisp
line 1083: endif
line 1084: 
line 1085: " SBCL implementation of Common Lisp
line 1086: au BufNewFile,BufRead sbclrc,.sbclrc^I^Isetf lisp
line 1087: 
line 1088: " Liquid
line 1089: au BufNewFile,BufRead *.liquid^I^I^Isetf liquid
line 1090: 
line 1091: " Lite
line 1092: au BufNewFile,BufRead *.lite,*.lt^I^Isetf lite
line 1093: 
line 1094: " LiteStep RC files
line 1095: au BufNewFile,BufRead */LiteStep/*/*.rc^I^Isetf litestep
line 1096: 
line 1097: " Login access
line 1098: au BufNewFile,BufRead */etc/login.access^Isetf loginaccess
line 1099: 
line 1100: " Login defs
line 1101: au BufNewFile,BufRead */etc/login.defs^I^Isetf logindefs
line 1102: 
line 1103: " Logtalk
line 1104: au BufNewFile,BufRead *.lgt^I^I^Isetf logtalk
line 1105: 
line 1106: " LOTOS
line 1107: au BufNewFile,BufRead *.lot,*.lotos^I^Isetf lotos
line 1108: 
line 1109: " Lout (also: *.lt)
line 1110: au BufNewFile,BufRead *.lou,*.lout^I^Isetf lout
line 1111: 
line 1112: " Lua
line 1113: au BufNewFile,BufRead *.lua^I^I^Isetf lua
line 1114: 
line 1115: " Luarocks
line 1116: au BufNewFile,BufRead *.rockspec^I^Isetf lua
line 1117: 
line 1118: " Linden Scripting Language (Second Life)
line 1119: au BufNewFile,BufRead *.lsl^I^I^Isetf lsl
line 1120: 
line 1121: " Lynx style file (or LotusScript!)
line 1122: au BufNewFile,BufRead *.lss^I^I^Isetf lss
line 1123: 
line 1124: " M4
line 1126: au BufNewFile,BufRead *.m4 if expand("<afile>") !~? 'html.m4$\|fvwm2rc' | setf m4 | endif
line 1127: 
line 1128: " MaGic Point
line 1129: au BufNewFile,BufRead *.mgp^I^I^Isetf mgp
line 1130: 
line 1131: " Mail (for Elm, trn, mutt, muttng, rn, slrn)
line 1132: au BufNewFile,BufRead snd.\d\+,.letter,.letter.\d\+,.followup,.article,.article.\d\+,pico.\d\+,mutt{ng,}-*-\w\+,mutt[[:alnum:]_-]\\\{6\},ae\d\+.txt,/tmp/SLRN[0-9A-Z.]\+,*.eml setf mail
line 1133: 
line 1134: " Mail aliases
line 1135: au BufNewFile,BufRead */etc/mail/aliases,*/etc/aliases^Isetf mailaliases
line 1136: 
line 1137: " Mailcap configuration file
line 1138: au BufNewFile,BufRead .mailcap,mailcap^I^Isetf mailcap
line 1139: 
line 1140: " Makefile
line 1141: au BufNewFile,BufRead *[mM]akefile,*.mk,*.mak,*.dsp setf make
line 1142: 
line 1143: " MakeIndex
line 1144: au BufNewFile,BufRead *.ist,*.mst^I^Isetf ist
line 1145: 
line 1146: " Mallard
line 1147: au BufNewFile,BufRead *.page^I^I^Isetf mallard
line 1148: 
line 1149: " Manpage
line 1150: au BufNewFile,BufRead *.man^I^I^Isetf man
line 1151: 
line 1152: " Man config
line 1153: au BufNewFile,BufRead */etc/man.conf,man.config^Isetf manconf
line 1154: 
line 1155: " Maple V
line 1156: au BufNewFile,BufRead *.mv,*.mpl,*.mws^I^Isetf maple
line 1157: 
line 1158: " Map (UMN mapserver config file)
line 1159: au BufNewFile,BufRead *.map^I^I^Isetf map
line 1160: 
line 1161: " Markdown
line 1162: au BufNewFile,BufRead *.markdown,*.mdown,*.mkd,*.mkdn,*.mdwn,*.md  setf markdown
line 1163: 
line 1164: " Mason
line 1165: au BufNewFile,BufRead *.mason,*.mhtml,*.comp^Isetf mason
line 1166: 
line 1167: " Matlab or Objective C
line 1168: au BufNewFile,BufRead *.m^I^I^Icall s:FTm()
line 1169: 
line 1170: func! s:FTm()
line 1194: 
line 1195: " Mathematica notebook
line 1196: au BufNewFile,BufRead *.nb^I^I^Isetf mma
line 1197: 
line 1198: " Maya Extension Language
line 1199: au BufNewFile,BufRead *.mel^I^I^Isetf mel
line 1200: 
line 1201: " Mercurial (hg) commit file
line 1202: au BufNewFile,BufRead hg-editor-*.txt^I^Isetf hgcommit
line 1203: 
line 1204: " Mercurial config (looks like generic config file)
line 1205: au BufNewFile,BufRead *.hgrc,*hgrc^I^Isetf cfg
line 1206: 
line 1207: " Messages (logs mostly)
line 1208: au BufNewFile,BufRead */log/{auth,cron,daemon,debug,kern,lpr,mail,messages,news/news,syslog,user}{,.log,.err,.info,.warn,.crit,.notice}{,.[0-9]*,-[0-9]*} setf messages
line 1209: 
line 1210: " Metafont
line 1211: au BufNewFile,BufRead *.mf^I^I^Isetf mf
line 1212: 
line 1213: " MetaPost
line 1214: au BufNewFile,BufRead *.mp^I^I^Isetf mp
line 1215: 
line 1216: " MGL
line 1217: au BufNewFile,BufRead *.mgl^I^I^Isetf mgl
line 1218: 
line 1219: " MIX - Knuth assembly
line 1220: au BufNewFile,BufRead *.mix,*.mixal^I^Isetf mix
line 1221: 
line 1222: " MMIX or VMS makefile
line 1223: au BufNewFile,BufRead *.mms^I^I^Icall s:FTmms()
line 1224: 
line 1225: " Symbian meta-makefile definition (MMP)
line 1226: au BufNewFile,BufRead *.mmp^I^I^Isetf mmp
line 1227: 
line 1228: func! s:FTmms()
line 1244: 
line 1245: 
line 1246: " Modsim III (or LambdaProlog)
line 1252: au BufNewFile,BufRead *.mod if getline(1) =~ '\<module\>' |   setf lprolog | else |   setf modsim3 | endif
line 1253: 
line 1254: " Modula 2  (.md removed in favor of Markdown)
line 1255: au BufNewFile,BufRead *.m2,*.DEF,*.MOD,*.mi^Isetf modula2
line 1256: 
line 1257: " Modula 3 (.m3, .i3, .mg, .ig)
line 1258: au BufNewFile,BufRead *.[mi][3g]^I^Isetf modula3
line 1259: 
line 1260: " Monk
line 1261: au BufNewFile,BufRead *.isc,*.monk,*.ssc,*.tsc^Isetf monk
line 1262: 
line 1263: " MOO
line 1264: au BufNewFile,BufRead *.moo^I^I^Isetf moo
line 1265: 
line 1266: " Modconf
line 1267: au BufNewFile,BufRead */etc/modules.conf,*/etc/modules,*/etc/conf.modules setf modconf
line 1268: 
line 1269: " Mplayer config
line 1270: au BufNewFile,BufRead mplayer.conf,*/.mplayer/config^Isetf mplayerconf
line 1271: 
line 1272: " Motorola S record
line 1273: au BufNewFile,BufRead *.s19,*.s28,*.s37,*.mot,*.srec^Isetf srec
line 1274: 
line 1275: " Mrxvtrc
line 1276: au BufNewFile,BufRead mrxvtrc,.mrxvtrc^I^Isetf mrxvtrc
line 1277: 
line 1278: " Msql
line 1279: au BufNewFile,BufRead *.msql^I^I^Isetf msql
line 1280: 
line 1281: " Mysql
line 1282: au BufNewFile,BufRead *.mysql^I^I^Isetf mysql
line 1283: 
line 1284: " Mutt setup files (must be before catch *.rc)
line 1285: au BufNewFile,BufRead */etc/Muttrc.d/*^I^Icall s:StarSetf('muttrc')
line 1286: 
line 1287: " M$ Resource files
line 1288: au BufNewFile,BufRead *.rc,*.rch^I^Isetf rc
line 1289: 
line 1290: " MuPAD source
line 1291: au BufRead,BufNewFile *.mu^I^I^Isetf mupad
line 1292: 
line 1293: " Mush
line 1294: au BufNewFile,BufRead *.mush^I^I^Isetf mush
line 1295: 
line 1296: " Mutt setup file (also for Muttng)
line 1297: au BufNewFile,BufRead Mutt{ng,}rc^I^Isetf muttrc
line 1298: 
line 1299: " Nano
line 1300: au BufNewFile,BufRead */etc/nanorc,*.nanorc  ^Isetf nanorc
line 1301: 
line 1302: " Nastran input/DMAP
line 1303: "au BufNewFile,BufRead *.dat^I^I^Isetf nastran
line 1304: 
line 1305: " Natural
line 1306: au BufNewFile,BufRead *.NS[ACGLMNPS]^I^Isetf natural
line 1307: 
line 1308: " Netrc
line 1309: au BufNewFile,BufRead .netrc^I^I^Isetf netrc
line 1310: 
line 1311: " Ninja file
line 1312: au BufNewFile,BufRead *.ninja^I^I^Isetf ninja
line 1313: 
line 1314: " Novell netware batch files
line 1315: au BufNewFile,BufRead *.ncf^I^I^Isetf ncf
line 1316: 
line 1317: " Nroff/Troff (*.ms and *.t are checked below)
line 1321: au BufNewFile,BufRead *.me if expand("<afile>") != "read.me" && expand("<afile>") != "click.me" |   setf nroff | endif
line 1322: au BufNewFile,BufRead *.tr,*.nr,*.roff,*.tmac,*.mom^Isetf nroff
line 1323: au BufNewFile,BufRead *.[1-9]^I^I^Icall s:FTnroff()
line 1324: 
line 1325: " This function checks if one of the first five lines start with a dot.  In
line 1326: " that case it is probably an nroff file: 'filetype' is set and 1 is returned.
line 1327: func! s:FTnroff()
line 1334: 
line 1335: " Nroff or Objective C++
line 1336: au BufNewFile,BufRead *.mm^I^I^Icall s:FTmm()
line 1337: 
line 1338: func! s:FTmm()
line 1350: 
line 1351: " Not Quite C
line 1352: au BufNewFile,BufRead *.nqc^I^I^Isetf nqc
line 1353: 
line 1354: " NSIS
line 1355: au BufNewFile,BufRead *.nsi,*.nsh^I^Isetf nsis
line 1356: 
line 1357: " OCAML
line 1358: au BufNewFile,BufRead *.ml,*.mli,*.mll,*.mly,.ocamlinit^Isetf ocaml
line 1359: 
line 1360: " Occam
line 1361: au BufNewFile,BufRead *.occ^I^I^Isetf occam
line 1362: 
line 1363: " Omnimark
line 1364: au BufNewFile,BufRead *.xom,*.xin^I^Isetf omnimark
line 1365: 
line 1366: " OpenROAD
line 1367: au BufNewFile,BufRead *.or^I^I^Isetf openroad
line 1368: 
line 1369: " OPL
line 1370: au BufNewFile,BufRead *.[Oo][Pp][Ll]^I^Isetf opl
line 1371: 
line 1372: " Oracle config file
line 1373: au BufNewFile,BufRead *.ora^I^I^Isetf ora
line 1374: 
line 1375: " Packet filter conf
line 1376: au BufNewFile,BufRead pf.conf^I^I^Isetf pf
line 1377: 
line 1378: " Pam conf
line 1379: au BufNewFile,BufRead */etc/pam.conf^I^Isetf pamconf
line 1380: 
line 1381: " PApp
line 1382: au BufNewFile,BufRead *.papp,*.pxml,*.pxsl^Isetf papp
line 1383: 
line 1384: " Password file
line 1385: au BufNewFile,BufRead */etc/passwd,*/etc/passwd-,*/etc/passwd.edit,*/etc/shadow,*/etc/shadow-,*/etc/shadow.edit,*/var/backups/passwd.bak,*/var/backups/shadow.bak setf passwd
line 1386: 
line 1387: " Pascal (also *.p)
line 1388: au BufNewFile,BufRead *.pas^I^I^Isetf pascal
line 1389: 
line 1390: " Delphi project file
line 1391: au BufNewFile,BufRead *.dpr^I^I^Isetf pascal
line 1392: 
line 1393: " PDF
line 1394: au BufNewFile,BufRead *.pdf^I^I^Isetf pdf
line 1395: 
line 1396: " Perl
line 1397: if has("fname_case")
line 1398:   au BufNewFile,BufRead *.pl,*.PL^I^Icall s:FTpl()
line 1399: else
line 1400:   au BufNewFile,BufRead *.pl^I^I^Icall s:FTpl()
line 1401: endif
line 1402: au BufNewFile,BufRead *.plx,*.al^I^Isetf perl
line 1403: au BufNewFile,BufRead *.p6,*.pm6,*.pl6^I^Isetf perl6
line 1404: 
line 1405: func! s:FTpl()
line 1419: 
line 1420: " Perl, XPM or XPM2
line 1428: au BufNewFile,BufRead *.pm if getline(1) =~ "XPM2" |   setf xpm2 | elseif getline(1) =~ "XPM" |   setf xpm | else |   setf perl | endif
line 1429: 
line 1430: " Perl POD
line 1431: au BufNewFile,BufRead *.pod^I^I^Isetf pod
line 1432: au BufNewFile,BufRead *.pod6^I^I^Isetf pod6
line 1433: 
line 1434: " Php, php3, php4, etc.
line 1435: " Also Phtml (was used for PHP 2 in the past)
line 1436: " Also .ctp for Cake template file
line 1437: au BufNewFile,BufRead *.php,*.php\d,*.phtml,*.ctp^Isetf php
line 1438: 
line 1439: " Pike
line 1440: au BufNewFile,BufRead *.pike,*.lpc,*.ulpc,*.pmod setf pike
line 1441: 
line 1442: " Pinfo config
line 1443: au BufNewFile,BufRead */etc/pinforc,*/.pinforc^Isetf pinfo
line 1444: 
line 1445: " Palm Resource compiler
line 1446: au BufNewFile,BufRead *.rcp^I^I^Isetf pilrc
line 1447: 
line 1448: " Pine config
line 1449: au BufNewFile,BufRead .pinerc,pinerc,.pinercex,pinercex^I^Isetf pine
line 1450: 
line 1451: " PL/1, PL/I
line 1452: au BufNewFile,BufRead *.pli,*.pl1^I^Isetf pli
line 1453: 
line 1454: " PL/M (also: *.inp)
line 1455: au BufNewFile,BufRead *.plm,*.p36,*.pac^I^Isetf plm
line 1456: 
line 1457: " PL/SQL
line 1458: au BufNewFile,BufRead *.pls,*.plsql^I^Isetf plsql
line 1459: 
line 1460: " PLP
line 1461: au BufNewFile,BufRead *.plp^I^I^Isetf plp
line 1462: 
line 1463: " PO and PO template (GNU gettext)
line 1464: au BufNewFile,BufRead *.po,*.pot^I^Isetf po
line 1465: 
line 1466: " Postfix main config
line 1467: au BufNewFile,BufRead main.cf^I^I^Isetf pfmain
line 1468: 
line 1469: " PostScript (+ font files, encapsulated PostScript, Adobe Illustrator)
line 1470: au BufNewFile,BufRead *.ps,*.pfa,*.afm,*.eps,*.epsf,*.epsi,*.ai^I  setf postscr
line 1471: 
line 1472: " PostScript Printer Description
line 1473: au BufNewFile,BufRead *.ppd^I^I^Isetf ppd
line 1474: 
line 1475: " Povray
line 1476: au BufNewFile,BufRead *.pov^I^I^Isetf pov
line 1477: 
line 1478: " Povray configuration
line 1479: au BufNewFile,BufRead .povrayrc^I^I^Isetf povini
line 1480: 
line 1481: " Povray, PHP or assembly
line 1482: au BufNewFile,BufRead *.inc^I^I^Icall s:FTinc()
line 1483: 
line 1484: func! s:FTinc()
line 1505: 
line 1506: " Printcap and Termcap
line 1508: au BufNewFile,BufRead *printcap let b:ptcap_type = "print" | setf ptcap
line 1510: au BufNewFile,BufRead *termcap let b:ptcap_type = "term" | setf ptcap
line 1511: 
line 1512: " PCCTS / ANTRL
line 1513: "au BufNewFile,BufRead *.g^I^I^Isetf antrl
line 1514: au BufNewFile,BufRead *.g^I^I^Isetf pccts
line 1515: 
line 1516: " PPWizard
line 1517: au BufNewFile,BufRead *.it,*.ih^I^I^Isetf ppwiz
line 1518: 
line 1519: " Obj 3D file format
line 1520: " TODO: is there a way to avoid MS-Windows Object files?
line 1521: au BufNewFile,BufRead *.obj^I^I^Isetf obj
line 1522: 
line 1523: " Oracle Pro*C/C++
line 1524: au BufNewFile,BufRead *.pc^I^I^Isetf proc
line 1525: 
line 1526: " Privoxy actions file
line 1527: au BufNewFile,BufRead *.action^I^I^Isetf privoxy
line 1528: 
line 1529: " Procmail
line 1530: au BufNewFile,BufRead .procmail,.procmailrc^Isetf procmail
line 1531: 
line 1532: " Progress or CWEB
line 1533: au BufNewFile,BufRead *.w^I^I^Icall s:FTprogress_cweb()
line 1534: 
line 1535: func! s:FTprogress_cweb()
line 1546: 
line 1547: " Progress or assembly
line 1548: au BufNewFile,BufRead *.i^I^I^Icall s:FTprogress_asm()
line 1549: 
line 1550: func! s:FTprogress_asm()
line 1572: 
line 1573: " Progress or Pascal
line 1574: au BufNewFile,BufRead *.p^I^I^Icall s:FTprogress_pascal()
line 1575: 
line 1576: func! s:FTprogress_pascal()
line 1600: 
line 1601: 
line 1602: " Software Distributor Product Specification File (POSIX 1387.2-1995)
line 1603: au BufNewFile,BufRead *.psf^I^I^Isetf psf
line 1607: au BufNewFile,BufRead INDEX,INFO if getline(1) =~ '^\s*\(distribution\|installed_software\|root\|bundle\|product\)\s*$' |   setf psf | endif
line 1608: 
line 1609: " Prolog
line 1610: au BufNewFile,BufRead *.pdb^I^I^Isetf prolog
line 1611: 
line 1612: " Promela
line 1613: au BufNewFile,BufRead *.pml^I^I^Isetf promela
line 1614: 
line 1615: " Google protocol buffers
line 1616: au BufNewFile,BufRead *.proto^I^I^Isetf proto
line 1617: 
line 1618: " Protocols
line 1619: au BufNewFile,BufRead */etc/protocols^I^Isetf protocols
line 1620: 
line 1621: " Pyrex
line 1622: au BufNewFile,BufRead *.pyx,*.pxd^I^Isetf pyrex
line 1623: 
line 1624: " Python
line 1625: au BufNewFile,BufRead *.py,*.pyw^I^Isetf python
line 1626: 
line 1627: " Quixote (Python-based web framework)
line 1628: au BufNewFile,BufRead *.ptl^I^I^Isetf python
line 1629: 
line 1630: " Radiance
line 1631: au BufNewFile,BufRead *.rad,*.mat^I^Isetf radiance
line 1632: 
line 1633: " Ratpoison config/command files
line 1634: au BufNewFile,BufRead .ratpoisonrc,ratpoisonrc^Isetf ratpoison
line 1635: 
line 1636: " RCS file
line 1637: au BufNewFile,BufRead *\,v^I^I^Isetf rcs
line 1638: 
line 1639: " Readline
line 1640: au BufNewFile,BufRead .inputrc,inputrc^I^Isetf readline
line 1641: 
line 1642: " Registry for MS-Windows
line 1644: au BufNewFile,BufRead *.reg if getline(1) =~? '^REGEDIT[0-9]*\s*$\|^Windows Registry Editor Version \d*\.\d*\s*$' | setf registry | endif
line 1645: 
line 1646: " Renderman Interface Bytestream
line 1647: au BufNewFile,BufRead *.rib^I^I^Isetf rib
line 1648: 
line 1649: " Rexx
line 1650: au BufNewFile,BufRead *.rex,*.orx,*.rxo,*.rxj,*.jrexx,*.rexxj,*.rexx,*.testGroup,*.testUnit^Isetf rexx
line 1651: 
line 1652: " R (Splus)
line 1653: if has("fname_case")
line 1654:   au BufNewFile,BufRead *.s,*.S^I^I^Isetf r
line 1655: else
line 1656:   au BufNewFile,BufRead *.s^I^I^Isetf r
line 1657: endif
line 1658: 
line 1659: " R Help file
line 1660: if has("fname_case")
line 1661:   au BufNewFile,BufRead *.rd,*.Rd^I^Isetf rhelp
line 1662: else
line 1663:   au BufNewFile,BufRead *.rd^I^I^Isetf rhelp
line 1664: endif
line 1665: 
line 1666: " R noweb file
line 1667: if has("fname_case")
line 1668:   au BufNewFile,BufRead *.Rnw,*.rnw,*.Snw,*.snw^I^Isetf rnoweb
line 1669: else
line 1670:   au BufNewFile,BufRead *.rnw,*.snw^I^I^Isetf rnoweb
line 1671: endif
line 1672: 
line 1673: " R Markdown file
line 1674: if has("fname_case")
line 1675:   au BufNewFile,BufRead *.Rmd,*.rmd,*.Smd,*.smd^I^Isetf rmd
line 1676: else
line 1677:   au BufNewFile,BufRead *.rmd,*.smd^I^I^Isetf rmd
line 1678: endif
line 1679: 
line 1680: " R reStructuredText file
line 1681: if has("fname_case")
line 1682:   au BufNewFile,BufRead *.Rrst,*.rrst,*.Srst,*.srst^Isetf rrst
line 1683: else
line 1684:   au BufNewFile,BufRead *.rrst,*.srst^I^I^Isetf rrst
line 1685: endif
line 1686: 
line 1687: " Rexx, Rebol or R
line 1688: au BufNewFile,BufRead *.r,*.R^I^I^Icall s:FTr()
line 1689: 
line 1690: func! s:FTr()
line 1722: 
line 1723: " Remind
line 1724: au BufNewFile,BufRead .reminders,*.remind,*.rem^I^Isetf remind
line 1725: 
line 1726: " Resolv.conf
line 1727: au BufNewFile,BufRead resolv.conf^I^Isetf resolv
line 1728: 
line 1729: " Relax NG Compact
line 1730: au BufNewFile,BufRead *.rnc^I^I^Isetf rnc
line 1731: 
line 1732: " Relax NG XML
line 1733: au BufNewFile,BufRead *.rng^I^I^Isetf rng
line 1734: 
line 1735: " RPL/2
line 1736: au BufNewFile,BufRead *.rpl^I^I^Isetf rpl
line 1737: 
line 1738: " Robots.txt
line 1739: au BufNewFile,BufRead robots.txt^I^Isetf robots
line 1740: 
line 1741: " Rpcgen
line 1742: au BufNewFile,BufRead *.x^I^I^Isetf rpcgen
line 1743: 
line 1744: " reStructuredText Documentation Format
line 1745: au BufNewFile,BufRead *.rst^I^I^Isetf rst
line 1746: 
line 1747: " RTF
line 1748: au BufNewFile,BufRead *.rtf^I^I^Isetf rtf
line 1749: 
line 1750: " Interactive Ruby shell
line 1751: au BufNewFile,BufRead .irbrc,irbrc^I^Isetf ruby
line 1752: 
line 1753: " Ruby
line 1754: au BufNewFile,BufRead *.rb,*.rbw^I^Isetf ruby
line 1755: 
line 1756: " RubyGems
line 1757: au BufNewFile,BufRead *.gemspec^I^I^Isetf ruby
line 1758: 
line 1759: " Rackup
line 1760: au BufNewFile,BufRead *.ru^I^I^Isetf ruby
line 1761: 
line 1762: " Bundler
line 1763: au BufNewFile,BufRead Gemfile^I^I^Isetf ruby
line 1764: 
line 1765: " Ruby on Rails
line 1766: au BufNewFile,BufRead *.builder,*.rxml,*.rjs^Isetf ruby
line 1767: 
line 1768: " Rantfile and Rakefile is like Ruby
line 1769: au BufNewFile,BufRead [rR]antfile,*.rant,[rR]akefile,*.rake^Isetf ruby
line 1770: 
line 1771: " S-lang (or shader language, or SmallLisp)
line 1772: au BufNewFile,BufRead *.sl^I^I^Isetf slang
line 1773: 
line 1774: " Samba config
line 1775: au BufNewFile,BufRead smb.conf^I^I^Isetf samba
line 1776: 
line 1777: " SAS script
line 1778: au BufNewFile,BufRead *.sas^I^I^Isetf sas
line 1779: 
line 1780: " Sass
line 1781: au BufNewFile,BufRead *.sass^I^I^Isetf sass
line 1782: 
line 1783: " Sather
line 1784: au BufNewFile,BufRead *.sa^I^I^Isetf sather
line 1785: 
line 1786: " Scilab
line 1787: au BufNewFile,BufRead *.sci,*.sce^I^Isetf scilab
line 1788: 
line 1789: " SCSS
line 1790: au BufNewFile,BufRead *.scss^I^I^Isetf scss
line 1791: 
line 1792: " SD: Streaming Descriptors
line 1793: au BufNewFile,BufRead *.sd^I^I^Isetf sd
line 1794: 
line 1795: " SDL
line 1796: au BufNewFile,BufRead *.sdl,*.pr^I^Isetf sdl
line 1797: 
line 1798: " sed
line 1799: au BufNewFile,BufRead *.sed^I^I^Isetf sed
line 1800: 
line 1801: " Sieve (RFC 3028)
line 1802: au BufNewFile,BufRead *.siv^I^I^Isetf sieve
line 1803: 
line 1804: " Sendmail
line 1805: au BufNewFile,BufRead sendmail.cf^I^Isetf sm
line 1806: 
line 1807: " Sendmail .mc files are actually m4.  Could also be MS Message text file.
line 1808: au BufNewFile,BufRead *.mc^I^I^Icall s:McSetf()
line 1809: 
line 1810: func! s:McSetf()
line 1825: 
line 1826: " Services
line 1827: au BufNewFile,BufRead */etc/services^I^Isetf services
line 1828: 
line 1829: " Service Location config
line 1830: au BufNewFile,BufRead */etc/slp.conf^I^Isetf slpconf
line 1831: 
line 1832: " Service Location registration
line 1833: au BufNewFile,BufRead */etc/slp.reg^I^Isetf slpreg
line 1834: 
line 1835: " Service Location SPI
line 1836: au BufNewFile,BufRead */etc/slp.spi^I^Isetf slpspi
line 1837: 
line 1838: " Setserial config
line 1839: au BufNewFile,BufRead */etc/serial.conf^I^Isetf setserial
line 1840: 
line 1841: " SGML
line 1851: au BufNewFile,BufRead *.sgm,*.sgml if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'linuxdoc' |   setf sgmllnx | elseif getline(1) =~ '<!DOCTYPE.*DocBook' || getline(2) =~ '<!DOCTYPE.*DocBook' |   let b:docbk_type = "sgml" |   let b:docbk_ver = 4 |   setf docbk | else |   setf sgml | endif
line 1852: 
line 1853: " SGMLDECL
line 1857: au BufNewFile,BufRead *.decl,*.dcl,*.dec if getline(1).getline(2).getline(3) =~? '^<!SGML' |    setf sgmldecl | endif
line 1858: 
line 1859: " SGML catalog file
line 1860: au BufNewFile,BufRead catalog^I^I^Isetf catalog
line 1861: au BufNewFile,BufRead sgml.catalog*^I^Icall s:StarSetf('catalog')
line 1862: 
line 1863: " Shell scripts (sh, ksh, bash, bash2, csh); Allow .profile_foo etc.
line 1864: " Gentoo ebuilds are actually bash scripts
line 1865: au BufNewFile,BufRead .bashrc*,bashrc,bash.bashrc,.bash[_-]profile*,.bash[_-]logout*,.bash[_-]aliases*,*.bash,*/{,.}bash[_-]completion{,.d,.sh}{,/*},*.ebuild,*.eclass call SetFileTypeSH("bash")
line 1866: au BufNewFile,BufRead .kshrc*,*.ksh call SetFileTypeSH("ksh")
line 1867: au BufNewFile,BufRead */etc/profile,.profile*,*.sh,*.env call SetFileTypeSH(getline(1))
line 1868: 
line 1869: " Also called from scripts.vim.
line 1870: func! SetFileTypeSH(name)
line 1913: 
line 1914: " For shell-like file types, check for an "exec" command hidden in a comment,
line 1915: " as used for Tcl.
line 1916: " Also called from scripts.vim, thus can't be local to this script.
line 1917: func! SetFileTypeShell(name)
line 1936: 
line 1937: " tcsh scripts
line 1938: au BufNewFile,BufRead .tcshrc*,*.tcsh,tcsh.tcshrc,tcsh.login^Icall SetFileTypeShell("tcsh")
line 1939: 
line 1940: " csh scripts, but might also be tcsh scripts (on some systems csh is tcsh)
line 1941: au BufNewFile,BufRead .login*,.cshrc*,csh.cshrc,csh.login,csh.logout,*.csh,.alias  call s:CSH()
line 1942: 
line 1943: func! s:CSH()
line 1952: 
line 1953: " Z-Shell script
line 1954: au BufNewFile,BufRead .zprofile,*/etc/zprofile,.zfbfmarks  setf zsh
line 1955: au BufNewFile,BufRead .zsh*,.zlog*,.zcompdump*  call s:StarSetf('zsh')
line 1956: au BufNewFile,BufRead *.zsh^I^I^Isetf zsh
line 1957: 
line 1958: " Scheme
line 1959: au BufNewFile,BufRead *.scm,*.ss,*.rkt^I^Isetf scheme
line 1960: 
line 1961: " Screen RC
line 1962: au BufNewFile,BufRead .screenrc,screenrc^Isetf screen
line 1963: 
line 1964: " Simula
line 1965: au BufNewFile,BufRead *.sim^I^I^Isetf simula
line 1966: 
line 1967: " SINDA
line 1968: au BufNewFile,BufRead *.sin,*.s85^I^Isetf sinda
line 1969: 
line 1970: " SiSU
line 1971: au BufNewFile,BufRead *.sst,*.ssm,*.ssi,*.-sst,*._sst setf sisu
line 1972: au BufNewFile,BufRead *.sst.meta,*.-sst.meta,*._sst.meta setf sisu
line 1973: 
line 1974: " SKILL
line 1975: au BufNewFile,BufRead *.il,*.ils,*.cdf^I^Isetf skill
line 1976: 
line 1977: " SLRN
line 1978: au BufNewFile,BufRead .slrnrc^I^I^Isetf slrnrc
line 1979: au BufNewFile,BufRead *.score^I^I^Isetf slrnsc
line 1980: 
line 1981: " Smalltalk (and TeX)
line 1982: au BufNewFile,BufRead *.st^I^I^Isetf st
line 1990: au BufNewFile,BufRead *.cls if getline(1) =~ '^%' |  setf tex | elseif getline(1)[0] == '#' && getline(1) =~ 'rexx' |  setf rexx | else |  setf st | endif
line 1991: 
line 1992: " Smarty templates
line 1993: au BufNewFile,BufRead *.tpl^I^I^Isetf smarty
line 1994: 
line 1995: " SMIL or XML
line 2001: au BufNewFile,BufRead *.smil if getline(1) =~ '<?\s*xml.*?>' |   setf xml | else |   setf smil | endif
line 2002: 
line 2003: " SMIL or SNMP MIB file
line 2009: au BufNewFile,BufRead *.smi if getline(1) =~ '\<smil\>' |   setf smil | else |   setf mib | endif
line 2010: 
line 2011: " SMITH
line 2012: au BufNewFile,BufRead *.smt,*.smith^I^Isetf smith
line 2013: 
line 2014: " Snobol4 and spitbol
line 2015: au BufNewFile,BufRead *.sno,*.spt^I^Isetf snobol4
line 2016: 
line 2017: " SNMP MIB files
line 2018: au BufNewFile,BufRead *.mib,*.my^I^Isetf mib
line 2019: 
line 2020: " Snort Configuration
line 2021: au BufNewFile,BufRead *.hog,snort.conf,vision.conf^Isetf hog
line 2022: au BufNewFile,BufRead *.rules^I^I^Icall s:FTRules()
line 2023: 
line 2024: let s:ft_rules_udev_rules_pattern = '^\s*\cudev_rules\s*=\s*"\([^"]\{-1,}\)/*".*'
line 2025: func! s:FTRules()
line 2057: 
line 2058: 
line 2059: " Spec (Linux RPM)
line 2060: au BufNewFile,BufRead *.spec^I^I^Isetf spec
line 2061: 
line 2062: " Speedup (AspenTech plant simulator)
line 2063: au BufNewFile,BufRead *.speedup,*.spdata,*.spd^Isetf spup
line 2064: 
line 2065: " Slice
line 2066: au BufNewFile,BufRead *.ice^I^I^Isetf slice
line 2067: 
line 2068: " Spice
line 2069: au BufNewFile,BufRead *.sp,*.spice^I^Isetf spice
line 2070: 
line 2071: " Spyce
line 2072: au BufNewFile,BufRead *.spy,*.spi^I^Isetf spyce
line 2073: 
line 2074: " Squid
line 2075: au BufNewFile,BufRead squid.conf^I^Isetf squid
line 2076: 
line 2077: " SQL for Oracle Designer
line 2078: au BufNewFile,BufRead *.tyb,*.typ,*.tyc,*.pkb,*.pks^Isetf sql
line 2079: 
line 2080: " SQL
line 2081: au BufNewFile,BufRead *.sql^I^I^Icall s:SQL()
line 2082: 
line 2083: func! s:SQL()
line 2090: 
line 2091: " SQLJ
line 2092: au BufNewFile,BufRead *.sqlj^I^I^Isetf sqlj
line 2093: 
line 2094: " SQR
line 2095: au BufNewFile,BufRead *.sqr,*.sqi^I^Isetf sqr
line 2096: 
line 2097: " OpenSSH configuration
line 2098: au BufNewFile,BufRead ssh_config,*/.ssh/config^Isetf sshconfig
line 2099: 
line 2100: " OpenSSH server configuration
line 2101: au BufNewFile,BufRead sshd_config^I^Isetf sshdconfig
line 2102: 
line 2103: " Stata
line 2104: au BufNewFile,BufRead *.ado,*.class,*.do,*.imata,*.mata   setf stata
line 2105: 
line 2106: " SMCL
line 2107: au BufNewFile,BufRead *.hlp,*.ihlp,*.smcl^Isetf smcl
line 2108: 
line 2109: " Stored Procedures
line 2110: au BufNewFile,BufRead *.stp^I^I^Isetf stp
line 2111: 
line 2112: " Standard ML
line 2113: au BufNewFile,BufRead *.sml^I^I^Isetf sml
line 2114: 
line 2115: " Sratus VOS command macro
line 2116: au BufNewFile,BufRead *.cm^I^I^Isetf voscm
line 2117: 
line 2118: " Sysctl
line 2119: au BufNewFile,BufRead */etc/sysctl.conf,*/etc/sysctl.d/*.conf^Isetf sysctl
line 2120: 
line 2121: " Systemd unit files
line 2122: au BufNewFile,BufRead */systemd/*.{automount,mount,path,service,socket,swap,target,timer}^Isetf systemd
line 2123: 
line 2124: " Synopsys Design Constraints
line 2125: au BufNewFile,BufRead *.sdc^I^I^Isetf sdc
line 2126: 
line 2127: " Sudoers
line 2128: au BufNewFile,BufRead */etc/sudoers,sudoers.tmp^Isetf sudoers
line 2129: 
line 2130: " SVG (Scalable Vector Graphics)
line 2131: au BufNewFile,BufRead *.svg^I^I^Isetf svg
line 2132: 
line 2133: " If the file has an extension of 't' and is in a directory 't' or 'xt' then
line 2134: " it is almost certainly a Perl test file.
line 2135: " If the first line starts with '#' and contains 'perl' it's probably a Perl
line 2136: " file.
line 2137: " (Slow test) If a file contains a 'use' statement then it is almost certainly
line 2138: " a Perl file.
line 2139: func! s:FTperl()
line 2155: 
line 2156: " Tads (or Nroff or Perl test file)
line 2158: au BufNewFile,BufRead *.t if !s:FTnroff() && !s:FTperl() | setf tads | endif
line 2159: 
line 2160: " Tags
line 2161: au BufNewFile,BufRead tags^I^I^Isetf tags
line 2162: 
line 2163: " TAK
line 2164: au BufNewFile,BufRead *.tak^I^I^Isetf tak
line 2165: 
line 2166: " Task
line 2167: au BufRead,BufNewFile {pending,completed,undo}.data  setf taskdata
line 2168: au BufRead,BufNewFile *.task^I^I^Isetf taskedit
line 2169: 
line 2170: " Tcl (JACL too)
line 2171: au BufNewFile,BufRead *.tcl,*.tk,*.itcl,*.itk,*.jacl^Isetf tcl
line 2172: 
line 2173: " TealInfo
line 2174: au BufNewFile,BufRead *.tli^I^I^Isetf tli
line 2175: 
line 2176: " Telix Salt
line 2177: au BufNewFile,BufRead *.slt^I^I^Isetf tsalt
line 2178: 
line 2179: " Tera Term Language
line 2180: au BufRead,BufNewFile *.ttl^I^I^Isetf teraterm
line 2181: 
line 2182: " Terminfo
line 2183: au BufNewFile,BufRead *.ti^I^I^Isetf terminfo
line 2184: 
line 2185: " TeX
line 2186: au BufNewFile,BufRead *.latex,*.sty,*.dtx,*.ltx,*.bbl^Isetf tex
line 2187: au BufNewFile,BufRead *.tex^I^I^Icall s:FTtex()
line 2188: 
line 2189: " Choose context, plaintex, or tex (LaTeX) based on these rules:
line 2190: " 1. Check the first line of the file for "%&<format>".
line 2191: " 2. Check the first 1000 non-comment lines for LaTeX or ConTeXt keywords.
line 2192: " 3. Default to "latex" or to g:tex_flavor, can be set in user's vimrc.
line 2193: func! s:FTtex()
line 2240: 
line 2241: " ConTeXt
line 2242: au BufNewFile,BufRead tex/context/*/*.tex,*.mkii,*.mkiv   setf context
line 2243: 
line 2244: " Texinfo
line 2245: au BufNewFile,BufRead *.texinfo,*.texi,*.txi^Isetf texinfo
line 2246: 
line 2247: " TeX configuration
line 2248: au BufNewFile,BufRead texmf.cnf^I^I^Isetf texmf
line 2249: 
line 2250: " Tidy config
line 2251: au BufNewFile,BufRead .tidyrc,tidyrc^I^Isetf tidy
line 2252: 
line 2253: " TF mud client
line 2254: au BufNewFile,BufRead *.tf,.tfrc,tfrc^I^Isetf tf
line 2255: 
line 2256: " TPP - Text Presentation Program
line 2257: au BufNewFile,BufReadPost *.tpp^I^I^Isetf tpp
line 2258: 
line 2259: " Treetop
line 2260: au BufRead,BufNewFile *.treetop^I^I^Isetf treetop
line 2261: 
line 2262: " Trustees
line 2263: au BufNewFile,BufRead trustees.conf^I^Isetf trustees
line 2264: 
line 2265: " TSS - Geometry
line 2266: au BufNewFile,BufReadPost *.tssgm^I^Isetf tssgm
line 2267: 
line 2268: " TSS - Optics
line 2269: au BufNewFile,BufReadPost *.tssop^I^Isetf tssop
line 2270: 
line 2271: " TSS - Command Line (temporary)
line 2272: au BufNewFile,BufReadPost *.tsscl^I^Isetf tsscl
line 2273: 
line 2274: " TWIG files
line 2275: au BufNewFile,BufReadPost *.twig^I^Isetf twig
line 2276: 
line 2277: " Motif UIT/UIL files
line 2278: au BufNewFile,BufRead *.uit,*.uil^I^Isetf uil
line 2279: 
line 2280: " Udev conf
line 2281: au BufNewFile,BufRead */etc/udev/udev.conf^Isetf udevconf
line 2282: 
line 2283: " Udev permissions
line 2284: au BufNewFile,BufRead */etc/udev/permissions.d/*.permissions setf udevperm
line 2285: "
line 2286: " Udev symlinks config
line 2287: au BufNewFile,BufRead */etc/udev/cdsymlinks.conf^Isetf sh
line 2288: 
line 2289: " UnrealScript
line 2290: au BufNewFile,BufRead *.uc^I^I^Isetf uc
line 2291: 
line 2292: " Updatedb
line 2293: au BufNewFile,BufRead */etc/updatedb.conf^Isetf updatedb
line 2294: 
line 2295: " Upstart (init(8)) config files
line 2296: au BufNewFile,BufRead */usr/share/upstart/*.conf^I       setf upstart
line 2297: au BufNewFile,BufRead */usr/share/upstart/*.override^I       setf upstart
line 2298: au BufNewFile,BufRead */etc/init/*.conf,*/etc/init/*.override  setf upstart
line 2299: au BufNewFile,BufRead */.init/*.conf,*/.init/*.override        setf upstart
line 2300: au BufNewFile,BufRead */.config/upstart/*.conf^I^I       setf upstart
line 2301: au BufNewFile,BufRead */.config/upstart/*.override^I       setf upstart
line 2302: 
line 2303: " Vera
line 2304: au BufNewFile,BufRead *.vr,*.vri,*.vrh^I^Isetf vera
line 2305: 
line 2306: " Verilog HDL
line 2307: au BufNewFile,BufRead *.v^I^I^Isetf verilog
line 2308: 
line 2309: " Verilog-AMS HDL
line 2310: au BufNewFile,BufRead *.va,*.vams^I^Isetf verilogams
line 2311: 
line 2312: " SystemVerilog
line 2313: au BufNewFile,BufRead *.sv,*.svh^I^Isetf systemverilog
line 2314: 
line 2315: " VHDL
line 2316: au BufNewFile,BufRead *.hdl,*.vhd,*.vhdl,*.vbe,*.vst  setf vhdl
line 2317: au BufNewFile,BufRead *.vhdl_[0-9]*^I^Icall s:StarSetf('vhdl')
line 2318: 
line 2319: " Vim script
line 2320: au BufNewFile,BufRead *.vim,*.vba,.exrc,_exrc^Isetf vim
line 2321: 
line 2322: " Viminfo file
line 2323: au BufNewFile,BufRead .viminfo,_viminfo^I^Isetf viminfo
line 2324: 
line 2325: " Virata Config Script File or Drupal module
line 2331: au BufRead,BufNewFile *.hw,*.module,*.pkg if getline(1) =~ '<?php' |   setf php | else |   setf virata | endif
line 2332: 
line 2333: " Visual Basic (also uses *.bas) or FORM
line 2334: au BufNewFile,BufRead *.frm^I^I^Icall s:FTVB("form")
line 2335: 
line 2336: " SaxBasic is close to Visual Basic
line 2337: au BufNewFile,BufRead *.sba^I^I^Isetf vb
line 2338: 
line 2339: " Vgrindefs file
line 2340: au BufNewFile,BufRead vgrindefs^I^I^Isetf vgrindefs
line 2341: 
line 2342: " VRML V1.0c
line 2343: au BufNewFile,BufRead *.wrl^I^I^Isetf vrml
line 2344: 
line 2345: " Vroom (vim testing and executable documentation)
line 2346: au BufNewFile,BufRead *.vroom^I^I^Isetf vroom
line 2347: 
line 2348: " Webmacro
line 2349: au BufNewFile,BufRead *.wm^I^I^Isetf webmacro
line 2350: 
line 2351: " Wget config
line 2352: au BufNewFile,BufRead .wgetrc,wgetrc^I^Isetf wget
line 2353: 
line 2354: " Website MetaLanguage
line 2355: au BufNewFile,BufRead *.wml^I^I^Isetf wml
line 2356: 
line 2357: " Winbatch
line 2358: au BufNewFile,BufRead *.wbt^I^I^Isetf winbatch
line 2359: 
line 2360: " WSML
line 2361: au BufNewFile,BufRead *.wsml^I^I^Isetf wsml
line 2362: 
line 2363: " WvDial
line 2364: au BufNewFile,BufRead wvdial.conf,.wvdialrc^Isetf wvdial
line 2365: 
line 2366: " CVS RC file
line 2367: au BufNewFile,BufRead .cvsrc^I^I^Isetf cvsrc
line 2368: 
line 2369: " CVS commit file
line 2370: au BufNewFile,BufRead cvs\d\+^I^I^Isetf cvs
line 2371: 
line 2372: " WEB (*.web is also used for Winbatch: Guess, based on expecting "%" comment
line 2373: " lines in a WEB file).
line 2379: au BufNewFile,BufRead *.web if getline(1)[0].getline(2)[0].getline(3)[0].getline(4)[0].getline(5)[0] =~ "%" |   setf web | else |   setf winbatch | endif
line 2380: 
line 2381: " Windows Scripting Host and Windows Script Component
line 2382: au BufNewFile,BufRead *.ws[fc]^I^I^Isetf wsh
line 2383: 
line 2384: " XHTML
line 2385: au BufNewFile,BufRead *.xhtml,*.xht^I^Isetf xhtml
line 2386: 
line 2387: " X Pixmap (dynamically sets colors, use BufEnter to make it work better)
line 2393: au BufEnter *.xpm if getline(1) =~ "XPM2" |   setf xpm2 | else |   setf xpm | endif
line 2394: au BufEnter *.xpm2^I^I^I^Isetf xpm2
line 2395: 
line 2396: " XFree86 config
line 2401: au BufNewFile,BufRead XF86Config if getline(1) =~ '\<XConfigurator\>' |   let b:xf86conf_xfree86_version = 3 | endif | setf xf86conf
line 2404: au BufNewFile,BufRead */xorg.conf.d/*.conf let b:xf86conf_xfree86_version = 4 | setf xf86conf
line 2405: 
line 2406: " Xorg config
line 2407: au BufNewFile,BufRead xorg.conf,xorg.conf-4^Ilet b:xf86conf_xfree86_version = 4 | setf xf86conf
line 2408: 
line 2409: " Xinetd conf
line 2410: au BufNewFile,BufRead */etc/xinetd.conf^I^Isetf xinetd
line 2411: 
line 2412: " XS Perl extension interface language
line 2413: au BufNewFile,BufRead *.xs^I^I^Isetf xs
line 2414: 
line 2415: " X resources file
line 2416: au BufNewFile,BufRead .Xdefaults,.Xpdefaults,.Xresources,xdm-config,*.ad setf xdefaults
line 2417: 
line 2418: " Xmath
line 2419: au BufNewFile,BufRead *.msc,*.msf^I^Isetf xmath
line 2421: au BufNewFile,BufRead *.ms if !s:FTnroff() | setf xmath | endif
line 2422: 
line 2423: " XML  specific variants: docbk and xbl
line 2424: au BufNewFile,BufRead *.xml^I^I^Icall s:FTxml()
line 2425: 
line 2426: func! s:FTxml()
line 2451: 
line 2452: " XMI (holding UML models) is also XML
line 2453: au BufNewFile,BufRead *.xmi^I^I^Isetf xml
line 2454: 
line 2455: " CSPROJ files are Visual Studio.NET's XML-based project config files
line 2456: au BufNewFile,BufRead *.csproj,*.csproj.user^Isetf xml
line 2457: 
line 2458: " Qt Linguist translation source and Qt User Interface Files are XML
line 2459: au BufNewFile,BufRead *.ts,*.ui^I^I^Isetf xml
line 2460: 
line 2461: " TPM's are RDF-based descriptions of TeX packages (Nikolai Weibull)
line 2462: au BufNewFile,BufRead *.tpm^I^I^Isetf xml
line 2463: 
line 2464: " Xdg menus
line 2465: au BufNewFile,BufRead */etc/xdg/menus/*.menu^Isetf xml
line 2466: 
line 2467: " ATI graphics driver configuration
line 2468: au BufNewFile,BufRead fglrxrc^I^I^Isetf xml
line 2469: 
line 2470: " XLIFF (XML Localisation Interchange File Format) is also XML
line 2471: au BufNewFile,BufRead *.xlf^I^I^Isetf xml
line 2472: au BufNewFile,BufRead *.xliff^I^I^Isetf xml
line 2473: 
line 2474: " XML User Interface Language
line 2475: au BufNewFile,BufRead *.xul^I^I^Isetf xml
line 2476: 
line 2477: " X11 xmodmap (also see below)
line 2478: au BufNewFile,BufRead *Xmodmap^I^I^Isetf xmodmap
line 2479: 
line 2480: " Xquery
line 2481: au BufNewFile,BufRead *.xq,*.xql,*.xqm,*.xquery,*.xqy^Isetf xquery
line 2482: 
line 2483: " XSD
line 2484: au BufNewFile,BufRead *.xsd^I^I^Isetf xsd
line 2485: 
line 2486: " Xslt
line 2487: au BufNewFile,BufRead *.xsl,*.xslt^I^Isetf xslt
line 2488: 
line 2489: " Yacc
line 2490: au BufNewFile,BufRead *.yy,*.yxx,*.y++^I^Isetf yacc
line 2491: 
line 2492: " Yacc or racc
line 2493: au BufNewFile,BufRead *.y^I^I^Icall s:FTy()
line 2494: 
line 2495: func! s:FTy()
line 2511: 
line 2512: 
line 2513: " Yaml
line 2514: au BufNewFile,BufRead *.yaml,*.yml^I^Isetf yaml
line 2515: 
line 2516: " yum conf (close enough to dosini)
line 2517: au BufNewFile,BufRead */etc/yum.conf^I^Isetf dosini
line 2518: 
line 2519: " Zimbu
line 2520: au BufNewFile,BufRead *.zu^I^I^Isetf zimbu
line 2521: " Zimbu Templates
line 2522: au BufNewFile,BufRead *.zut^I^I^Isetf zimbutempl
line 2523: 
line 2524: " Zope
line 2525: "   dtml (zope dynamic template markup language), pt (zope page template),
line 2526: "   cpt (zope form controller page template)
line 2527: au BufNewFile,BufRead *.dtml,*.pt,*.cpt^I^Icall s:FThtml()
line 2528: "   zsql (zope sql method)
line 2529: au BufNewFile,BufRead *.zsql^I^I^Icall s:SQL()
line 2530: 
line 2531: " Z80 assembler asz80
line 2532: au BufNewFile,BufRead *.z8a^I^I^Isetf z8a
line 2533: 
line 2534: augroup END
line 2535: 
line 2536: 
line 2537: " Source the user-specified filetype file, for backwards compatibility with
line 2538: " Vim 5.x.
line 2539: if exists("myfiletypefile") && filereadable(expand(myfiletypefile))
line 2540:   execute "source " . myfiletypefile
line 2541: endif
line 2542: 
line 2543: 
line 2544: " Check for "*" after loading myfiletypefile, so that scripts.vim is only used
line 2545: " when there are no matching file name extensions.
line 2546: " Don't do this for compressed files.
line 2547: augroup filetypedetect
line 2550: au BufNewFile,BufRead * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif
line 2551: au StdinReadPost * if !did_filetype() | runtime! scripts.vim | endif
line 2552: 
line 2553: 
line 2554: " Extra checks for when no filetype has been detected now.  Mostly used for
line 2555: " patterns that end in "*".  E.g., "zsh*" matches "zsh.vim", but that's a Vim
line 2556: " script file.
line 2557: " Most of these should call s:StarSetf() to avoid names ending in .gz and the
line 2558: " like are used.
line 2559: 
line 2560: " More Apache config files
line 2561: au BufNewFile,BufRead access.conf*,apache.conf*,apache2.conf*,httpd.conf*,srm.conf*^Icall s:StarSetf('apache')
line 2562: au BufNewFile,BufRead */etc/apache2/*.conf*,*/etc/apache2/conf.*/*,*/etc/apache2/mods-*/*,*/etc/apache2/sites-*/*,*/etc/httpd/conf.d/*.conf*^I^Icall s:StarSetf('apache')
line 2563: 
line 2564: " Asterisk config file
line 2565: au BufNewFile,BufRead *asterisk/*.conf*^I^Icall s:StarSetf('asterisk')
line 2566: au BufNewFile,BufRead *asterisk*/*voicemail.conf* call s:StarSetf('asteriskvm')
line 2567: 
line 2568: " Bazaar version control
line 2569: au BufNewFile,BufRead bzr_log.*^I^I^Isetf bzr
line 2570: 
line 2571: " BIND zone
line 2572: au BufNewFile,BufRead */named/db.*,*/bind/db.*^Icall s:StarSetf('bindzone')
line 2573: 
line 2574: " Calendar
line 2577: au BufNewFile,BufRead */.calendar/*,*/share/calendar/*/calendar.*,*/share/calendar/calendar.*^I^I^I^I^Icall s:StarSetf('calendar')
line 2578: 
line 2579: " Changelog
line 2585: au BufNewFile,BufRead [cC]hange[lL]og* if getline(1) =~ '; urgency='|  call s:StarSetf('debchangelog')|else|  call s:StarSetf('changelog')|endif
line 2586: 
line 2587: " Crontab
line 2588: au BufNewFile,BufRead crontab,crontab.*,*/etc/cron.d/*^I^Icall s:StarSetf('crontab')
line 2589: 
line 2590: " dnsmasq(8) configuration
line 2591: au BufNewFile,BufRead */etc/dnsmasq.d/*^I^Icall s:StarSetf('dnsmasq')
line 2592: 
line 2593: " Dracula
line 2594: au BufNewFile,BufRead drac.*^I^I^Icall s:StarSetf('dracula')
line 2595: 
line 2596: " Fvwm
line 2597: au BufNewFile,BufRead */.fvwm/*^I^I^Icall s:StarSetf('fvwm')
line 2599: au BufNewFile,BufRead *fvwmrc*,*fvwm95*.hook let b:fvwm_version = 1 | call s:StarSetf('fvwm')
line 2605: au BufNewFile,BufRead *fvwm2rc* if expand("<afile>:e") == "m4"|  call s:StarSetf('fvwm2m4')|else|  let b:fvwm_version = 2 | call s:StarSetf('fvwm')|endif
line 2606: 
line 2607: " Gedcom
line 2608: au BufNewFile,BufRead */tmp/lltmp*^I^Icall s:StarSetf('gedcom')
line 2609: 
line 2610: " GTK RC
line 2611: au BufNewFile,BufRead .gtkrc*,gtkrc*^I^Icall s:StarSetf('gtkrc')
line 2612: 
line 2613: " Jam
line 2614: au BufNewFile,BufRead Prl*.*,JAM*.*^I^Icall s:StarSetf('jam')
line 2615: 
line 2616: " Jargon
line 2620: au! BufNewFile,BufRead *jarg* if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'THIS IS THE JARGON FILE'|  call s:StarSetf('jargon')|endif
line 2621: 
line 2622: " Kconfig
line 2623: au BufNewFile,BufRead Kconfig.*^I^I^Icall s:StarSetf('kconfig')
line 2624: 
line 2625: " Lilo: Linux loader
line 2626: au BufNewFile,BufRead lilo.conf*^I^Icall s:StarSetf('lilo')
line 2627: 
line 2628: " Logcheck
line 2629: au BufNewFile,BufRead */etc/logcheck/*.d*/*^Icall s:StarSetf('logcheck')
line 2630: 
line 2631: " Makefile
line 2632: au BufNewFile,BufRead [mM]akefile*^I^Icall s:StarSetf('make')
line 2633: 
line 2634: " Ruby Makefile
line 2635: au BufNewFile,BufRead [rR]akefile*^I^Icall s:StarSetf('ruby')
line 2636: 
line 2637: " Mail (also matches muttrc.vim, so this is below the other checks)
line 2638: au BufNewFile,BufRead mutt[[:alnum:]._-]\\\{6\}^Isetf mail
line 2639: 
line 2640: " Modconf
line 2644: au BufNewFile,BufRead */etc/modutils/* if executable(expand("<afile>")) != 1|  call s:StarSetf('modconf')|endif
line 2645: au BufNewFile,BufRead */etc/modprobe.*^I^Icall s:StarSetf('modconf')
line 2646: 
line 2647: " Mutt setup file
line 2648: au BufNewFile,BufRead .mutt{ng,}rc*,*/.mutt{ng,}/mutt{ng,}rc*^Icall s:StarSetf('muttrc')
line 2649: au BufNewFile,BufRead mutt{ng,}rc*,Mutt{ng,}rc*^I^Icall s:StarSetf('muttrc')
line 2650: 
line 2651: " Nroff macros
line 2652: au BufNewFile,BufRead tmac.*^I^I^Icall s:StarSetf('nroff')
line 2653: 
line 2654: " Pam conf
line 2655: au BufNewFile,BufRead */etc/pam.d/*^I^Icall s:StarSetf('pamconf')
line 2656: 
line 2657: " Printcap and Termcap
line 2661: au BufNewFile,BufRead *printcap* if !did_filetype()|  let b:ptcap_type = "print" | call s:StarSetf('ptcap')|endif
line 2665: au BufNewFile,BufRead *termcap* if !did_filetype()|  let b:ptcap_type = "term" | call s:StarSetf('ptcap')|endif
line 2666: 
line 2667: " ReDIF
line 2668: " Only used when the .rdf file was not detected to be XML.
line 2669: au BufRead,BufNewFile *.rdf^I^I^Icall s:Redif()
line 2670: func! s:Redif()
line 2680: 
line 2681: " Remind
line 2682: au BufNewFile,BufRead .reminders*^I^Icall s:StarSetf('remind')
line 2683: 
line 2684: " Vim script
line 2685: au BufNewFile,BufRead *vimrc*^I^I^Icall s:StarSetf('vim')
line 2686: 
line 2687: " Subversion commit file
line 2688: au BufNewFile,BufRead svn-commit*.tmp^I^Isetf svn
line 2689: 
line 2690: " X resources file
line 2691: au BufNewFile,BufRead Xresources*,*/app-defaults/*,*/Xresources/* call s:StarSetf('xdefaults')
line 2692: 
line 2693: " XFree86 config
line 2695: au BufNewFile,BufRead XF86Config-4* let b:xf86conf_xfree86_version = 4 | call s:StarSetf('xf86conf')
line 2700: au BufNewFile,BufRead XF86Config* if getline(1) =~ '\<XConfigurator\>'|  let b:xf86conf_xfree86_version = 3|endif|call s:StarSetf('xf86conf')
line 2701: 
line 2702: " X11 xmodmap
line 2703: au BufNewFile,BufRead *xmodmap*^I^I^Icall s:StarSetf('xmodmap')
line 2704: 
line 2705: " Xinetd conf
line 2706: au BufNewFile,BufRead */etc/xinetd.d/*^I^Icall s:StarSetf('xinetd')
line 2707: 
line 2708: " yum conf (close enough to dosini)
line 2709: au BufNewFile,BufRead */etc/yum.repos.d/*^Icall s:StarSetf('dosini')
line 2710: 
line 2711: " Z-Shell script
line 2712: au BufNewFile,BufRead zsh*,zlog*^I^Icall s:StarSetf('zsh')
line 2713: 
line 2714: 
line 2715: " Plain text files, needs to be far down to not override others.  This avoids
line 2716: " the "conf" type being used if there is a line starting with '#'.
line 2717: au BufNewFile,BufRead *.txt,*.text,README^Isetf text
line 2718: 
line 2719: 
line 2720: " Use the filetype detect plugins.  They may overrule any of the previously
line 2721: " detected filetypes.
line 2722: runtime! ftdetect/*.vim
Searching for "ftdetect/*.vim" in "/home/computer/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after"
Searching for "/home/computer/.vim/ftdetect/*.vim"
Searching for "/var/lib/vim/addons/ftdetect/*.vim"
Searching for "/usr/share/vim/vimfiles/ftdetect/*.vim"
Searching for "/usr/share/vim/vim74/ftdetect/*.vim"
Searching for "/usr/share/vim/vimfiles/after/ftdetect/*.vim"
Searching for "/var/lib/vim/addons/after/ftdetect/*.vim"
Searching for "/home/computer/.vim/after/ftdetect/*.vim"
not found in 'runtimepath': "ftdetect/*.vim"
line 2723: 
line 2724: " NOTE: The above command could have ended the filetypedetect autocmd group
line 2725: " and started another one. Let's make sure it has ended to get to a consistent
line 2726: " state.
line 2727: augroup END
line 2728: 
line 2729: " Generic configuration file (check this last, it's just guessing!)
line 2735: au filetypedetect BufNewFile,BufRead,StdinReadPost * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf conf | endif
line 2736: 
line 2737: 
line 2738: " If the GUI is already running, may still need to install the Syntax menu.
line 2739: " Don't do it when the 'M' flag is included in 'guioptions'.
line 2741: if has("menu") && has("gui_running") && !exists("did_install_syntax_menu") && &guioptions !~# "M"
line 2742:   source <sfile>:p:h/menu.vim
line 2743: endif
line 2744: 
line 2745: " Function called for testing all functions defined here.  These are
line 2746: " script-local, thus need to be executed here.
line 2747: " Returns a string with error messages (hopefully empty).
line 2748: func! TestFiletypeFuncs(testlist)
line 2759: 
line 2760: " Restore 'cpoptions'
line 2761: let &cpo = s:cpo_save
line 2762: unlet s:cpo_save
finished sourcing /usr/share/vim/vim74/filetype.vim
continuing in /usr/share/vim/vim74/syntax/syntax.vim
Searching for "/usr/share/vim/vimfiles/after/filetype.vim"
Searching for "/var/lib/vim/addons/after/filetype.vim"
Searching for "/home/computer/.vim/after/filetype.vim"
line 26:   let s:did_ft = 0
line 27: endif
line 28: 
line 29: " Set up the connection between FileType and Syntax autocommands.
line 30: " This makes the syntax automatically set when the file type is detected.
line 31: augroup syntaxset
line 32:   au! FileType *^Iexe "set syntax=" . expand("<amatch>")
line 33: augroup END
line 34: 
line 35: 
line 36: " Execute the syntax autocommands for the each buffer.
line 37: " If the filetype wasn't detected yet, do that now.
line 38: " Always do the syntaxset autocommands, for buffers where the 'filetype'
line 39: " already was set manually (e.g., help buffers).
line 40: doautoall syntaxset FileType
line 41: if !s:did_ft
line 42:   doautoall filetypedetect BufRead
line 43: endif
finished sourcing /usr/share/vim/vim74/syntax/syntax.vim
continuing in /usr/share/vim/vimrc
line 21: endif
line 22: 
line 23: " If using a dark background within the editing area and syntax highlighting
line 24: " turn on this option as well
line 25: "set background=dark
line 26: 
line 27: " Uncomment the following to have Vim jump to the last position when
line 28: " reopening a file
line 29: "if has("autocmd")
line 30: "  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
line 31: "endif
line 32: 
line 33: " Uncomment the following to have Vim load indentation rules and plugins
line 34: " according to the detected filetype.
line 35: "if has("autocmd")
line 36: "  filetype plugin indent on
line 37: "endif
line 38: 
line 39: " The following are commented out as they cause vim to behave a lot
line 40: " differently from regular Vi. They are highly recommended though.
line 41: "set showcmd^I^I" Show (partial) command in status line.
line 42: "set showmatch^I^I" Show matching brackets.
line 43: "set ignorecase^I^I" Do case insensitive matching
line 44: "set smartcase^I^I" Do smart case matching
line 45: "set incsearch^I^I" Incremental search
line 46: "set autowrite^I^I" Automatically save before commands like :next and :make
line 47: "set hidden^I^I" Hide buffers when they are abandoned
line 48: "set mouse=a^I^I" Enable mouse usage (all modes)
line 49: 
line 50: " Source a global configuration file if available
line 51: if filereadable("/etc/vim/vimrc.local")
line 52:   source /etc/vim/vimrc.local
line 53: endif
line 54: 
finished sourcing $VIM/vimrc
chdir(/home/computer)
fchdir() to previous dir
sourcing "$HOME/.vimrc"
line 1: " Mostly borrowed from here - https://github.com/StevenLooman/configs/blob/master/.vimrc
line 2: " and here - https://realpython.com/blog/python/vim-and-python-a-match-made-in-heaven/
line 3: " and here - https://raw.githubusercontent.com/raphamorim/lucario/master/colors/lucario.vim
line 4: 
line 5: 
line 6: 
line 7: 
line 8: colorscheme lucario
Searching for "colors/lucario.vim" in "/home/computer/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after"
Searching for "/home/computer/.vim/colors/lucario.vim"
chdir(/home/computer/.vim/colors)
fchdir() to previous dir
line 8: sourcing "/home/computer/.vim/colors/lucario.vim"
line 1: " Lucario - The best colorful flat theme ever
line 2: " Author: Raphael Amorim
line 3: "
line 4: " GitHub project: https://github.com/raphamorim/lucario
line 5: 
line 6: set background=dark
Searching for "syntax/syncolor.vim" in "/home/computer/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after"
Searching for "/home/computer/.vim/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/syntax/syncolor.vim"
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"
Searching for "/usr/share/vim/vim74/syntax/syncolor.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 6: sourcing "/usr/share/vim/vim74/syntax/syncolor.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 12
line 4: 
line 5: " This file sets up the default methods for highlighting.
line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".
line 7: " Also used from init_highlight().
line 8: 
line 9: if !exists("syntax_cmd") || syntax_cmd == "on"
line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links
line 11:   command -nargs=* SynColor hi <args>
line 12:   command -nargs=* SynLink hi link <args>
line 13: else
line 14:   if syntax_cmd == "enable"
line 15:     " ":syntax enable" keeps any existing colors
line 16:     command -nargs=* SynColor hi def <args>
line 17:     command -nargs=* SynLink hi def link <args>
line 18:   elseif syntax_cmd == "reset"
line 19:     " ":syntax reset" resets all colors to the default
line 20:     command -nargs=* SynColor hi <args>
line 21:     command -nargs=* SynLink hi! link <args>
line 22:   else
line 23:     " User defined syncolor file has already set the colors.
line 24:     finish
line 25:   endif
line 26: endif
line 27: 
line 28: " Many terminals can only use six different colors (plus black and white).
line 29: " Therefore the number of colors used is kept low. It doesn't look nice with
line 30: " too many colors anyway.
line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.
line 32: " There are two sets of defaults: for a dark and a light background.
line 33: if &background == "dark"
line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 43: else
line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE
line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE
line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE
line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE
line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE
line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE
line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE
line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue
line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 53: endif
line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 56: 
line 57: " Common groups that link to default highlighting.
line 58: " You can specify other highlighting easily.
line 59: SynLink String^I^IConstant
line 59: hi link String^I^IConstant
line 60: SynLink Character^IConstant
line 60: hi link Character^IConstant
line 61: SynLink Number^I^IConstant
line 61: hi link Number^I^IConstant
line 62: SynLink Boolean^I^IConstant
line 62: hi link Boolean^I^IConstant
line 63: SynLink Float^I^INumber
line 63: hi link Float^I^INumber
line 64: SynLink Function^IIdentifier
line 64: hi link Function^IIdentifier
line 65: SynLink Conditional^IStatement
line 65: hi link Conditional^IStatement
line 66: SynLink Repeat^I^IStatement
line 66: hi link Repeat^I^IStatement
line 67: SynLink Label^I^IStatement
line 67: hi link Label^I^IStatement
line 68: SynLink Operator^IStatement
line 68: hi link Operator^IStatement
line 69: SynLink Keyword^I^IStatement
line 69: hi link Keyword^I^IStatement
line 70: SynLink Exception^IStatement
line 70: hi link Exception^IStatement
line 71: SynLink Include^I^IPreProc
line 71: hi link Include^I^IPreProc
line 72: SynLink Define^I^IPreProc
line 72: hi link Define^I^IPreProc
line 73: SynLink Macro^I^IPreProc
line 73: hi link Macro^I^IPreProc
line 74: SynLink PreCondit^IPreProc
line 74: hi link PreCondit^IPreProc
line 75: SynLink StorageClass^IType
line 75: hi link StorageClass^IType
line 76: SynLink Structure^IType
line 76: hi link Structure^IType
line 77: SynLink Typedef^I^IType
line 77: hi link Typedef^I^IType
line 78: SynLink Tag^I^ISpecial
line 78: hi link Tag^I^ISpecial
line 79: SynLink SpecialChar^ISpecial
line 79: hi link SpecialChar^ISpecial
line 80: SynLink Delimiter^ISpecial
line 80: hi link Delimiter^ISpecial
line 81: SynLink SpecialComment^ISpecial
line 81: hi link SpecialComment^ISpecial
line 82: SynLink Debug^I^ISpecial
line 82: hi link Debug^I^ISpecial
line 83: 
line 84: delcommand SynColor
line 85: delcommand SynLink
finished sourcing /usr/share/vim/vim74/syntax/syncolor.vim
continuing in /home/computer/.vim/colors/lucario.vim
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/after/syntax/syncolor.vim"
Searching for "/home/computer/.vim/after/syntax/syncolor.vim"
line 7: highlight clear
Searching for "syntax/syncolor.vim" in "/home/computer/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after"
Searching for "/home/computer/.vim/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/syntax/syncolor.vim"
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"
Searching for "/usr/share/vim/vim74/syntax/syncolor.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 7: sourcing "/usr/share/vim/vim74/syntax/syncolor.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 12
line 4: 
line 5: " This file sets up the default methods for highlighting.
line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".
line 7: " Also used from init_highlight().
line 8: 
line 9: if !exists("syntax_cmd") || syntax_cmd == "on"
line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links
line 11:   command -nargs=* SynColor hi <args>
line 12:   command -nargs=* SynLink hi link <args>
line 13: else
line 14:   if syntax_cmd == "enable"
line 15:     " ":syntax enable" keeps any existing colors
line 16:     command -nargs=* SynColor hi def <args>
line 17:     command -nargs=* SynLink hi def link <args>
line 18:   elseif syntax_cmd == "reset"
line 19:     " ":syntax reset" resets all colors to the default
line 20:     command -nargs=* SynColor hi <args>
line 21:     command -nargs=* SynLink hi! link <args>
line 22:   else
line 23:     " User defined syncolor file has already set the colors.
line 24:     finish
line 25:   endif
line 26: endif
line 27: 
line 28: " Many terminals can only use six different colors (plus black and white).
line 29: " Therefore the number of colors used is kept low. It doesn't look nice with
line 30: " too many colors anyway.
line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.
line 32: " There are two sets of defaults: for a dark and a light background.
line 33: if &background == "dark"
line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 43: else
line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE
line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE
line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE
line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE
line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE
line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE
line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE
line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue
line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 53: endif
line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 56: 
line 57: " Common groups that link to default highlighting.
line 58: " You can specify other highlighting easily.
line 59: SynLink String^I^IConstant
line 59: hi link String^I^IConstant
line 60: SynLink Character^IConstant
line 60: hi link Character^IConstant
line 61: SynLink Number^I^IConstant
line 61: hi link Number^I^IConstant
line 62: SynLink Boolean^I^IConstant
line 62: hi link Boolean^I^IConstant
line 63: SynLink Float^I^INumber
line 63: hi link Float^I^INumber
line 64: SynLink Function^IIdentifier
line 64: hi link Function^IIdentifier
line 65: SynLink Conditional^IStatement
line 65: hi link Conditional^IStatement
line 66: SynLink Repeat^I^IStatement
line 66: hi link Repeat^I^IStatement
line 67: SynLink Label^I^IStatement
line 67: hi link Label^I^IStatement
line 68: SynLink Operator^IStatement
line 68: hi link Operator^IStatement
line 69: SynLink Keyword^I^IStatement
line 69: hi link Keyword^I^IStatement
line 70: SynLink Exception^IStatement
line 70: hi link Exception^IStatement
line 71: SynLink Include^I^IPreProc
line 71: hi link Include^I^IPreProc
line 72: SynLink Define^I^IPreProc
line 72: hi link Define^I^IPreProc
line 73: SynLink Macro^I^IPreProc
line 73: hi link Macro^I^IPreProc
line 74: SynLink PreCondit^IPreProc
line 74: hi link PreCondit^IPreProc
line 75: SynLink StorageClass^IType
line 75: hi link StorageClass^IType
line 76: SynLink Structure^IType
line 76: hi link Structure^IType
line 77: SynLink Typedef^I^IType
line 77: hi link Typedef^I^IType
line 78: SynLink Tag^I^ISpecial
line 78: hi link Tag^I^ISpecial
line 79: SynLink SpecialChar^ISpecial
line 79: hi link SpecialChar^ISpecial
line 80: SynLink Delimiter^ISpecial
line 80: hi link Delimiter^ISpecial
line 81: SynLink SpecialComment^ISpecial
line 81: hi link SpecialComment^ISpecial
line 82: SynLink Debug^I^ISpecial
line 82: hi link Debug^I^ISpecial
line 83: 
line 84: delcommand SynColor
line 85: delcommand SynLink
finished sourcing /usr/share/vim/vim74/syntax/syncolor.vim
continuing in /home/computer/.vim/colors/lucario.vim
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/after/syntax/syncolor.vim"
Searching for "/home/computer/.vim/after/syntax/syncolor.vim"
line 8: 
line 9: set t_Co=256
line 10: 
line 11: if exists("syntax_on")
line 12:   syntax reset
line 12: runtime! syntax/syncolor.vim
Searching for "syntax/syncolor.vim" in "/home/computer/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after"
Searching for "/home/computer/.vim/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/syntax/syncolor.vim"
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"
Searching for "/usr/share/vim/vim74/syntax/syncolor.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 12: sourcing "/usr/share/vim/vim74/syntax/syncolor.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 12
line 4: 
line 5: " This file sets up the default methods for highlighting.
line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".
line 7: " Also used from init_highlight().
line 8: 
line 9: if !exists("syntax_cmd") || syntax_cmd == "on"
line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links
line 11:   command -nargs=* SynColor hi <args>
line 12:   command -nargs=* SynLink hi link <args>
line 13: else
line 14:   if syntax_cmd == "enable"
line 15:     " ":syntax enable" keeps any existing colors
line 16:     command -nargs=* SynColor hi def <args>
line 17:     command -nargs=* SynLink hi def link <args>
line 18:   elseif syntax_cmd == "reset"
line 19:     " ":syntax reset" resets all colors to the default
line 20:     command -nargs=* SynColor hi <args>
line 21:     command -nargs=* SynLink hi! link <args>
line 22:   else
line 23:     " User defined syncolor file has already set the colors.
line 24:     finish
line 25:   endif
line 26: endif
line 27: 
line 28: " Many terminals can only use six different colors (plus black and white).
line 29: " Therefore the number of colors used is kept low. It doesn't look nice with
line 30: " too many colors anyway.
line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.
line 32: " There are two sets of defaults: for a dark and a light background.
line 33: if &background == "dark"
line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 43: else
line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE
line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE
line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE
line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE
line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE
line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE
line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE
line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue
line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 53: endif
line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 56: 
line 57: " Common groups that link to default highlighting.
line 58: " You can specify other highlighting easily.
line 59: SynLink String^I^IConstant
line 59: hi! link String^I^IConstant
line 60: SynLink Character^IConstant
line 60: hi! link Character^IConstant
line 61: SynLink Number^I^IConstant
line 61: hi! link Number^I^IConstant
line 62: SynLink Boolean^I^IConstant
line 62: hi! link Boolean^I^IConstant
line 63: SynLink Float^I^INumber
line 63: hi! link Float^I^INumber
line 64: SynLink Function^IIdentifier
line 64: hi! link Function^IIdentifier
line 65: SynLink Conditional^IStatement
line 65: hi! link Conditional^IStatement
line 66: SynLink Repeat^I^IStatement
line 66: hi! link Repeat^I^IStatement
line 67: SynLink Label^I^IStatement
line 67: hi! link Label^I^IStatement
line 68: SynLink Operator^IStatement
line 68: hi! link Operator^IStatement
line 69: SynLink Keyword^I^IStatement
line 69: hi! link Keyword^I^IStatement
line 70: SynLink Exception^IStatement
line 70: hi! link Exception^IStatement
line 71: SynLink Include^I^IPreProc
line 71: hi! link Include^I^IPreProc
line 72: SynLink Define^I^IPreProc
line 72: hi! link Define^I^IPreProc
line 73: SynLink Macro^I^IPreProc
line 73: hi! link Macro^I^IPreProc
line 74: SynLink PreCondit^IPreProc
line 74: hi! link PreCondit^IPreProc
line 75: SynLink StorageClass^IType
line 75: hi! link StorageClass^IType
line 76: SynLink Structure^IType
line 76: hi! link Structure^IType
line 77: SynLink Typedef^I^IType
line 77: hi! link Typedef^I^IType
line 78: SynLink Tag^I^ISpecial
line 78: hi! link Tag^I^ISpecial
line 79: SynLink SpecialChar^ISpecial
line 79: hi! link SpecialChar^ISpecial
line 80: SynLink Delimiter^ISpecial
line 80: hi! link Delimiter^ISpecial
line 81: SynLink SpecialComment^ISpecial
line 81: hi! link SpecialComment^ISpecial
line 82: SynLink Debug^I^ISpecial
line 82: hi! link Debug^I^ISpecial
line 83: 
line 84: delcommand SynColor
line 85: delcommand SynLink
finished sourcing /usr/share/vim/vim74/syntax/syncolor.vim
continuing in /home/computer/.vim/colors/lucario.vim
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/after/syntax/syncolor.vim"
Searching for "/home/computer/.vim/after/syntax/syncolor.vim"
line 13: endif
line 14: 
line 15: let g:colors_name = "lucario"
line 16: 
line 17: hi Cursor       cterm=NONE guifg=#2b3e50 guibg=#f8f8f2
line 18: hi Visual       ctermfg=NONE ctermbg=16 cterm=NONE guifg=NONE guibg=#19242f gui=NONE
line 19: hi CursorLine   ctermfg=NONE ctermbg=236 cterm=NONE guifg=NONE guibg=#405160 gui=NONE
line 20: hi CursorColumn ctermfg=NONE ctermbg=236 cterm=NONE guifg=NONE guibg=#405160 gui=NONE
line 21: hi ColorColumn  ctermfg=NONE ctermbg=59 cterm=NONE guifg=NONE guibg=#405160 gui=NONE
line 22: hi LineNr       ctermfg=223 ctermbg=NONE cterm=NONE guifg=#929ba1 guibg=#2b3e50 gui=NONE
line 23: hi VertSplit    ctermfg=60 ctermbg=60 cterm=NONE guifg=#66747f guibg=#66747f gui=NONE
line 24: hi MatchParen   ctermfg=203 ctermbg=NONE cterm=underline guifg=#ff6541 guibg=NONE gui=underline
line 25: hi StatusLine   ctermfg=231 ctermbg=60 cterm=bold guifg=#f8f8f2 guibg=#66747f gui=bold
line 26: hi StatusLineNC ctermfg=231 ctermbg=60 cterm=NONE guifg=#f8f8f2 guibg=#66747f gui=NONE
line 27: hi Pmenu        ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=#19242f gui=NONE
line 28: hi PmenuSel     ctermfg=NONE ctermbg=16 cterm=NONE guifg=NONE guibg=#66747f gui=NONE
line 29: hi IncSearch    ctermfg=23 ctermbg=186 cterm=NONE guifg=#2b3e50 guibg=#e6db74 gui=NONE
line 30: hi Search       ctermfg=NONE ctermbg=NONE cterm=underline guifg=NONE guibg=NONE gui=underline
line 31: hi Directory    ctermfg=177 ctermbg=NONE cterm=NONE guifg=#ca94ff guibg=NONE gui=NONE
line 32: hi Folded       ctermfg=68 ctermbg=23 cterm=NONE guifg=#5c98cd guibg=#2b3e50 gui=NONE
line 33: 
line 34: " Colors for tabs in cterm
line 35: hi TabLineFill  ctermfg=12
line 36: hi TabLine      ctermfg=17 ctermbg=11 cterm=NONE
line 37: hi TabLineSel   ctermfg=8 ctermbg=14 cterm=NONE
line 38: 
line 39: hi Normal       ctermfg=231 ctermbg=NONE cterm=NONE guifg=#f8f8f2 guibg=#2b3e50 gui=NONE
line 40: hi Boolean      ctermfg=177 ctermbg=NONE cterm=NONE guifg=#ca94ff guibg=NONE gui=NONE
line 41: hi Character    ctermfg=177 ctermbg=NONE cterm=NONE guifg=#ca94ff guibg=NONE gui=NONE
line 42: hi Comment      ctermfg=44 ctermbg=NONE cterm=NONE guifg=#5c98cd guibg=NONE gui=NONE
line 43: hi Conditional  ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 44: hi Constant     ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 45: hi Define       ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 46: hi DiffAdd      ctermfg=231 ctermbg=64 cterm=bold guifg=#f8f8f2 guibg=#478815 gui=bold
line 47: hi DiffDelete   ctermfg=88 ctermbg=NONE cterm=NONE guifg=#8c0c10 guibg=NONE gui=NONE
line 48: hi DiffChange   ctermfg=231 ctermbg=23 cterm=NONE guifg=#f8f8f2 guibg=#26446c gui=NONE
line 49: hi DiffText     ctermfg=231 ctermbg=24 cterm=bold guifg=#f8f8f2 guibg=#204a87 gui=bold
line 50: hi ErrorMsg     ctermfg=231 ctermbg=197 cterm=NONE guifg=#f8f8f0 guibg=#f92672 gui=NONE
line 51: hi WarningMsg   ctermfg=231 ctermbg=197 cterm=NONE guifg=#f8f8f0 guibg=#f92672 gui=NONE
line 52: hi Float        ctermfg=177 ctermbg=NONE cterm=NONE guifg=#ca94ff guibg=NONE gui=NONE
line 53: hi Function     ctermfg=71 ctermbg=NONE cterm=NONE guifg=#72c05d guibg=NONE gui=NONE
line 54: hi Identifier   ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=italic
line 55: hi Keyword      ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 56: hi Label        ctermfg=186 ctermbg=NONE cterm=NONE guifg=#e6db74 guibg=NONE gui=NONE
line 57: hi NonText      ctermfg=74 ctermbg=NONE cterm=NONE guifg=#61bbc8 guibg=#354758 gui=NONE
line 58: hi Number       ctermfg=177 ctermbg=NONE cterm=NONE guifg=#ca94ff guibg=NONE gui=NONE
line 59: hi Operator     ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 60: hi PreProc      ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 61: hi Parameter    ctermfg=214 ctermbg=NONE cterm=NONE guifg=#ffab28 guibg=NONE gui=italic
line 62: hi Special      ctermfg=231 ctermbg=NONE cterm=NONE guifg=#f8f8f2 guibg=NONE gui=NONE
line 63: hi SpecialKey   ctermfg=74 ctermbg=59 cterm=NONE guifg=#61bbc8 guibg=#405160 gui=NONE
line 64: hi Statement    ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 65: hi StorageClass ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=italic
line 66: hi String       ctermfg=186 ctermbg=NONE cterm=NONE guifg=#e6db74 guibg=NONE gui=NONE
line 67: hi Tag          ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 68: hi Title        ctermfg=231 ctermbg=NONE cterm=bold guifg=#f8f8f2 guibg=NONE gui=bold
line 69: hi Todo         ctermfg=68 ctermbg=NONE cterm=inverse,bold guifg=#5c98cd guibg=NONE gui=inverse,bold
line 70: hi Type         ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 71: hi Underlined   ctermfg=NONE ctermbg=NONE cterm=underline guifg=NONE guibg=NONE gui=underline
line 72: 
line 73: 
line 74: " Ruby
line 75: hi rubyClass                    ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 76: hi rubyFunction                 ctermfg=71 ctermbg=NONE cterm=NONE guifg=#72c05d guibg=NONE gui=NONE
line 77: hi rubyInterpolationDelimiter   ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 78: hi rubySymbol                   ctermfg=177 ctermbg=NONE cterm=NONE guifg=#ca94ff guibg=NONE gui=NONE
line 79: hi rubyConstant                 ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=italic
line 80: hi rubyStringDelimiter          ctermfg=186 ctermbg=NONE cterm=NONE guifg=#e6db74 guibg=NONE gui=NONE
line 81: hi rubyBlockParameter           ctermfg=214 ctermbg=NONE cterm=NONE guifg=#ffab28 guibg=NONE gui=italic
line 82: hi rubyInstanceVariable         ctermfg=81 ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 83: hi rubyInclude                  ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 84: hi rubyGlobalVariable           ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 85: hi rubyRegexp                   ctermfg=186 ctermbg=NONE cterm=NONE guifg=#e6db74 guibg=NONE gui=NONE
line 86: hi rubyRegexpDelimiter          ctermfg=186 ctermbg=NONE cterm=NONE guifg=#e6db74 guibg=NONE gui=NONE
line 87: hi rubyEscape                   ctermfg=177 ctermbg=NONE cterm=NONE guifg=#ca94ff guibg=NONE gui=NONE
line 88: hi rubyControl                  ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 89: hi rubyClassVariable            ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 90: hi rubyOperator                 ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 91: hi rubyException                ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 92: hi rubyPseudoVariable           ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 93: hi rubyRailsUserClass           ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=italic
line 94: hi rubyRailsARAssociationMethod ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=NONE
line 95: hi rubyRailsARMethod            ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=NONE
line 96: hi rubyRailsRenderMethod        ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=NONE
line 97: hi rubyRailsMethod              ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=NONE
line 98: 
line 99: " eRuby
line 100: hi erubyDelimiter   ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 101: hi erubyComment     ctermfg=68 ctermbg=NONE cterm=NONE guifg=#5c98cd guibg=NONE gui=NONE
line 102: hi erubyRailsMethod ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=NONE
line 103: 
line 104: " HTML
line 105: hi htmlTag          ctermfg=15 ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 106: hi htmlEndTag       ctermfg=15 ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 107: hi htmlTagName      ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 108: hi htmlArg          ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 109: hi htmlSpecialChar  ctermfg=177 ctermbg=NONE cterm=NONE guifg=#ca94ff guibg=NONE gui=NONE
line 110: 
line 111: " JavaScript
line 112: hi javaScriptFunction      ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=italic
line 113: hi javaScriptRailsFunction ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=NONE
line 114: hi javaScriptBraces        ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 115: 
line 116: " YAMl
line 117: hi yamlKey              ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 118: hi yamlAnchor           ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 119: hi yamlAlias            ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 120: hi yamlDocumentHeader   ctermfg=186 ctermbg=NONE cterm=NONE guifg=#e6db74 guibg=NONE gui=NONE
line 121: 
line 122: " CSS
line 123: hi cssURL           ctermfg=214 ctermbg=NONE cterm=NONE guifg=#ffab28 guibg=NONE gui=italic
line 124: hi cssFunctionName  ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=NONE
line 125: hi cssColor         ctermfg=177 ctermbg=NONE cterm=NONE guifg=#ca94ff guibg=NONE gui=NONE
line 126: hi cssPseudoClassId ctermfg=71 ctermbg=NONE cterm=NONE guifg=#72c05d guibg=NONE gui=NONE
line 127: hi cssClassName     ctermfg=71 ctermbg=NONE cterm=NONE guifg=#72c05d guibg=NONE gui=NONE
line 128: hi cssValueLength   ctermfg=177 ctermbg=NONE cterm=NONE guifg=#ca94ff guibg=NONE gui=NONE
line 129: hi cssCommonAttr    ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=NONE
line 130: hi cssBraces        ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 131: 
line 132: " Python
line 133: hi pythonStatement ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=italic
line 134: hi pythonBuiltin   ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=italic
finished sourcing /home/computer/.vim/colors/lucario.vim
continuing in /home/computer/.vimrc
line 9: set nocompatible              " required
line 10: filetype off                  " required
Searching for "ftoff.vim" in "/home/computer/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after"
Searching for "/home/computer/.vim/ftoff.vim"
Searching for "/var/lib/vim/addons/ftoff.vim"
Searching for "/usr/share/vim/vimfiles/ftoff.vim"
Searching for "/usr/share/vim/vim74/ftoff.vim"
chdir(/usr/share/vim/vim74)
fchdir() to previous dir
line 10: sourcing "/usr/share/vim/vim74/ftoff.vim"
line 1: " Vim support file to switch off detection of file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last change:^I2001 Jun 11
line 5: 
line 6: if exists("did_load_filetypes")
line 7:   unlet did_load_filetypes
line 8: endif
line 9: 
line 10: " Remove all autocommands in the filetypedetect group
line 11: silent! au! filetypedetect *
finished sourcing /usr/share/vim/vim74/ftoff.vim
continuing in /home/computer/.vimrc
Searching for "/usr/share/vim/vimfiles/after/ftoff.vim"
Searching for "/var/lib/vim/addons/after/ftoff.vim"
Searching for "/home/computer/.vim/after/ftoff.vim"
line 11: 
line 12: " General stuff
line 13: 
line 14: set encoding=utf-8
line 15: let python_highlight_all=1
line 16: syntax on
line 16: so $VIMRUNTIME/syntax/syntax.vim
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 16: sourcing "/usr/share/vim/vim74/syntax/syntax.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 04
line 4: 
line 5: " This file is used for ":syntax on".
line 6: " It installs the autocommands and starts highlighting for all buffers.
line 7: 
line 8: if !has("syntax")
line 9:   finish
line 10: endif
line 11: 
line 12: " If Syntax highlighting appears to be on already, turn it off first, so that
line 13: " any leftovers are cleared.
line 14: if exists("syntax_on") || exists("syntax_manual")
line 15:   so <sfile>:p:h/nosyntax.vim
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 15: sourcing "/usr/share/vim/vim74/syntax/nosyntax.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2006 Apr 16
line 4: 
line 5: " This file is used for ":syntax off".
line 6: " It removes the autocommands and stops highlighting for all buffers.
line 7: 
line 8: if !has("syntax")
line 9:   finish
line 10: endif
line 11: 
line 12: " Remove all autocommands for the Syntax event.  This also avoids that
line 13: " "syntax=foo" in a modeline triggers the SynSet() function of synload.vim.
line 14: au! Syntax
line 15: 
line 16: " remove all syntax autocommands and remove the syntax for each buffer
line 17: augroup syntaxset
line 18:   au!
line 19:   au BufEnter * syn clear
line 20:   au BufEnter * if exists("b:current_syntax") | unlet b:current_syntax | endif
line 21:   doautoall syntaxset BufEnter *
line 22:   au!
line 23: augroup END
line 24: 
line 25: if exists("syntax_on")
line 26:   unlet syntax_on
line 27: endif
line 28: if exists("syntax_manual")
line 29:   unlet syntax_manual
line 30: endif
finished sourcing /usr/share/vim/vim74/syntax/nosyntax.vim
continuing in /usr/share/vim/vim74/syntax/syntax.vim
line 16: endif
line 17: 
line 18: " Load the Syntax autocommands and set the default methods for highlighting.
line 19: runtime syntax/synload.vim
Searching for "syntax/synload.vim" in "/home/computer/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after"
Searching for "/home/computer/.vim/syntax/synload.vim"
Searching for "/var/lib/vim/addons/syntax/synload.vim"
Searching for "/usr/share/vim/vimfiles/syntax/synload.vim"
Searching for "/usr/share/vim/vim74/syntax/synload.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 19: sourcing "/usr/share/vim/vim74/syntax/synload.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2012 Sep 25
line 4: 
line 5: " This file sets up for syntax highlighting.
line 6: " It is loaded from "syntax.vim" and "manual.vim".
line 7: " 1. Set the default highlight groups.
line 8: " 2. Install Syntax autocommands for all the available syntax files.
line 9: 
line 10: if !has("syntax")
line 11:   finish
line 12: endif
line 13: 
line 14: " let others know that syntax has been switched on
line 15: let syntax_on = 1
line 16: 
line 17: " Set the default highlighting colors.  Use a color scheme if specified.
line 18: if exists("colors_name")
line 19:   exe "colors " . colors_name
line 19: colors lucario
Searching for "colors/lucario.vim" in "/home/computer/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after"
Searching for "/home/computer/.vim/colors/lucario.vim"
chdir(/home/computer/.vim/colors)
fchdir() to previous dir
line 19: sourcing "/home/computer/.vim/colors/lucario.vim"
line 1: " Lucario - The best colorful flat theme ever
line 2: " Author: Raphael Amorim
line 3: "
line 4: " GitHub project: https://github.com/raphamorim/lucario
line 5: 
line 6: set background=dark
line 7: highlight clear
Searching for "syntax/syncolor.vim" in "/home/computer/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after"
Searching for "/home/computer/.vim/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/syntax/syncolor.vim"
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"
Searching for "/usr/share/vim/vim74/syntax/syncolor.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 7: sourcing "/usr/share/vim/vim74/syntax/syncolor.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 12
line 4: 
line 5: " This file sets up the default methods for highlighting.
line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".
line 7: " Also used from init_highlight().
line 8: 
line 9: if !exists("syntax_cmd") || syntax_cmd == "on"
line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links
line 11:   command -nargs=* SynColor hi <args>
line 12:   command -nargs=* SynLink hi link <args>
line 13: else
line 14:   if syntax_cmd == "enable"
line 15:     " ":syntax enable" keeps any existing colors
line 16:     command -nargs=* SynColor hi def <args>
line 17:     command -nargs=* SynLink hi def link <args>
line 18:   elseif syntax_cmd == "reset"
line 19:     " ":syntax reset" resets all colors to the default
line 20:     command -nargs=* SynColor hi <args>
line 21:     command -nargs=* SynLink hi! link <args>
line 22:   else
line 23:     " User defined syncolor file has already set the colors.
line 24:     finish
line 25:   endif
line 26: endif
line 27: 
line 28: " Many terminals can only use six different colors (plus black and white).
line 29: " Therefore the number of colors used is kept low. It doesn't look nice with
line 30: " too many colors anyway.
line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.
line 32: " There are two sets of defaults: for a dark and a light background.
line 33: if &background == "dark"
line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 43: else
line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE
line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE
line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE
line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE
line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE
line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE
line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE
line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue
line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 53: endif
line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 56: 
line 57: " Common groups that link to default highlighting.
line 58: " You can specify other highlighting easily.
line 59: SynLink String^I^IConstant
line 59: hi link String^I^IConstant
line 60: SynLink Character^IConstant
line 60: hi link Character^IConstant
line 61: SynLink Number^I^IConstant
line 61: hi link Number^I^IConstant
line 62: SynLink Boolean^I^IConstant
line 62: hi link Boolean^I^IConstant
line 63: SynLink Float^I^INumber
line 63: hi link Float^I^INumber
line 64: SynLink Function^IIdentifier
line 64: hi link Function^IIdentifier
line 65: SynLink Conditional^IStatement
line 65: hi link Conditional^IStatement
line 66: SynLink Repeat^I^IStatement
line 66: hi link Repeat^I^IStatement
line 67: SynLink Label^I^IStatement
line 67: hi link Label^I^IStatement
line 68: SynLink Operator^IStatement
line 68: hi link Operator^IStatement
line 69: SynLink Keyword^I^IStatement
line 69: hi link Keyword^I^IStatement
line 70: SynLink Exception^IStatement
line 70: hi link Exception^IStatement
line 71: SynLink Include^I^IPreProc
line 71: hi link Include^I^IPreProc
line 72: SynLink Define^I^IPreProc
line 72: hi link Define^I^IPreProc
line 73: SynLink Macro^I^IPreProc
line 73: hi link Macro^I^IPreProc
line 74: SynLink PreCondit^IPreProc
line 74: hi link PreCondit^IPreProc
line 75: SynLink StorageClass^IType
line 75: hi link StorageClass^IType
line 76: SynLink Structure^IType
line 76: hi link Structure^IType
line 77: SynLink Typedef^I^IType
line 77: hi link Typedef^I^IType
line 78: SynLink Tag^I^ISpecial
line 78: hi link Tag^I^ISpecial
line 79: SynLink SpecialChar^ISpecial
line 79: hi link SpecialChar^ISpecial
line 80: SynLink Delimiter^ISpecial
line 80: hi link Delimiter^ISpecial
line 81: SynLink SpecialComment^ISpecial
line 81: hi link SpecialComment^ISpecial
line 82: SynLink Debug^I^ISpecial
line 82: hi link Debug^I^ISpecial
line 83: 
line 84: delcommand SynColor
line 85: delcommand SynLink
finished sourcing /usr/share/vim/vim74/syntax/syncolor.vim
continuing in /home/computer/.vim/colors/lucario.vim
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/after/syntax/syncolor.vim"
Searching for "/home/computer/.vim/after/syntax/syncolor.vim"
line 8: 
line 9: set t_Co=256
line 10: 
line 11: if exists("syntax_on")
line 12:   syntax reset
line 12: runtime! syntax/syncolor.vim
Searching for "syntax/syncolor.vim" in "/home/computer/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after"
Searching for "/home/computer/.vim/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/syntax/syncolor.vim"
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"
Searching for "/usr/share/vim/vim74/syntax/syncolor.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 12: sourcing "/usr/share/vim/vim74/syntax/syncolor.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 12
line 4: 
line 5: " This file sets up the default methods for highlighting.
line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".
line 7: " Also used from init_highlight().
line 8: 
line 9: if !exists("syntax_cmd") || syntax_cmd == "on"
line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links
line 11:   command -nargs=* SynColor hi <args>
line 12:   command -nargs=* SynLink hi link <args>
line 13: else
line 14:   if syntax_cmd == "enable"
line 15:     " ":syntax enable" keeps any existing colors
line 16:     command -nargs=* SynColor hi def <args>
line 17:     command -nargs=* SynLink hi def link <args>
line 18:   elseif syntax_cmd == "reset"
line 19:     " ":syntax reset" resets all colors to the default
line 20:     command -nargs=* SynColor hi <args>
line 21:     command -nargs=* SynLink hi! link <args>
line 22:   else
line 23:     " User defined syncolor file has already set the colors.
line 24:     finish
line 25:   endif
line 26: endif
line 27: 
line 28: " Many terminals can only use six different colors (plus black and white).
line 29: " Therefore the number of colors used is kept low. It doesn't look nice with
line 30: " too many colors anyway.
line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.
line 32: " There are two sets of defaults: for a dark and a light background.
line 33: if &background == "dark"
line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 43: else
line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE
line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE
line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE
line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE
line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE
line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE
line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE
line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue
line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 53: endif
line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 56: 
line 57: " Common groups that link to default highlighting.
line 58: " You can specify other highlighting easily.
line 59: SynLink String^I^IConstant
line 59: hi! link String^I^IConstant
line 60: SynLink Character^IConstant
line 60: hi! link Character^IConstant
line 61: SynLink Number^I^IConstant
line 61: hi! link Number^I^IConstant
line 62: SynLink Boolean^I^IConstant
line 62: hi! link Boolean^I^IConstant
line 63: SynLink Float^I^INumber
line 63: hi! link Float^I^INumber
line 64: SynLink Function^IIdentifier
line 64: hi! link Function^IIdentifier
line 65: SynLink Conditional^IStatement
line 65: hi! link Conditional^IStatement
line 66: SynLink Repeat^I^IStatement
line 66: hi! link Repeat^I^IStatement
line 67: SynLink Label^I^IStatement
line 67: hi! link Label^I^IStatement
line 68: SynLink Operator^IStatement
line 68: hi! link Operator^IStatement
line 69: SynLink Keyword^I^IStatement
line 69: hi! link Keyword^I^IStatement
line 70: SynLink Exception^IStatement
line 70: hi! link Exception^IStatement
line 71: SynLink Include^I^IPreProc
line 71: hi! link Include^I^IPreProc
line 72: SynLink Define^I^IPreProc
line 72: hi! link Define^I^IPreProc
line 73: SynLink Macro^I^IPreProc
line 73: hi! link Macro^I^IPreProc
line 74: SynLink PreCondit^IPreProc
line 74: hi! link PreCondit^IPreProc
line 75: SynLink StorageClass^IType
line 75: hi! link StorageClass^IType
line 76: SynLink Structure^IType
line 76: hi! link Structure^IType
line 77: SynLink Typedef^I^IType
line 77: hi! link Typedef^I^IType
line 78: SynLink Tag^I^ISpecial
line 78: hi! link Tag^I^ISpecial
line 79: SynLink SpecialChar^ISpecial
line 79: hi! link SpecialChar^ISpecial
line 80: SynLink Delimiter^ISpecial
line 80: hi! link Delimiter^ISpecial
line 81: SynLink SpecialComment^ISpecial
line 81: hi! link SpecialComment^ISpecial
line 82: SynLink Debug^I^ISpecial
line 82: hi! link Debug^I^ISpecial
line 83: 
line 84: delcommand SynColor
line 85: delcommand SynLink
finished sourcing /usr/share/vim/vim74/syntax/syncolor.vim
continuing in /home/computer/.vim/colors/lucario.vim
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/after/syntax/syncolor.vim"
Searching for "/home/computer/.vim/after/syntax/syncolor.vim"
line 13: endif
line 14: 
line 15: let g:colors_name = "lucario"
line 16: 
line 17: hi Cursor       cterm=NONE guifg=#2b3e50 guibg=#f8f8f2
line 18: hi Visual       ctermfg=NONE ctermbg=16 cterm=NONE guifg=NONE guibg=#19242f gui=NONE
line 19: hi CursorLine   ctermfg=NONE ctermbg=236 cterm=NONE guifg=NONE guibg=#405160 gui=NONE
line 20: hi CursorColumn ctermfg=NONE ctermbg=236 cterm=NONE guifg=NONE guibg=#405160 gui=NONE
line 21: hi ColorColumn  ctermfg=NONE ctermbg=59 cterm=NONE guifg=NONE guibg=#405160 gui=NONE
line 22: hi LineNr       ctermfg=223 ctermbg=NONE cterm=NONE guifg=#929ba1 guibg=#2b3e50 gui=NONE
line 23: hi VertSplit    ctermfg=60 ctermbg=60 cterm=NONE guifg=#66747f guibg=#66747f gui=NONE
line 24: hi MatchParen   ctermfg=203 ctermbg=NONE cterm=underline guifg=#ff6541 guibg=NONE gui=underline
line 25: hi StatusLine   ctermfg=231 ctermbg=60 cterm=bold guifg=#f8f8f2 guibg=#66747f gui=bold
line 26: hi StatusLineNC ctermfg=231 ctermbg=60 cterm=NONE guifg=#f8f8f2 guibg=#66747f gui=NONE
line 27: hi Pmenu        ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=#19242f gui=NONE
line 28: hi PmenuSel     ctermfg=NONE ctermbg=16 cterm=NONE guifg=NONE guibg=#66747f gui=NONE
line 29: hi IncSearch    ctermfg=23 ctermbg=186 cterm=NONE guifg=#2b3e50 guibg=#e6db74 gui=NONE
line 30: hi Search       ctermfg=NONE ctermbg=NONE cterm=underline guifg=NONE guibg=NONE gui=underline
line 31: hi Directory    ctermfg=177 ctermbg=NONE cterm=NONE guifg=#ca94ff guibg=NONE gui=NONE
line 32: hi Folded       ctermfg=68 ctermbg=23 cterm=NONE guifg=#5c98cd guibg=#2b3e50 gui=NONE
line 33: 
line 34: " Colors for tabs in cterm
line 35: hi TabLineFill  ctermfg=12
line 36: hi TabLine      ctermfg=17 ctermbg=11 cterm=NONE
line 37: hi TabLineSel   ctermfg=8 ctermbg=14 cterm=NONE
line 38: 
line 39: hi Normal       ctermfg=231 ctermbg=NONE cterm=NONE guifg=#f8f8f2 guibg=#2b3e50 gui=NONE
line 40: hi Boolean      ctermfg=177 ctermbg=NONE cterm=NONE guifg=#ca94ff guibg=NONE gui=NONE
line 41: hi Character    ctermfg=177 ctermbg=NONE cterm=NONE guifg=#ca94ff guibg=NONE gui=NONE
line 42: hi Comment      ctermfg=44 ctermbg=NONE cterm=NONE guifg=#5c98cd guibg=NONE gui=NONE
line 43: hi Conditional  ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 44: hi Constant     ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 45: hi Define       ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 46: hi DiffAdd      ctermfg=231 ctermbg=64 cterm=bold guifg=#f8f8f2 guibg=#478815 gui=bold
line 47: hi DiffDelete   ctermfg=88 ctermbg=NONE cterm=NONE guifg=#8c0c10 guibg=NONE gui=NONE
line 48: hi DiffChange   ctermfg=231 ctermbg=23 cterm=NONE guifg=#f8f8f2 guibg=#26446c gui=NONE
line 49: hi DiffText     ctermfg=231 ctermbg=24 cterm=bold guifg=#f8f8f2 guibg=#204a87 gui=bold
line 50: hi ErrorMsg     ctermfg=231 ctermbg=197 cterm=NONE guifg=#f8f8f0 guibg=#f92672 gui=NONE
line 51: hi WarningMsg   ctermfg=231 ctermbg=197 cterm=NONE guifg=#f8f8f0 guibg=#f92672 gui=NONE
line 52: hi Float        ctermfg=177 ctermbg=NONE cterm=NONE guifg=#ca94ff guibg=NONE gui=NONE
line 53: hi Function     ctermfg=71 ctermbg=NONE cterm=NONE guifg=#72c05d guibg=NONE gui=NONE
line 54: hi Identifier   ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=italic
line 55: hi Keyword      ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 56: hi Label        ctermfg=186 ctermbg=NONE cterm=NONE guifg=#e6db74 guibg=NONE gui=NONE
line 57: hi NonText      ctermfg=74 ctermbg=NONE cterm=NONE guifg=#61bbc8 guibg=#354758 gui=NONE
line 58: hi Number       ctermfg=177 ctermbg=NONE cterm=NONE guifg=#ca94ff guibg=NONE gui=NONE
line 59: hi Operator     ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 60: hi PreProc      ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 61: hi Parameter    ctermfg=214 ctermbg=NONE cterm=NONE guifg=#ffab28 guibg=NONE gui=italic
line 62: hi Special      ctermfg=231 ctermbg=NONE cterm=NONE guifg=#f8f8f2 guibg=NONE gui=NONE
line 63: hi SpecialKey   ctermfg=74 ctermbg=59 cterm=NONE guifg=#61bbc8 guibg=#405160 gui=NONE
line 64: hi Statement    ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 65: hi StorageClass ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=italic
line 66: hi String       ctermfg=186 ctermbg=NONE cterm=NONE guifg=#e6db74 guibg=NONE gui=NONE
line 67: hi Tag          ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 68: hi Title        ctermfg=231 ctermbg=NONE cterm=bold guifg=#f8f8f2 guibg=NONE gui=bold
line 69: hi Todo         ctermfg=68 ctermbg=NONE cterm=inverse,bold guifg=#5c98cd guibg=NONE gui=inverse,bold
line 70: hi Type         ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 71: hi Underlined   ctermfg=NONE ctermbg=NONE cterm=underline guifg=NONE guibg=NONE gui=underline
line 72: 
line 73: 
line 74: " Ruby
line 75: hi rubyClass                    ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 76: hi rubyFunction                 ctermfg=71 ctermbg=NONE cterm=NONE guifg=#72c05d guibg=NONE gui=NONE
line 77: hi rubyInterpolationDelimiter   ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 78: hi rubySymbol                   ctermfg=177 ctermbg=NONE cterm=NONE guifg=#ca94ff guibg=NONE gui=NONE
line 79: hi rubyConstant                 ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=italic
line 80: hi rubyStringDelimiter          ctermfg=186 ctermbg=NONE cterm=NONE guifg=#e6db74 guibg=NONE gui=NONE
line 81: hi rubyBlockParameter           ctermfg=214 ctermbg=NONE cterm=NONE guifg=#ffab28 guibg=NONE gui=italic
line 82: hi rubyInstanceVariable         ctermfg=81 ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 83: hi rubyInclude                  ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 84: hi rubyGlobalVariable           ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 85: hi rubyRegexp                   ctermfg=186 ctermbg=NONE cterm=NONE guifg=#e6db74 guibg=NONE gui=NONE
line 86: hi rubyRegexpDelimiter          ctermfg=186 ctermbg=NONE cterm=NONE guifg=#e6db74 guibg=NONE gui=NONE
line 87: hi rubyEscape                   ctermfg=177 ctermbg=NONE cterm=NONE guifg=#ca94ff guibg=NONE gui=NONE
line 88: hi rubyControl                  ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 89: hi rubyClassVariable            ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 90: hi rubyOperator                 ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 91: hi rubyException                ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 92: hi rubyPseudoVariable           ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 93: hi rubyRailsUserClass           ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=italic
line 94: hi rubyRailsARAssociationMethod ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=NONE
line 95: hi rubyRailsARMethod            ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=NONE
line 96: hi rubyRailsRenderMethod        ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=NONE
line 97: hi rubyRailsMethod              ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=NONE
line 98: 
line 99: " eRuby
line 100: hi erubyDelimiter   ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 101: hi erubyComment     ctermfg=68 ctermbg=NONE cterm=NONE guifg=#5c98cd guibg=NONE gui=NONE
line 102: hi erubyRailsMethod ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=NONE
line 103: 
line 104: " HTML
line 105: hi htmlTag          ctermfg=15 ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 106: hi htmlEndTag       ctermfg=15 ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 107: hi htmlTagName      ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 108: hi htmlArg          ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 109: hi htmlSpecialChar  ctermfg=177 ctermbg=NONE cterm=NONE guifg=#ca94ff guibg=NONE gui=NONE
line 110: 
line 111: " JavaScript
line 112: hi javaScriptFunction      ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=italic
line 113: hi javaScriptRailsFunction ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=NONE
line 114: hi javaScriptBraces        ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 115: 
line 116: " YAMl
line 117: hi yamlKey              ctermfg=203 ctermbg=NONE cterm=NONE guifg=#ff6541 guibg=NONE gui=NONE
line 118: hi yamlAnchor           ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 119: hi yamlAlias            ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 120: hi yamlDocumentHeader   ctermfg=186 ctermbg=NONE cterm=NONE guifg=#e6db74 guibg=NONE gui=NONE
line 121: 
line 122: " CSS
line 123: hi cssURL           ctermfg=214 ctermbg=NONE cterm=NONE guifg=#ffab28 guibg=NONE gui=italic
line 124: hi cssFunctionName  ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=NONE
line 125: hi cssColor         ctermfg=177 ctermbg=NONE cterm=NONE guifg=#ca94ff guibg=NONE gui=NONE
line 126: hi cssPseudoClassId ctermfg=71 ctermbg=NONE cterm=NONE guifg=#72c05d guibg=NONE gui=NONE
line 127: hi cssClassName     ctermfg=71 ctermbg=NONE cterm=NONE guifg=#72c05d guibg=NONE gui=NONE
line 128: hi cssValueLength   ctermfg=177 ctermbg=NONE cterm=NONE guifg=#ca94ff guibg=NONE gui=NONE
line 129: hi cssCommonAttr    ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=NONE
line 130: hi cssBraces        ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE
line 131: 
line 132: " Python
line 133: hi pythonStatement ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=italic
line 134: hi pythonBuiltin   ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=italic
finished sourcing /home/computer/.vim/colors/lucario.vim
continuing in /usr/share/vim/vim74/syntax/synload.vim
line 20: else
line 21:   runtime! syntax/syncolor.vim
line 22: endif
line 23: 
line 24: " Line continuation is used here, remove 'C' from 'cpoptions'
line 25: let s:cpo_save = &cpo
line 26: set cpo&vim
line 27: 
line 28: " First remove all old syntax autocommands.
line 29: au! Syntax
line 30: 
line 31: au Syntax *^I^Icall s:SynSet()
line 32: 
line 33: fun! s:SynSet()
line 61: 
line 62: 
line 63: " Handle adding doxygen to other languages (C, C++, C#, IDL, java, php, DataScript)
line 68: au Syntax c,cpp,cs,idl,java,php,datascript if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif
line 69: 
line 70: 
line 71: " Source the user-specified syntax highlighting file
line 72: if exists("mysyntaxfile") && filereadable(expand(mysyntaxfile))
line 73:   execute "source " . mysyntaxfile
line 74: endif
line 75: 
line 76: " Restore 'cpoptions'
line 77: let &cpo = s:cpo_save
line 78: unlet s:cpo_save
finished sourcing /usr/share/vim/vim74/syntax/synload.vim
continuing in /usr/share/vim/vim74/syntax/syntax.vim
line 20: 
line 21: " Load the FileType autocommands if not done yet.
line 22: if exists("did_load_filetypes")
line 23:   let s:did_ft = 1
line 24: else
line 25:   filetype on
Searching for "filetype.vim" in "/home/computer/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after"
Searching for "/home/computer/.vim/filetype.vim"
Searching for "/var/lib/vim/addons/filetype.vim"
Searching for "/usr/share/vim/vimfiles/filetype.vim"
Searching for "/usr/share/vim/vim74/filetype.vim"
chdir(/usr/share/vim/vim74)
fchdir() to previous dir
line 25: sourcing "/usr/share/vim/vim74/filetype.vim"
line 1: " Vim support file to detect file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last Change:^I2015 Dec 03
line 5: 
line 6: " Listen very carefully, I will say this only once
line 7: if exists("did_load_filetypes")
line 8:   finish
line 9: endif
line 10: let did_load_filetypes = 1
line 11: 
line 12: " Line continuation is used here, remove 'C' from 'cpoptions'
line 13: let s:cpo_save = &cpo
line 14: set cpo&vim
line 15: 
line 16: augroup filetypedetect
line 17: 
line 18: " Ignored extensions
line 19: if exists("*fnameescape")
line 21: au BufNewFile,BufRead ?\+.orig,?\+.bak,?\+.old,?\+.new,?\+.dpkg-dist,?\+.dpkg-old,?\+.dpkg-new,?\+.dpkg-bak,?\+.rpmsave,?\+.rpmnew exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r"))
line 28: au BufNewFile,BufRead *~ let s:name = expand("<afile>") | let s:short = substitute(s:name, '\~$', '', '') | if s:name != s:short && s:short != "" |   exe "doau filetypedetect BufRead " . fnameescape(s:short) | endif | unlet! s:name s:short
line 32: au BufNewFile,BufRead ?\+.in if expand("<afile>:t") != "configure.in" |   exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r")) | endif
line 33: elseif &verbose > 0
line 34:   echomsg "Warning: some filetypes will not be recognized because this version of Vim does not have fnameescape()"
line 35: endif
line 36: 
line 37: " Pattern used to match file names which should not be inspected.
line 38: " Currently finds compressed files.
line 39: if !exists("g:ft_ignore_pat")
line 40:   let g:ft_ignore_pat = '\.\(Z\|gz\|bz2\|zip\|tgz\)$'
line 41: endif
line 42: 
line 43: " Function used for patterns that end in a star: don't set the filetype if the
line 44: " file name matches ft_ignore_pat.
line 45: func! s:StarSetf(ft)
line 50: 
line 51: " Abaqus or Trasys
line 52: au BufNewFile,BufRead *.inp^I^I^Icall s:Check_inp()
line 53: 
line 54: func! s:Check_inp()
line 73: 
line 74: " A-A-P recipe
line 75: au BufNewFile,BufRead *.aap^I^I^Isetf aap
line 76: 
line 77: " A2ps printing utility
line 78: au BufNewFile,BufRead */etc/a2ps.cfg,*/etc/a2ps/*.cfg,a2psrc,.a2psrc setf a2ps
line 79: 
line 80: " ABAB/4
line 81: au BufNewFile,BufRead *.abap^I^I^Isetf abap
line 82: 
line 83: " ABC music notation
line 84: au BufNewFile,BufRead *.abc^I^I^Isetf abc
line 85: 
line 86: " ABEL
line 87: au BufNewFile,BufRead *.abl^I^I^Isetf abel
line 88: 
line 89: " AceDB
line 90: au BufNewFile,BufRead *.wrm^I^I^Isetf acedb
line 91: 
line 92: " Ada (83, 9X, 95)
line 93: au BufNewFile,BufRead *.adb,*.ads,*.ada^I^Isetf ada
line 94: if has("vms")
line 95:   au BufNewFile,BufRead *.gpr,*.ada_m,*.adc^Isetf ada
line 96: else
line 97:   au BufNewFile,BufRead *.gpr^I^I^Isetf ada
line 98: endif
line 99: 
line 100: " AHDL
line 101: au BufNewFile,BufRead *.tdf^I^I^Isetf ahdl
line 102: 
line 103: " AMPL
line 104: au BufNewFile,BufRead *.run^I^I^Isetf ampl
line 105: 
line 106: " Ant
line 107: au BufNewFile,BufRead build.xml^I^I^Isetf ant
line 108: 
line 109: " Arduino
line 110: au BufNewFile,BufRead *.ino,*.pde^I^Isetf arduino
line 111: 
line 112: " Apache style config file
line 113: au BufNewFile,BufRead proftpd.conf*^I^Icall s:StarSetf('apachestyle')
line 114: 
line 115: " Apache config file
line 116: au BufNewFile,BufRead .htaccess,*/etc/httpd/*.conf^I^Isetf apache
line 117: 
line 118: " XA65 MOS6510 cross assembler
line 119: au BufNewFile,BufRead *.a65^I^I^Isetf a65
line 120: 
line 121: " Applescript
line 122: au BufNewFile,BufRead *.scpt^I^I^Isetf applescript
line 123: 
line 124: " Applix ELF
line 126: au BufNewFile,BufRead *.am if expand("<afile>") !~? 'Makefile.am\>' | setf elf | endif
line 127: 
line 128: " ALSA configuration
line 129: au BufNewFile,BufRead .asoundrc,*/usr/share/alsa/alsa.conf,*/etc/asound.conf setf alsaconf
line 130: 
line 131: " Arc Macro Language
line 132: au BufNewFile,BufRead *.aml^I^I^Isetf aml
line 133: 
line 134: " APT config file
line 135: au BufNewFile,BufRead apt.conf^I^I       setf aptconf
line 136: au BufNewFile,BufRead */.aptitude/config       setf aptconf
line 137: au BufNewFile,BufRead */etc/apt/apt.conf.d/{[-_[:alnum:]]\+,[-_.[:alnum:]]\+.conf} setf aptconf
line 138: 
line 139: " Arch Inventory file
line 140: au BufNewFile,BufRead .arch-inventory,=tagging-method^Isetf arch
line 141: 
line 142: " ART*Enterprise (formerly ART-IM)
line 143: au BufNewFile,BufRead *.art^I^I^Isetf art
line 144: 
line 145: " AsciiDoc
line 146: au BufNewFile,BufRead *.asciidoc,*.adoc^I^Isetf asciidoc
line 147: 
line 148: " ASN.1
line 149: au BufNewFile,BufRead *.asn,*.asn1^I^Isetf asn
line 150: 
line 151: " Active Server Pages (with Visual Basic Script)
line 157: au BufNewFile,BufRead *.asa if exists("g:filetype_asa") |   exe "setf " . g:filetype_asa | else |   setf aspvbs | endif
line 158: 
line 159: " Active Server Pages (with Perl or Visual Basic Script)
line 167: au BufNewFile,BufRead *.asp if exists("g:filetype_asp") |   exe "setf " . g:filetype_asp | elseif getline(1) . getline(2) . getline(3) =~? "perlscript" |   setf aspperl | else |   setf aspvbs | endif
line 168: 
line 169: " Grub (must be before catch *.lst)
line 170: au BufNewFile,BufRead */boot/grub/menu.lst,*/boot/grub/grub.conf,*/etc/grub.conf setf grub
line 171: 
line 172: " Assembly (all kinds)
line 173: " *.lst is not pure assembly, it has two extra columns (address, byte codes)
line 174: au BufNewFile,BufRead *.asm,*.[sS],*.[aA],*.mac,*.lst^Icall s:FTasm()
line 175: 
line 176: " This function checks for the kind of assembly that is wanted by the user, or
line 177: " can be detected from the first five lines of the file.
line 178: func! s:FTasm()
line 199: 
line 200: func! s:FTasmsyntax()
line 212: 
line 213: " Macro (VAX)
line 214: au BufNewFile,BufRead *.mar^I^I^Isetf vmasm
line 215: 
line 216: " Atlas
line 217: au BufNewFile,BufRead *.atl,*.as^I^Isetf atlas
line 218: 
line 219: " Autoit v3
line 220: au BufNewFile,BufRead *.au3^I^I^Isetf autoit
line 221: 
line 222: " Autohotkey
line 223: au BufNewFile,BufRead *.ahk^I^I^Isetf autohotkey
line 224: 
line 225: " Automake
line 226: au BufNewFile,BufRead [mM]akefile.am,GNUmakefile.am^Isetf automake
line 227: 
line 228: " Autotest .at files are actually m4
line 229: au BufNewFile,BufRead *.at^I^I^Isetf m4
line 230: 
line 231: " Avenue
line 232: au BufNewFile,BufRead *.ave^I^I^Isetf ave
line 233: 
line 234: " Awk
line 235: au BufNewFile,BufRead *.awk^I^I^Isetf awk
line 236: 
line 237: " B
line 238: au BufNewFile,BufRead *.mch,*.ref,*.imp^I^Isetf b
line 239: 
line 240: " BASIC or Visual Basic
line 241: au BufNewFile,BufRead *.bas^I^I^Icall s:FTVB("basic")
line 242: 
line 243: " Check if one of the first five lines contains "VB_Name".  In that case it is
line 244: " probably a Visual Basic file.  Otherwise it's assumed to be "alt" filetype.
line 245: func! s:FTVB(alt)
line 252: 
line 253: " Visual Basic Script (close to Visual Basic) or Visual Basic .NET
line 254: au BufNewFile,BufRead *.vb,*.vbs,*.dsm,*.ctl^Isetf vb
line 255: 
line 256: " IBasic file (similar to QBasic)
line 257: au BufNewFile,BufRead *.iba,*.ibi^I^Isetf ibasic
line 258: 
line 259: " FreeBasic file (similar to QBasic)
line 260: au BufNewFile,BufRead *.fb,*.bi^I^I^Isetf freebasic
line 261: 
line 262: " Batch file for MSDOS.
line 263: au BufNewFile,BufRead *.bat,*.sys^I^Isetf dosbatch
line 264: " *.cmd is close to a Batch file, but on OS/2 Rexx files also use *.cmd.
line 266: au BufNewFile,BufRead *.cmd if getline(1) =~ '^/\*' | setf rexx | else | setf dosbatch | endif
line 267: 
line 268: " Batch file for 4DOS
line 269: au BufNewFile,BufRead *.btm^I^I^Icall s:FTbtm()
line 270: func! s:FTbtm()
line 277: 
line 278: " BC calculator
line 279: au BufNewFile,BufRead *.bc^I^I^Isetf bc
line 280: 
line 281: " BDF font
line 282: au BufNewFile,BufRead *.bdf^I^I^Isetf bdf
line 283: 
line 284: " BibTeX bibliography database file
line 285: au BufNewFile,BufRead *.bib^I^I^Isetf bib
line 286: 
line 287: " BibTeX Bibliography Style
line 288: au BufNewFile,BufRead *.bst^I^I^Isetf bst
line 289: 
line 290: " BIND configuration
line 291: au BufNewFile,BufRead named.conf,rndc.conf^Isetf named
line 292: 
line 293: " BIND zone
line 294: au BufNewFile,BufRead named.root^I^Isetf bindzone
line 295: au BufNewFile,BufRead *.db^I^I^Icall s:BindzoneCheck('')
line 296: 
line 297: func! s:BindzoneCheck(default)
line 304: 
line 305: " Blank
line 306: au BufNewFile,BufRead *.bl^I^I^Isetf blank
line 307: 
line 308: " Blkid cache file
line 309: au BufNewFile,BufRead */etc/blkid.tab,*/etc/blkid.tab.old   setf xml
line 310: 
line 311: " Bazel (http://bazel.io)
line 312: autocmd BufRead,BufNewFile *.bzl,BUILD,WORKSPACE setfiletype bzl
line 313: 
line 314: " C or lpc
line 315: au BufNewFile,BufRead *.c^I^I^Icall s:FTlpc()
line 316: 
line 317: func! s:FTlpc()
line 330: 
line 331: " Calendar
line 332: au BufNewFile,BufRead calendar^I^I^Isetf calendar
line 333: 
line 334: " C#
line 335: au BufNewFile,BufRead *.cs^I^I^Isetf cs
line 336: 
line 337: " CSDL
line 338: au BufNewFile,BufRead *.csdl^I^I^Isetf csdl
line 339: 
line 340: " Cabal
line 341: au BufNewFile,BufRead *.cabal^I^I^Isetf cabal
line 342: 
line 343: " Cdrdao TOC
line 344: au BufNewFile,BufRead *.toc^I^I^Isetf cdrtoc
line 345: 
line 346: " Cdrdao config
line 347: au BufNewFile,BufRead */etc/cdrdao.conf,*/etc/defaults/cdrdao,*/etc/default/cdrdao,.cdrdao^Isetf cdrdaoconf
line 348: 
line 349: " Cfengine
line 350: au BufNewFile,BufRead cfengine.conf^I^Isetf cfengine
line 351: 
line 352: " ChaiScript
line 353: au BufRead,BufNewFile *.chai^I^I^Isetf chaiscript
line 354: 
line 355: " Comshare Dimension Definition Language
line 356: au BufNewFile,BufRead *.cdl^I^I^Isetf cdl
line 357: 
line 358: " Conary Recipe
line 359: au BufNewFile,BufRead *.recipe^I^I^Isetf conaryrecipe
line 360: 
line 361: " Controllable Regex Mutilator
line 362: au BufNewFile,BufRead *.crm^I^I^Isetf crm
line 363: 
line 364: " Cyn++
line 365: au BufNewFile,BufRead *.cyn^I^I^Isetf cynpp
line 366: 
line 367: " Cynlib
line 368: " .cc and .cpp files can be C++ or Cynlib.
line 370: au BufNewFile,BufRead *.cc if exists("cynlib_syntax_for_cc")|setf cynlib|else|setf cpp|endif
line 372: au BufNewFile,BufRead *.cpp if exists("cynlib_syntax_for_cpp")|setf cynlib|else|setf cpp|endif
line 373: 
line 374: " C++
line 375: au BufNewFile,BufRead *.cxx,*.c++,*.hh,*.hxx,*.hpp,*.ipp,*.moc,*.tcc,*.inl setf cpp
line 376: if has("fname_case")
line 377:   au BufNewFile,BufRead *.C,*.H setf cpp
line 378: endif
line 379: 
line 380: " .h files can be C, Ch C++, ObjC or ObjC++.
line 381: " Set c_syntax_for_h if you want C, ch_syntax_for_h if you want Ch. ObjC is
line 382: " detected automatically.
line 383: au BufNewFile,BufRead *.h^I^I^Icall s:FTheader()
line 384: 
line 385: func! s:FTheader()
line 400: 
line 401: " Ch (CHscript)
line 402: au BufNewFile,BufRead *.chf^I^I^Isetf ch
line 403: 
line 404: " TLH files are C++ headers generated by Visual C++'s #import from typelibs
line 405: au BufNewFile,BufRead *.tlh^I^I^Isetf cpp
line 406: 
line 407: " Cascading Style Sheets
line 408: au BufNewFile,BufRead *.css^I^I^Isetf css
line 409: 
line 410: " Century Term Command Scripts (*.cmd too)
line 411: au BufNewFile,BufRead *.con^I^I^Isetf cterm
line 412: 
line 413: " Changelog
line 415: au BufNewFile,BufRead changelog.Debian,changelog.dch,NEWS.Debian,NEWS.dch^Isetf debchangelog
line 416: 
line 422: au BufNewFile,BufRead [cC]hange[lL]og  if getline(1) =~ '; urgency='|   setf debchangelog| else|   setf changelog| endif
line 423: 
line 427: au BufNewFile,BufRead NEWS  if getline(1) =~ '; urgency='|   setf debchangelog| endif
line 428: 
line 429: " CHILL
line 430: au BufNewFile,BufRead *..ch^I^I^Isetf chill
line 431: 
line 432: " Changes for WEB and CWEB or CHILL
line 433: au BufNewFile,BufRead *.ch^I^I^Icall s:FTchange()
line 434: 
line 435: " This function checks if one of the first ten lines start with a '@'.  In
line 436: " that case it is probably a change file.
line 437: " If the first line starts with # or ! it's probably a ch file.
line 438: " If a line has "main", "include", "//" ir "/*" it's probably ch.
line 439: " Otherwise CHILL is assumed.
line 440: func! s:FTchange()
line 463: 
line 464: " ChordPro
line 465: au BufNewFile,BufRead *.chopro,*.crd,*.cho,*.crdpro,*.chordpro^Isetf chordpro
line 466: 
line 467: " Clean
line 468: au BufNewFile,BufRead *.dcl,*.icl^I^Isetf clean
line 469: 
line 470: " Clever
line 471: au BufNewFile,BufRead *.eni^I^I^Isetf cl
line 472: 
line 473: " Clever or dtd
line 474: au BufNewFile,BufRead *.ent^I^I^Icall s:FTent()
line 475: 
line 476: func! s:FTent()
line 495: 
line 496: " Clipper (or FoxPro; could also be eviews)
line 502: au BufNewFile,BufRead *.prg if exists("g:filetype_prg") |   exe "setf " . g:filetype_prg | else |   setf clipper | endif
line 503: 
line 504: " Clojure
line 505: au BufNewFile,BufRead *.clj,*.cljs,*.cljx,*.cljc^I^Isetf clojure
line 506: 
line 507: " Cmake
line 508: au BufNewFile,BufRead CMakeLists.txt,*.cmake,*.cmake.in^I^Isetf cmake
line 509: 
line 510: " Cmusrc
line 511: au BufNewFile,BufRead */.cmus/{autosave,rc,command-history,*.theme} setf cmusrc
line 512: au BufNewFile,BufRead */cmus/{rc,*.theme}^I^I^Isetf cmusrc
line 513: 
line 514: " Cobol
line 515: au BufNewFile,BufRead *.cbl,*.cob,*.lib^Isetf cobol
line 516: "   cobol or zope form controller python script? (heuristic)
line 522: au BufNewFile,BufRead *.cpy if getline(1) =~ '^##' |   setf python | else |   setf cobol | endif
line 523: 
line 524: " Coco/R
line 525: au BufNewFile,BufRead *.atg^I^I^Isetf coco
line 526: 
line 527: " Cold Fusion
line 528: au BufNewFile,BufRead *.cfm,*.cfi,*.cfc^I^Isetf cf
line 529: 
line 530: " Configure scripts
line 531: au BufNewFile,BufRead configure.in,configure.ac setf config
line 532: 
line 533: " CUDA  Cumpute Unified Device Architecture
line 534: au BufNewFile,BufRead *.cu^I^I^Isetf cuda
line 535: 
line 536: " Dockerfile
line 537: au BufNewFile,BufRead Dockerfile^I^Isetf dockerfile
line 538: 
line 539: " WildPackets EtherPeek Decoder
line 540: au BufNewFile,BufRead *.dcd^I^I^Isetf dcd
line 541: 
line 542: " Enlightenment configuration files
line 543: au BufNewFile,BufRead *enlightenment/*.cfg^Isetf c
line 544: 
line 545: " Eterm
line 546: au BufNewFile,BufRead *Eterm/*.cfg^I^Isetf eterm
line 547: 
line 548: " Euphoria 3 or 4
line 549: au BufNewFile,BufRead *.eu,*.ew,*.ex,*.exu,*.exw  call s:EuphoriaCheck()
line 550: if has("fname_case")
line 551:    au BufNewFile,BufRead *.EU,*.EW,*.EX,*.EXU,*.EXW  call s:EuphoriaCheck()
line 552: endif
line 553: 
line 554: func! s:EuphoriaCheck()
line 561: 
line 562: " Lynx config files
line 563: au BufNewFile,BufRead lynx.cfg^I^I^Isetf lynx
line 564: 
line 565: " Quake
line 566: au BufNewFile,BufRead *baseq[2-3]/*.cfg,*id1/*.cfg^Isetf quake
line 567: au BufNewFile,BufRead *quake[1-3]/*.cfg^I^I^Isetf quake
line 568: 
line 569: " Quake C
line 570: au BufNewFile,BufRead *.qc^I^I^Isetf c
line 571: 
line 572: " Configure files
line 573: au BufNewFile,BufRead *.cfg^I^I^Isetf cfg
line 574: 
line 575: " Cucumber
line 576: au BufNewFile,BufRead *.feature^I^I^Isetf cucumber
line 577: 
line 578: " Communicating Sequential Processes
line 579: au BufNewFile,BufRead *.csp,*.fdr^I^Isetf csp
line 580: 
line 581: " CUPL logic description and simulation
line 582: au BufNewFile,BufRead *.pld^I^I^Isetf cupl
line 583: au BufNewFile,BufRead *.si^I^I^Isetf cuplsim
line 584: 
line 585: " Debian Control
line 586: au BufNewFile,BufRead */debian/control^I^Isetf debcontrol
line 590: au BufNewFile,BufRead control  if getline(1) =~ '^Source:'|   setf debcontrol| endif
line 591: 
line 592: " Debian Sources.list
line 593: au BufNewFile,BufRead */etc/apt/sources.list^I^Isetf debsources
line 594: au BufNewFile,BufRead */etc/apt/sources.list.d/*.list^Isetf debsources
line 595: 
line 596: " Deny hosts
line 597: au BufNewFile,BufRead denyhosts.conf^I^Isetf denyhosts
line 598: 
line 599: " dnsmasq(8) configuration files
line 600: au BufNewFile,BufRead */etc/dnsmasq.conf^Isetf dnsmasq
line 601: 
line 602: " ROCKLinux package description
line 603: au BufNewFile,BufRead *.desc^I^I^Isetf desc
line 604: 
line 605: " the D language or dtrace
line 606: au BufNewFile,BufRead *.d^I^I^Icall s:DtraceCheck()
line 607: 
line 608: func! s:DtraceCheck()
line 619: 
line 620: " Desktop files
line 621: au BufNewFile,BufRead *.desktop,.directory^Isetf desktop
line 622: 
line 623: " Dict config
line 624: au BufNewFile,BufRead dict.conf,.dictrc^I^Isetf dictconf
line 625: 
line 626: " Dictd config
line 627: au BufNewFile,BufRead dictd.conf^I^Isetf dictdconf
line 628: 
line 629: " Diff files
line 630: au BufNewFile,BufRead *.diff,*.rej,*.patch^Isetf diff
line 631: 
line 632: " Dircolors
line 633: au BufNewFile,BufRead .dir_colors,.dircolors,*/etc/DIR_COLORS^Isetf dircolors
line 634: 
line 635: " Diva (with Skill) or InstallShield
line 641: au BufNewFile,BufRead *.rul if getline(1).getline(2).getline(3).getline(4).getline(5).getline(6) =~? 'InstallShield' |   setf ishd | else |   setf diva | endif
line 642: 
line 643: " DCL (Digital Command Language - vms) or DNS zone file
line 644: au BufNewFile,BufRead *.com^I^I^Icall s:BindzoneCheck('dcl')
line 645: 
line 646: " DOT
line 647: au BufNewFile,BufRead *.dot^I^I^Isetf dot
line 648: 
line 649: " Dylan - lid files
line 650: au BufNewFile,BufRead *.lid^I^I^Isetf dylanlid
line 651: 
line 652: " Dylan - intr files (melange)
line 653: au BufNewFile,BufRead *.intr^I^I^Isetf dylanintr
line 654: 
line 655: " Dylan
line 656: au BufNewFile,BufRead *.dylan^I^I^Isetf dylan
line 657: 
line 658: " Microsoft Module Definition
line 659: au BufNewFile,BufRead *.def^I^I^Isetf def
line 660: 
line 661: " Dracula
line 662: au BufNewFile,BufRead *.drac,*.drc,*lvs,*lpe^Isetf dracula
line 663: 
line 664: " Datascript
line 665: au BufNewFile,BufRead *.ds^I^I^Isetf datascript
line 666: 
line 667: " dsl
line 668: au BufNewFile,BufRead *.dsl^I^I^Isetf dsl
line 669: 
line 670: " DTD (Document Type Definition for XML)
line 671: au BufNewFile,BufRead *.dtd^I^I^Isetf dtd
line 672: 
line 673: " DTS/DSTI (device tree files)
line 674: au BufNewFile,BufRead *.dts,*.dtsi^I^Isetf dts
line 675: 
line 676: " EDIF (*.edf,*.edif,*.edn,*.edo)
line 677: au BufNewFile,BufRead *.ed\(f\|if\|n\|o\)^Isetf edif
line 678: 
line 679: " Embedix Component Description
line 680: au BufNewFile,BufRead *.ecd^I^I^Isetf ecd
line 681: 
line 682: " Eiffel or Specman or Euphoria
line 683: au BufNewFile,BufRead *.e,*.E^I^I^Icall s:FTe()
line 684: 
line 685: " Elinks configuration
line 686: au BufNewFile,BufRead */etc/elinks.conf,*/.elinks/elinks.conf^Isetf elinks
line 687: 
line 688: func! s:FTe()
line 703: 
line 704: " ERicsson LANGuage; Yaws is erlang too
line 705: au BufNewFile,BufRead *.erl,*.hrl,*.yaws^Isetf erlang
line 706: 
line 707: " Elm Filter Rules file
line 708: au BufNewFile,BufRead filter-rules^I^Isetf elmfilt
line 709: 
line 710: " ESMTP rc file
line 711: au BufNewFile,BufRead *esmtprc^I^I^Isetf esmtprc
line 712: 
line 713: " ESQL-C
line 714: au BufNewFile,BufRead *.ec,*.EC^I^I^Isetf esqlc
line 715: 
line 716: " Esterel
line 717: au BufNewFile,BufRead *.strl^I^I^Isetf esterel
line 718: 
line 719: " Essbase script
line 720: au BufNewFile,BufRead *.csc^I^I^Isetf csc
line 721: 
line 722: " Exim
line 723: au BufNewFile,BufRead exim.conf^I^I^Isetf exim
line 724: 
line 725: " Expect
line 726: au BufNewFile,BufRead *.exp^I^I^Isetf expect
line 727: 
line 728: " Exports
line 729: au BufNewFile,BufRead exports^I^I^Isetf exports
line 730: 
line 731: " Falcon
line 732: au BufNewFile,BufRead *.fal^I^I^Isetf falcon
line 733: 
line 734: " Fantom
line 735: au BufNewFile,BufRead *.fan,*.fwt^I^Isetf fan
line 736: 
line 737: " Factor
line 738: au BufNewFile,BufRead *.factor^I^I^Isetf factor
line 739: 
line 740: " Fetchmail RC file
line 741: au BufNewFile,BufRead .fetchmailrc^I^Isetf fetchmail
line 742: 
line 743: " FlexWiki - disabled, because it has side effects when a .wiki file
line 744: " is not actually FlexWiki
line 745: "au BufNewFile,BufRead *.wiki^I^I^Isetf flexwiki
line 746: 
line 747: " Focus Executable
line 748: au BufNewFile,BufRead *.fex,*.focexec^I^Isetf focexec
line 749: 
line 750: " Focus Master file (but not for auto.master)
line 751: au BufNewFile,BufRead auto.master^I^Isetf conf
line 752: au BufNewFile,BufRead *.mas,*.master^I^Isetf master
line 753: 
line 754: " Forth
line 755: au BufNewFile,BufRead *.fs,*.ft^I^I^Isetf forth
line 756: 
line 757: " Reva Forth
line 758: au BufNewFile,BufRead *.frt^I^I^Isetf reva
line 759: 
line 760: " Fortran
line 761: if has("fname_case")
line 762:   au BufNewFile,BufRead *.F,*.FOR,*.FPP,*.FTN,*.F77,*.F90,*.F95,*.F03,*.F08^I setf fortran
line 763: endif
line 764: au BufNewFile,BufRead   *.f,*.for,*.fortran,*.fpp,*.ftn,*.f77,*.f90,*.f95,*.f03,*.f08  setf fortran
line 765: 
line 766: " Framescript
line 767: au BufNewFile,BufRead *.fsl^I^I^Isetf framescript
line 768: 
line 769: " FStab
line 770: au BufNewFile,BufRead fstab,mtab^I^Isetf fstab
line 771: 
line 772: " GDB command files
line 773: au BufNewFile,BufRead .gdbinit^I^I^Isetf gdb
line 774: 
line 775: " GDMO
line 776: au BufNewFile,BufRead *.mo,*.gdmo^I^Isetf gdmo
line 777: 
line 778: " Gedcom
line 779: au BufNewFile,BufRead *.ged,lltxxxxx.txt^Isetf gedcom
line 780: 
line 781: " Git
line 782: au BufNewFile,BufRead COMMIT_EDITMSG^I^Isetf gitcommit
line 783: au BufNewFile,BufRead MERGE_MSG^I^I^Isetf gitcommit
line 784: au BufNewFile,BufRead *.git/config,.gitconfig,.gitmodules setf gitconfig
line 785: au BufNewFile,BufRead *.git/modules/*/config^Isetf gitconfig
line 786: au BufNewFile,BufRead */.config/git/config^Isetf gitconfig
line 787: if !empty($XDG_CONFIG_HOME)
line 788:   au BufNewFile,BufRead $XDG_CONFIG_HOME/git/config^Isetf gitconfig
line 789: endif
line 790: au BufNewFile,BufRead git-rebase-todo^I^Isetf gitrebase
line 794: au BufNewFile,BufRead .msg.[0-9]* if getline(1) =~ '^From.*# This line is ignored.$' |   setf gitsendemail | endif
line 798: au BufNewFile,BufRead *.git/* if getline(1) =~ '^\x\{40\}\>\|^ref: ' |   setf git | endif
line 799: 
line 800: " Gkrellmrc
line 801: au BufNewFile,BufRead gkrellmrc,gkrellmrc_?^Isetf gkrellmrc
line 802: 
line 803: " GP scripts (2.0 and onward)
line 804: au BufNewFile,BufRead *.gp,.gprc^I^Isetf gp
line 805: 
line 806: " GPG
line 807: au BufNewFile,BufRead */.gnupg/options^I^Isetf gpg
line 808: au BufNewFile,BufRead */.gnupg/gpg.conf^I^Isetf gpg
line 809: au BufNewFile,BufRead */usr/*/gnupg/options.skel setf gpg
line 810: 
line 811: " gnash(1) configuration files
line 812: au BufNewFile,BufRead gnashrc,.gnashrc,gnashpluginrc,.gnashpluginrc setf gnash
line 813: 
line 814: " Gitolite
line 815: au BufNewFile,BufRead gitolite.conf^I^Isetf gitolite
line 816: au BufNewFile,BufRead */gitolite-admin/conf/*^Icall s:StarSetf('gitolite')
line 817: au BufNewFile,BufRead {,.}gitolite.rc,example.gitolite.rc^Isetf perl
line 818: 
line 819: " Gnuplot scripts
line 820: au BufNewFile,BufRead *.gpi^I^I^Isetf gnuplot
line 821: 
line 822: " Go (Google)
line 823: au BufNewFile,BufRead *.go^I^I^Isetf go
line 824: 
line 825: " GrADS scripts
line 826: au BufNewFile,BufRead *.gs^I^I^Isetf grads
line 827: 
line 828: " Gretl
line 829: au BufNewFile,BufRead *.gretl^I^I^Isetf gretl
line 830: 
line 831: " Groovy
line 832: au BufNewFile,BufRead *.gradle,*.groovy^I^Isetf groovy
line 833: 
line 834: " GNU Server Pages
line 835: au BufNewFile,BufRead *.gsp^I^I^Isetf gsp
line 836: 
line 837: " Group file
line 838: au BufNewFile,BufRead */etc/group,*/etc/group-,*/etc/group.edit,*/etc/gshadow,*/etc/gshadow-,*/etc/gshadow.edit,*/var/backups/group.bak,*/var/backups/gshadow.bak  setf group
line 839: 
line 840: " GTK RC
line 841: au BufNewFile,BufRead .gtkrc,gtkrc^I^Isetf gtkrc
line 842: 
line 843: " Haml
line 844: au BufNewFile,BufRead *.haml^I^I^Isetf haml
line 845: 
line 846: " Hamster Classic | Playground files
line 847: au BufNewFile,BufRead *.hsc,*.hsm^I^Isetf hamster
line 848: 
line 849: " Haskell
line 850: au BufNewFile,BufRead *.hs,*.hs-boot^I^Isetf haskell
line 851: au BufNewFile,BufRead *.lhs^I^I^Isetf lhaskell
line 852: au BufNewFile,BufRead *.chs^I^I^Isetf chaskell
line 853: 
line 854: " Haste
line 855: au BufNewFile,BufRead *.ht^I^I^Isetf haste
line 856: au BufNewFile,BufRead *.htpp^I^I^Isetf hastepreproc
line 857: 
line 858: " Hercules
line 859: au BufNewFile,BufRead *.vc,*.ev,*.rs,*.sum,*.errsum^Isetf hercules
line 860: 
line 861: " HEX (Intel)
line 862: au BufNewFile,BufRead *.hex,*.h32^I^Isetf hex
line 863: 
line 864: " Tilde (must be before HTML)
line 865: au BufNewFile,BufRead *.t.html^I^I^Isetf tilde
line 866: 
line 867: " HTML (.shtml and .stm for server side)
line 868: au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm  call s:FThtml()
line 869: 
line 870: " Distinguish between HTML, XHTML and Django
line 871: func! s:FThtml()
line 886: 
line 887: " HTML with Ruby - eRuby
line 888: au BufNewFile,BufRead *.erb,*.rhtml^I^Isetf eruby
line 889: 
line 890: " HTML with M4
line 891: au BufNewFile,BufRead *.html.m4^I^I^Isetf htmlm4
line 892: 
line 893: " HTML Cheetah template
line 894: au BufNewFile,BufRead *.tmpl^I^I^Isetf htmlcheetah
line 895: 
line 896: " Host config
line 897: au BufNewFile,BufRead */etc/host.conf^I^Isetf hostconf
line 898: 
line 899: " Hosts access
line 900: au BufNewFile,BufRead */etc/hosts.allow,*/etc/hosts.deny  setf hostsaccess
line 901: 
line 902: " Hyper Builder
line 903: au BufNewFile,BufRead *.hb^I^I^Isetf hb
line 904: 
line 905: " Httest
line 906: au BufNewFile,BufRead *.htt,*.htb^I^Isetf httest
line 907: 
line 908: " Icon
line 909: au BufNewFile,BufRead *.icn^I^I^Isetf icon
line 910: 
line 911: " IDL (Interface Description Language)
line 912: au BufNewFile,BufRead *.idl^I^I^Icall s:FTidl()
line 913: 
line 914: " Distinguish between standard IDL and MS-IDL
line 915: func! s:FTidl()
line 926: 
line 927: " Microsoft IDL (Interface Description Language)  Also *.idl
line 928: " MOF = WMI (Windows Management Instrumentation) Managed Object Format
line 929: au BufNewFile,BufRead *.odl,*.mof^I^Isetf msidl
line 930: 
line 931: " Icewm menu
line 932: au BufNewFile,BufRead */.icewm/menu^I^Isetf icemenu
line 933: 
line 934: " Indent profile (must come before IDL *.pro!)
line 935: au BufNewFile,BufRead .indent.pro^I^Isetf indent
line 936: au BufNewFile,BufRead indent.pro^I^Icall s:ProtoCheck('indent')
line 937: 
line 938: " IDL (Interactive Data Language)
line 939: au BufNewFile,BufRead *.pro^I^I^Icall s:ProtoCheck('idlang')
line 940: 
line 941: " Distinguish between "default" and Cproto prototype file. */
line 942: func! s:ProtoCheck(default)
line 954: 
line 955: 
line 956: " Indent RC
line 957: au BufNewFile,BufRead indentrc^I^I^Isetf indent
line 958: 
line 959: " Inform
line 960: au BufNewFile,BufRead *.inf,*.INF^I^Isetf inform
line 961: 
line 962: " Initng
line 963: au BufNewFile,BufRead */etc/initng/*/*.i,*.ii^Isetf initng
line 964: 
line 965: " Innovation Data Processing
line 966: au BufRead,BufNewFile upstream.dat\c,upstream.*.dat\c,*.upstream.dat\c ^Isetf upstreamdat
line 967: au BufRead,BufNewFile upstream.log\c,upstream.*.log\c,*.upstream.log\c ^Isetf upstreamlog
line 968: au BufRead,BufNewFile upstreaminstall.log\c,upstreaminstall.*.log\c,*.upstreaminstall.log\c setf upstreaminstalllog
line 969: au BufRead,BufNewFile usserver.log\c,usserver.*.log\c,*.usserver.log\c ^Isetf usserverlog
line 970: au BufRead,BufNewFile usw2kagt.log\c,usw2kagt.*.log\c,*.usw2kagt.log\c ^Isetf usw2kagtlog
line 971: 
line 972: " Ipfilter
line 973: au BufNewFile,BufRead ipf.conf,ipf6.conf,ipf.rules^Isetf ipfilter
line 974: 
line 975: " Informix 4GL (source - canonical, include file, I4GL+M4 preproc.)
line 976: au BufNewFile,BufRead *.4gl,*.4gh,*.m4gl^Isetf fgl
line 977: 
line 978: " .INI file for MSDOS
line 979: au BufNewFile,BufRead *.ini^I^I^Isetf dosini
line 980: 
line 981: " SysV Inittab
line 982: au BufNewFile,BufRead inittab^I^I^Isetf inittab
line 983: 
line 984: " Inno Setup
line 985: au BufNewFile,BufRead *.iss^I^I^Isetf iss
line 986: 
line 987: " J
line 988: au BufNewFile,BufRead *.ijs^I^I^Isetf j
line 989: 
line 990: " JAL
line 991: au BufNewFile,BufRead *.jal,*.JAL^I^Isetf jal
line 992: 
line 993: " Jam
line 994: au BufNewFile,BufRead *.jpl,*.jpr^I^Isetf jam
line 995: 
line 996: " Java
line 997: au BufNewFile,BufRead *.java,*.jav^I^Isetf java
line 998: 
line 999: " JavaCC
line 1000: au BufNewFile,BufRead *.jj,*.jjt^I^Isetf javacc
line 1001: 
line 1002: " JavaScript, ECMAScript
line 1003: au BufNewFile,BufRead *.js,*.javascript,*.es,*.jsx   setf javascript
line 1004: 
line 1005: " Java Server Pages
line 1006: au BufNewFile,BufRead *.jsp^I^I^Isetf jsp
line 1007: 
line 1008: " Java Properties resource file (note: doesn't catch font.properties.pl)
line 1009: au BufNewFile,BufRead *.properties,*.properties_??,*.properties_??_??^Isetf jproperties
line 1010: au BufNewFile,BufRead *.properties_??_??_*^Icall s:StarSetf('jproperties')
line 1011: 
line 1012: " Jess
line 1013: au BufNewFile,BufRead *.clp^I^I^Isetf jess
line 1014: 
line 1015: " Jgraph
line 1016: au BufNewFile,BufRead *.jgr^I^I^Isetf jgraph
line 1017: 
line 1018: " Jovial
line 1019: au BufNewFile,BufRead *.jov,*.j73,*.jovial^Isetf jovial
line 1020: 
line 1021: " JSON
line 1022: au BufNewFile,BufRead *.json,*.jsonp^I^Isetf json
line 1023: 
line 1024: " Kixtart
line 1025: au BufNewFile,BufRead *.kix^I^I^Isetf kix
line 1026: 
line 1027: " Kimwitu[++]
line 1028: au BufNewFile,BufRead *.k^I^I^Isetf kwt
line 1029: 
line 1030: " Kivy
line 1031: au BufNewFile,BufRead *.kv^I^I^Isetf kivy
line 1032: 
line 1033: " KDE script
line 1034: au BufNewFile,BufRead *.ks^I^I^Isetf kscript
line 1035: 
line 1036: " Kconfig
line 1037: au BufNewFile,BufRead Kconfig,Kconfig.debug^Isetf kconfig
line 1038: 
line 1039: " Lace (ISE)
line 1040: au BufNewFile,BufRead *.ace,*.ACE^I^Isetf lace
line 1041: 
line 1042: " Latte
line 1043: au BufNewFile,BufRead *.latte,*.lte^I^Isetf latte
line 1044: 
line 1045: " Limits
line 1046: au BufNewFile,BufRead */etc/limits,*/etc/*limits.conf,*/etc/*limits.d/*.conf^Isetf limits
line 1047: 
line 1048: " LambdaProlog (*.mod too, see Modsim)
line 1049: au BufNewFile,BufRead *.sig^I^I^Isetf lprolog
line 1050: 
line 1051: " LDAP LDIF
line 1052: au BufNewFile,BufRead *.ldif^I^I^Isetf ldif
line 1053: 
line 1054: " Ld loader
line 1055: au BufNewFile,BufRead *.ld^I^I^Isetf ld
line 1056: 
line 1057: " Less
line 1058: au BufNewFile,BufRead *.less^I^I^Isetf less
line 1059: 
line 1060: " Lex
line 1061: au BufNewFile,BufRead *.lex,*.l,*.lxx,*.l++^Isetf lex
line 1062: 
line 1063: " Libao
line 1064: au BufNewFile,BufRead */etc/libao.conf,*/.libao^Isetf libao
line 1065: 
line 1066: " Libsensors
line 1067: au BufNewFile,BufRead */etc/sensors.conf,*/etc/sensors3.conf^Isetf sensors
line 1068: 
line 1069: " LFTP
line 1070: au BufNewFile,BufRead lftp.conf,.lftprc,*lftp/rc^Isetf lftp
line 1071: 
line 1072: " Lifelines (or Lex for C++!)
line 1073: au BufNewFile,BufRead *.ll^I^I^Isetf lifelines
line 1074: 
line 1075: " Lilo: Linux loader
line 1076: au BufNewFile,BufRead lilo.conf^I^I^Isetf lilo
line 1077: 
line 1078: " Lisp (*.el = ELisp, *.cl = Common Lisp, *.jl = librep Lisp)
line 1079: if has("fname_case")
line 1080:   au BufNewFile,BufRead *.lsp,*.lisp,*.el,*.cl,*.jl,*.L,.emacs,.sawfishrc setf lisp
line 1081: else
line 1082:   au BufNewFile,BufRead *.lsp,*.lisp,*.el,*.cl,*.jl,.emacs,.sawfishrc setf lisp
line 1083: endif
line 1084: 
line 1085: " SBCL implementation of Common Lisp
line 1086: au BufNewFile,BufRead sbclrc,.sbclrc^I^Isetf lisp
line 1087: 
line 1088: " Liquid
line 1089: au BufNewFile,BufRead *.liquid^I^I^Isetf liquid
line 1090: 
line 1091: " Lite
line 1092: au BufNewFile,BufRead *.lite,*.lt^I^Isetf lite
line 1093: 
line 1094: " LiteStep RC files
line 1095: au BufNewFile,BufRead */LiteStep/*/*.rc^I^Isetf litestep
line 1096: 
line 1097: " Login access
line 1098: au BufNewFile,BufRead */etc/login.access^Isetf loginaccess
line 1099: 
line 1100: " Login defs
line 1101: au BufNewFile,BufRead */etc/login.defs^I^Isetf logindefs
line 1102: 
line 1103: " Logtalk
line 1104: au BufNewFile,BufRead *.lgt^I^I^Isetf logtalk
line 1105: 
line 1106: " LOTOS
line 1107: au BufNewFile,BufRead *.lot,*.lotos^I^Isetf lotos
line 1108: 
line 1109: " Lout (also: *.lt)
line 1110: au BufNewFile,BufRead *.lou,*.lout^I^Isetf lout
line 1111: 
line 1112: " Lua
line 1113: au BufNewFile,BufRead *.lua^I^I^Isetf lua
line 1114: 
line 1115: " Luarocks
line 1116: au BufNewFile,BufRead *.rockspec^I^Isetf lua
line 1117: 
line 1118: " Linden Scripting Language (Second Life)
line 1119: au BufNewFile,BufRead *.lsl^I^I^Isetf lsl
line 1120: 
line 1121: " Lynx style file (or LotusScript!)
line 1122: au BufNewFile,BufRead *.lss^I^I^Isetf lss
line 1123: 
line 1124: " M4
line 1126: au BufNewFile,BufRead *.m4 if expand("<afile>") !~? 'html.m4$\|fvwm2rc' | setf m4 | endif
line 1127: 
line 1128: " MaGic Point
line 1129: au BufNewFile,BufRead *.mgp^I^I^Isetf mgp
line 1130: 
line 1131: " Mail (for Elm, trn, mutt, muttng, rn, slrn)
line 1132: au BufNewFile,BufRead snd.\d\+,.letter,.letter.\d\+,.followup,.article,.article.\d\+,pico.\d\+,mutt{ng,}-*-\w\+,mutt[[:alnum:]_-]\\\{6\},ae\d\+.txt,/tmp/SLRN[0-9A-Z.]\+,*.eml setf mail
line 1133: 
line 1134: " Mail aliases
line 1135: au BufNewFile,BufRead */etc/mail/aliases,*/etc/aliases^Isetf mailaliases
line 1136: 
line 1137: " Mailcap configuration file
line 1138: au BufNewFile,BufRead .mailcap,mailcap^I^Isetf mailcap
line 1139: 
line 1140: " Makefile
line 1141: au BufNewFile,BufRead *[mM]akefile,*.mk,*.mak,*.dsp setf make
line 1142: 
line 1143: " MakeIndex
line 1144: au BufNewFile,BufRead *.ist,*.mst^I^Isetf ist
line 1145: 
line 1146: " Mallard
line 1147: au BufNewFile,BufRead *.page^I^I^Isetf mallard
line 1148: 
line 1149: " Manpage
line 1150: au BufNewFile,BufRead *.man^I^I^Isetf man
line 1151: 
line 1152: " Man config
line 1153: au BufNewFile,BufRead */etc/man.conf,man.config^Isetf manconf
line 1154: 
line 1155: " Maple V
line 1156: au BufNewFile,BufRead *.mv,*.mpl,*.mws^I^Isetf maple
line 1157: 
line 1158: " Map (UMN mapserver config file)
line 1159: au BufNewFile,BufRead *.map^I^I^Isetf map
line 1160: 
line 1161: " Markdown
line 1162: au BufNewFile,BufRead *.markdown,*.mdown,*.mkd,*.mkdn,*.mdwn,*.md  setf markdown
line 1163: 
line 1164: " Mason
line 1165: au BufNewFile,BufRead *.mason,*.mhtml,*.comp^Isetf mason
line 1166: 
line 1167: " Matlab or Objective C
line 1168: au BufNewFile,BufRead *.m^I^I^Icall s:FTm()
line 1169: 
line 1170: func! s:FTm()
line 1194: 
line 1195: " Mathematica notebook
line 1196: au BufNewFile,BufRead *.nb^I^I^Isetf mma
line 1197: 
line 1198: " Maya Extension Language
line 1199: au BufNewFile,BufRead *.mel^I^I^Isetf mel
line 1200: 
line 1201: " Mercurial (hg) commit file
line 1202: au BufNewFile,BufRead hg-editor-*.txt^I^Isetf hgcommit
line 1203: 
line 1204: " Mercurial config (looks like generic config file)
line 1205: au BufNewFile,BufRead *.hgrc,*hgrc^I^Isetf cfg
line 1206: 
line 1207: " Messages (logs mostly)
line 1208: au BufNewFile,BufRead */log/{auth,cron,daemon,debug,kern,lpr,mail,messages,news/news,syslog,user}{,.log,.err,.info,.warn,.crit,.notice}{,.[0-9]*,-[0-9]*} setf messages
line 1209: 
line 1210: " Metafont
line 1211: au BufNewFile,BufRead *.mf^I^I^Isetf mf
line 1212: 
line 1213: " MetaPost
line 1214: au BufNewFile,BufRead *.mp^I^I^Isetf mp
line 1215: 
line 1216: " MGL
line 1217: au BufNewFile,BufRead *.mgl^I^I^Isetf mgl
line 1218: 
line 1219: " MIX - Knuth assembly
line 1220: au BufNewFile,BufRead *.mix,*.mixal^I^Isetf mix
line 1221: 
line 1222: " MMIX or VMS makefile
line 1223: au BufNewFile,BufRead *.mms^I^I^Icall s:FTmms()
line 1224: 
line 1225: " Symbian meta-makefile definition (MMP)
line 1226: au BufNewFile,BufRead *.mmp^I^I^Isetf mmp
line 1227: 
line 1228: func! s:FTmms()
line 1244: 
line 1245: 
line 1246: " Modsim III (or LambdaProlog)
line 1252: au BufNewFile,BufRead *.mod if getline(1) =~ '\<module\>' |   setf lprolog | else |   setf modsim3 | endif
line 1253: 
line 1254: " Modula 2  (.md removed in favor of Markdown)
line 1255: au BufNewFile,BufRead *.m2,*.DEF,*.MOD,*.mi^Isetf modula2
line 1256: 
line 1257: " Modula 3 (.m3, .i3, .mg, .ig)
line 1258: au BufNewFile,BufRead *.[mi][3g]^I^Isetf modula3
line 1259: 
line 1260: " Monk
line 1261: au BufNewFile,BufRead *.isc,*.monk,*.ssc,*.tsc^Isetf monk
line 1262: 
line 1263: " MOO
line 1264: au BufNewFile,BufRead *.moo^I^I^Isetf moo
line 1265: 
line 1266: " Modconf
line 1267: au BufNewFile,BufRead */etc/modules.conf,*/etc/modules,*/etc/conf.modules setf modconf
line 1268: 
line 1269: " Mplayer config
line 1270: au BufNewFile,BufRead mplayer.conf,*/.mplayer/config^Isetf mplayerconf
line 1271: 
line 1272: " Motorola S record
line 1273: au BufNewFile,BufRead *.s19,*.s28,*.s37,*.mot,*.srec^Isetf srec
line 1274: 
line 1275: " Mrxvtrc
line 1276: au BufNewFile,BufRead mrxvtrc,.mrxvtrc^I^Isetf mrxvtrc
line 1277: 
line 1278: " Msql
line 1279: au BufNewFile,BufRead *.msql^I^I^Isetf msql
line 1280: 
line 1281: " Mysql
line 1282: au BufNewFile,BufRead *.mysql^I^I^Isetf mysql
line 1283: 
line 1284: " Mutt setup files (must be before catch *.rc)
line 1285: au BufNewFile,BufRead */etc/Muttrc.d/*^I^Icall s:StarSetf('muttrc')
line 1286: 
line 1287: " M$ Resource files
line 1288: au BufNewFile,BufRead *.rc,*.rch^I^Isetf rc
line 1289: 
line 1290: " MuPAD source
line 1291: au BufRead,BufNewFile *.mu^I^I^Isetf mupad
line 1292: 
line 1293: " Mush
line 1294: au BufNewFile,BufRead *.mush^I^I^Isetf mush
line 1295: 
line 1296: " Mutt setup file (also for Muttng)
line 1297: au BufNewFile,BufRead Mutt{ng,}rc^I^Isetf muttrc
line 1298: 
line 1299: " Nano
line 1300: au BufNewFile,BufRead */etc/nanorc,*.nanorc  ^Isetf nanorc
line 1301: 
line 1302: " Nastran input/DMAP
line 1303: "au BufNewFile,BufRead *.dat^I^I^Isetf nastran
line 1304: 
line 1305: " Natural
line 1306: au BufNewFile,BufRead *.NS[ACGLMNPS]^I^Isetf natural
line 1307: 
line 1308: " Netrc
line 1309: au BufNewFile,BufRead .netrc^I^I^Isetf netrc
line 1310: 
line 1311: " Ninja file
line 1312: au BufNewFile,BufRead *.ninja^I^I^Isetf ninja
line 1313: 
line 1314: " Novell netware batch files
line 1315: au BufNewFile,BufRead *.ncf^I^I^Isetf ncf
line 1316: 
line 1317: " Nroff/Troff (*.ms and *.t are checked below)
line 1321: au BufNewFile,BufRead *.me if expand("<afile>") != "read.me" && expand("<afile>") != "click.me" |   setf nroff | endif
line 1322: au BufNewFile,BufRead *.tr,*.nr,*.roff,*.tmac,*.mom^Isetf nroff
line 1323: au BufNewFile,BufRead *.[1-9]^I^I^Icall s:FTnroff()
line 1324: 
line 1325: " This function checks if one of the first five lines start with a dot.  In
line 1326: " that case it is probably an nroff file: 'filetype' is set and 1 is returned.
line 1327: func! s:FTnroff()
line 1334: 
line 1335: " Nroff or Objective C++
line 1336: au BufNewFile,BufRead *.mm^I^I^Icall s:FTmm()
line 1337: 
line 1338: func! s:FTmm()
line 1350: 
line 1351: " Not Quite C
line 1352: au BufNewFile,BufRead *.nqc^I^I^Isetf nqc
line 1353: 
line 1354: " NSIS
line 1355: au BufNewFile,BufRead *.nsi,*.nsh^I^Isetf nsis
line 1356: 
line 1357: " OCAML
line 1358: au BufNewFile,BufRead *.ml,*.mli,*.mll,*.mly,.ocamlinit^Isetf ocaml
line 1359: 
line 1360: " Occam
line 1361: au BufNewFile,BufRead *.occ^I^I^Isetf occam
line 1362: 
line 1363: " Omnimark
line 1364: au BufNewFile,BufRead *.xom,*.xin^I^Isetf omnimark
line 1365: 
line 1366: " OpenROAD
line 1367: au BufNewFile,BufRead *.or^I^I^Isetf openroad
line 1368: 
line 1369: " OPL
line 1370: au BufNewFile,BufRead *.[Oo][Pp][Ll]^I^Isetf opl
line 1371: 
line 1372: " Oracle config file
line 1373: au BufNewFile,BufRead *.ora^I^I^Isetf ora
line 1374: 
line 1375: " Packet filter conf
line 1376: au BufNewFile,BufRead pf.conf^I^I^Isetf pf
line 1377: 
line 1378: " Pam conf
line 1379: au BufNewFile,BufRead */etc/pam.conf^I^Isetf pamconf
line 1380: 
line 1381: " PApp
line 1382: au BufNewFile,BufRead *.papp,*.pxml,*.pxsl^Isetf papp
line 1383: 
line 1384: " Password file
line 1385: au BufNewFile,BufRead */etc/passwd,*/etc/passwd-,*/etc/passwd.edit,*/etc/shadow,*/etc/shadow-,*/etc/shadow.edit,*/var/backups/passwd.bak,*/var/backups/shadow.bak setf passwd
line 1386: 
line 1387: " Pascal (also *.p)
line 1388: au BufNewFile,BufRead *.pas^I^I^Isetf pascal
line 1389: 
line 1390: " Delphi project file
line 1391: au BufNewFile,BufRead *.dpr^I^I^Isetf pascal
line 1392: 
line 1393: " PDF
line 1394: au BufNewFile,BufRead *.pdf^I^I^Isetf pdf
line 1395: 
line 1396: " Perl
line 1397: if has("fname_case")
line 1398:   au BufNewFile,BufRead *.pl,*.PL^I^Icall s:FTpl()
line 1399: else
line 1400:   au BufNewFile,BufRead *.pl^I^I^Icall s:FTpl()
line 1401: endif
line 1402: au BufNewFile,BufRead *.plx,*.al^I^Isetf perl
line 1403: au BufNewFile,BufRead *.p6,*.pm6,*.pl6^I^Isetf perl6
line 1404: 
line 1405: func! s:FTpl()
line 1419: 
line 1420: " Perl, XPM or XPM2
line 1428: au BufNewFile,BufRead *.pm if getline(1) =~ "XPM2" |   setf xpm2 | elseif getline(1) =~ "XPM" |   setf xpm | else |   setf perl | endif
line 1429: 
line 1430: " Perl POD
line 1431: au BufNewFile,BufRead *.pod^I^I^Isetf pod
line 1432: au BufNewFile,BufRead *.pod6^I^I^Isetf pod6
line 1433: 
line 1434: " Php, php3, php4, etc.
line 1435: " Also Phtml (was used for PHP 2 in the past)
line 1436: " Also .ctp for Cake template file
line 1437: au BufNewFile,BufRead *.php,*.php\d,*.phtml,*.ctp^Isetf php
line 1438: 
line 1439: " Pike
line 1440: au BufNewFile,BufRead *.pike,*.lpc,*.ulpc,*.pmod setf pike
line 1441: 
line 1442: " Pinfo config
line 1443: au BufNewFile,BufRead */etc/pinforc,*/.pinforc^Isetf pinfo
line 1444: 
line 1445: " Palm Resource compiler
line 1446: au BufNewFile,BufRead *.rcp^I^I^Isetf pilrc
line 1447: 
line 1448: " Pine config
line 1449: au BufNewFile,BufRead .pinerc,pinerc,.pinercex,pinercex^I^Isetf pine
line 1450: 
line 1451: " PL/1, PL/I
line 1452: au BufNewFile,BufRead *.pli,*.pl1^I^Isetf pli
line 1453: 
line 1454: " PL/M (also: *.inp)
line 1455: au BufNewFile,BufRead *.plm,*.p36,*.pac^I^Isetf plm
line 1456: 
line 1457: " PL/SQL
line 1458: au BufNewFile,BufRead *.pls,*.plsql^I^Isetf plsql
line 1459: 
line 1460: " PLP
line 1461: au BufNewFile,BufRead *.plp^I^I^Isetf plp
line 1462: 
line 1463: " PO and PO template (GNU gettext)
line 1464: au BufNewFile,BufRead *.po,*.pot^I^Isetf po
line 1465: 
line 1466: " Postfix main config
line 1467: au BufNewFile,BufRead main.cf^I^I^Isetf pfmain
line 1468: 
line 1469: " PostScript (+ font files, encapsulated PostScript, Adobe Illustrator)
line 1470: au BufNewFile,BufRead *.ps,*.pfa,*.afm,*.eps,*.epsf,*.epsi,*.ai^I  setf postscr
line 1471: 
line 1472: " PostScript Printer Description
line 1473: au BufNewFile,BufRead *.ppd^I^I^Isetf ppd
line 1474: 
line 1475: " Povray
line 1476: au BufNewFile,BufRead *.pov^I^I^Isetf pov
line 1477: 
line 1478: " Povray configuration
line 1479: au BufNewFile,BufRead .povrayrc^I^I^Isetf povini
line 1480: 
line 1481: " Povray, PHP or assembly
line 1482: au BufNewFile,BufRead *.inc^I^I^Icall s:FTinc()
line 1483: 
line 1484: func! s:FTinc()
line 1505: 
line 1506: " Printcap and Termcap
line 1508: au BufNewFile,BufRead *printcap let b:ptcap_type = "print" | setf ptcap
line 1510: au BufNewFile,BufRead *termcap let b:ptcap_type = "term" | setf ptcap
line 1511: 
line 1512: " PCCTS / ANTRL
line 1513: "au BufNewFile,BufRead *.g^I^I^Isetf antrl
line 1514: au BufNewFile,BufRead *.g^I^I^Isetf pccts
line 1515: 
line 1516: " PPWizard
line 1517: au BufNewFile,BufRead *.it,*.ih^I^I^Isetf ppwiz
line 1518: 
line 1519: " Obj 3D file format
line 1520: " TODO: is there a way to avoid MS-Windows Object files?
line 1521: au BufNewFile,BufRead *.obj^I^I^Isetf obj
line 1522: 
line 1523: " Oracle Pro*C/C++
line 1524: au BufNewFile,BufRead *.pc^I^I^Isetf proc
line 1525: 
line 1526: " Privoxy actions file
line 1527: au BufNewFile,BufRead *.action^I^I^Isetf privoxy
line 1528: 
line 1529: " Procmail
line 1530: au BufNewFile,BufRead .procmail,.procmailrc^Isetf procmail
line 1531: 
line 1532: " Progress or CWEB
line 1533: au BufNewFile,BufRead *.w^I^I^Icall s:FTprogress_cweb()
line 1534: 
line 1535: func! s:FTprogress_cweb()
line 1546: 
line 1547: " Progress or assembly
line 1548: au BufNewFile,BufRead *.i^I^I^Icall s:FTprogress_asm()
line 1549: 
line 1550: func! s:FTprogress_asm()
line 1572: 
line 1573: " Progress or Pascal
line 1574: au BufNewFile,BufRead *.p^I^I^Icall s:FTprogress_pascal()
line 1575: 
line 1576: func! s:FTprogress_pascal()
line 1600: 
line 1601: 
line 1602: " Software Distributor Product Specification File (POSIX 1387.2-1995)
line 1603: au BufNewFile,BufRead *.psf^I^I^Isetf psf
line 1607: au BufNewFile,BufRead INDEX,INFO if getline(1) =~ '^\s*\(distribution\|installed_software\|root\|bundle\|product\)\s*$' |   setf psf | endif
line 1608: 
line 1609: " Prolog
line 1610: au BufNewFile,BufRead *.pdb^I^I^Isetf prolog
line 1611: 
line 1612: " Promela
line 1613: au BufNewFile,BufRead *.pml^I^I^Isetf promela
line 1614: 
line 1615: " Google protocol buffers
line 1616: au BufNewFile,BufRead *.proto^I^I^Isetf proto
line 1617: 
line 1618: " Protocols
line 1619: au BufNewFile,BufRead */etc/protocols^I^Isetf protocols
line 1620: 
line 1621: " Pyrex
line 1622: au BufNewFile,BufRead *.pyx,*.pxd^I^Isetf pyrex
line 1623: 
line 1624: " Python
line 1625: au BufNewFile,BufRead *.py,*.pyw^I^Isetf python
line 1626: 
line 1627: " Quixote (Python-based web framework)
line 1628: au BufNewFile,BufRead *.ptl^I^I^Isetf python
line 1629: 
line 1630: " Radiance
line 1631: au BufNewFile,BufRead *.rad,*.mat^I^Isetf radiance
line 1632: 
line 1633: " Ratpoison config/command files
line 1634: au BufNewFile,BufRead .ratpoisonrc,ratpoisonrc^Isetf ratpoison
line 1635: 
line 1636: " RCS file
line 1637: au BufNewFile,BufRead *\,v^I^I^Isetf rcs
line 1638: 
line 1639: " Readline
line 1640: au BufNewFile,BufRead .inputrc,inputrc^I^Isetf readline
line 1641: 
line 1642: " Registry for MS-Windows
line 1644: au BufNewFile,BufRead *.reg if getline(1) =~? '^REGEDIT[0-9]*\s*$\|^Windows Registry Editor Version \d*\.\d*\s*$' | setf registry | endif
line 1645: 
line 1646: " Renderman Interface Bytestream
line 1647: au BufNewFile,BufRead *.rib^I^I^Isetf rib
line 1648: 
line 1649: " Rexx
line 1650: au BufNewFile,BufRead *.rex,*.orx,*.rxo,*.rxj,*.jrexx,*.rexxj,*.rexx,*.testGroup,*.testUnit^Isetf rexx
line 1651: 
line 1652: " R (Splus)
line 1653: if has("fname_case")
line 1654:   au BufNewFile,BufRead *.s,*.S^I^I^Isetf r
line 1655: else
line 1656:   au BufNewFile,BufRead *.s^I^I^Isetf r
line 1657: endif
line 1658: 
line 1659: " R Help file
line 1660: if has("fname_case")
line 1661:   au BufNewFile,BufRead *.rd,*.Rd^I^Isetf rhelp
line 1662: else
line 1663:   au BufNewFile,BufRead *.rd^I^I^Isetf rhelp
line 1664: endif
line 1665: 
line 1666: " R noweb file
line 1667: if has("fname_case")
line 1668:   au BufNewFile,BufRead *.Rnw,*.rnw,*.Snw,*.snw^I^Isetf rnoweb
line 1669: else
line 1670:   au BufNewFile,BufRead *.rnw,*.snw^I^I^Isetf rnoweb
line 1671: endif
line 1672: 
line 1673: " R Markdown file
line 1674: if has("fname_case")
line 1675:   au BufNewFile,BufRead *.Rmd,*.rmd,*.Smd,*.smd^I^Isetf rmd
line 1676: else
line 1677:   au BufNewFile,BufRead *.rmd,*.smd^I^I^Isetf rmd
line 1678: endif
line 1679: 
line 1680: " R reStructuredText file
line 1681: if has("fname_case")
line 1682:   au BufNewFile,BufRead *.Rrst,*.rrst,*.Srst,*.srst^Isetf rrst
line 1683: else
line 1684:   au BufNewFile,BufRead *.rrst,*.srst^I^I^Isetf rrst
line 1685: endif
line 1686: 
line 1687: " Rexx, Rebol or R
line 1688: au BufNewFile,BufRead *.r,*.R^I^I^Icall s:FTr()
line 1689: 
line 1690: func! s:FTr()
line 1722: 
line 1723: " Remind
line 1724: au BufNewFile,BufRead .reminders,*.remind,*.rem^I^Isetf remind
line 1725: 
line 1726: " Resolv.conf
line 1727: au BufNewFile,BufRead resolv.conf^I^Isetf resolv
line 1728: 
line 1729: " Relax NG Compact
line 1730: au BufNewFile,BufRead *.rnc^I^I^Isetf rnc
line 1731: 
line 1732: " Relax NG XML
line 1733: au BufNewFile,BufRead *.rng^I^I^Isetf rng
line 1734: 
line 1735: " RPL/2
line 1736: au BufNewFile,BufRead *.rpl^I^I^Isetf rpl
line 1737: 
line 1738: " Robots.txt
line 1739: au BufNewFile,BufRead robots.txt^I^Isetf robots
line 1740: 
line 1741: " Rpcgen
line 1742: au BufNewFile,BufRead *.x^I^I^Isetf rpcgen
line 1743: 
line 1744: " reStructuredText Documentation Format
line 1745: au BufNewFile,BufRead *.rst^I^I^Isetf rst
line 1746: 
line 1747: " RTF
line 1748: au BufNewFile,BufRead *.rtf^I^I^Isetf rtf
line 1749: 
line 1750: " Interactive Ruby shell
line 1751: au BufNewFile,BufRead .irbrc,irbrc^I^Isetf ruby
line 1752: 
line 1753: " Ruby
line 1754: au BufNewFile,BufRead *.rb,*.rbw^I^Isetf ruby
line 1755: 
line 1756: " RubyGems
line 1757: au BufNewFile,BufRead *.gemspec^I^I^Isetf ruby
line 1758: 
line 1759: " Rackup
line 1760: au BufNewFile,BufRead *.ru^I^I^Isetf ruby
line 1761: 
line 1762: " Bundler
line 1763: au BufNewFile,BufRead Gemfile^I^I^Isetf ruby
line 1764: 
line 1765: " Ruby on Rails
line 1766: au BufNewFile,BufRead *.builder,*.rxml,*.rjs^Isetf ruby
line 1767: 
line 1768: " Rantfile and Rakefile is like Ruby
line 1769: au BufNewFile,BufRead [rR]antfile,*.rant,[rR]akefile,*.rake^Isetf ruby
line 1770: 
line 1771: " S-lang (or shader language, or SmallLisp)
line 1772: au BufNewFile,BufRead *.sl^I^I^Isetf slang
line 1773: 
line 1774: " Samba config
line 1775: au BufNewFile,BufRead smb.conf^I^I^Isetf samba
line 1776: 
line 1777: " SAS script
line 1778: au BufNewFile,BufRead *.sas^I^I^Isetf sas
line 1779: 
line 1780: " Sass
line 1781: au BufNewFile,BufRead *.sass^I^I^Isetf sass
line 1782: 
line 1783: " Sather
line 1784: au BufNewFile,BufRead *.sa^I^I^Isetf sather
line 1785: 
line 1786: " Scilab
line 1787: au BufNewFile,BufRead *.sci,*.sce^I^Isetf scilab
line 1788: 
line 1789: " SCSS
line 1790: au BufNewFile,BufRead *.scss^I^I^Isetf scss
line 1791: 
line 1792: " SD: Streaming Descriptors
line 1793: au BufNewFile,BufRead *.sd^I^I^Isetf sd
line 1794: 
line 1795: " SDL
line 1796: au BufNewFile,BufRead *.sdl,*.pr^I^Isetf sdl
line 1797: 
line 1798: " sed
line 1799: au BufNewFile,BufRead *.sed^I^I^Isetf sed
line 1800: 
line 1801: " Sieve (RFC 3028)
line 1802: au BufNewFile,BufRead *.siv^I^I^Isetf sieve
line 1803: 
line 1804: " Sendmail
line 1805: au BufNewFile,BufRead sendmail.cf^I^Isetf sm
line 1806: 
line 1807: " Sendmail .mc files are actually m4.  Could also be MS Message text file.
line 1808: au BufNewFile,BufRead *.mc^I^I^Icall s:McSetf()
line 1809: 
line 1810: func! s:McSetf()
line 1825: 
line 1826: " Services
line 1827: au BufNewFile,BufRead */etc/services^I^Isetf services
line 1828: 
line 1829: " Service Location config
line 1830: au BufNewFile,BufRead */etc/slp.conf^I^Isetf slpconf
line 1831: 
line 1832: " Service Location registration
line 1833: au BufNewFile,BufRead */etc/slp.reg^I^Isetf slpreg
line 1834: 
line 1835: " Service Location SPI
line 1836: au BufNewFile,BufRead */etc/slp.spi^I^Isetf slpspi
line 1837: 
line 1838: " Setserial config
line 1839: au BufNewFile,BufRead */etc/serial.conf^I^Isetf setserial
line 1840: 
line 1841: " SGML
line 1851: au BufNewFile,BufRead *.sgm,*.sgml if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'linuxdoc' |   setf sgmllnx | elseif getline(1) =~ '<!DOCTYPE.*DocBook' || getline(2) =~ '<!DOCTYPE.*DocBook' |   let b:docbk_type = "sgml" |   let b:docbk_ver = 4 |   setf docbk | else |   setf sgml | endif
line 1852: 
line 1853: " SGMLDECL
line 1857: au BufNewFile,BufRead *.decl,*.dcl,*.dec if getline(1).getline(2).getline(3) =~? '^<!SGML' |    setf sgmldecl | endif
line 1858: 
line 1859: " SGML catalog file
line 1860: au BufNewFile,BufRead catalog^I^I^Isetf catalog
line 1861: au BufNewFile,BufRead sgml.catalog*^I^Icall s:StarSetf('catalog')
line 1862: 
line 1863: " Shell scripts (sh, ksh, bash, bash2, csh); Allow .profile_foo etc.
line 1864: " Gentoo ebuilds are actually bash scripts
line 1865: au BufNewFile,BufRead .bashrc*,bashrc,bash.bashrc,.bash[_-]profile*,.bash[_-]logout*,.bash[_-]aliases*,*.bash,*/{,.}bash[_-]completion{,.d,.sh}{,/*},*.ebuild,*.eclass call SetFileTypeSH("bash")
line 1866: au BufNewFile,BufRead .kshrc*,*.ksh call SetFileTypeSH("ksh")
line 1867: au BufNewFile,BufRead */etc/profile,.profile*,*.sh,*.env call SetFileTypeSH(getline(1))
line 1868: 
line 1869: " Also called from scripts.vim.
line 1870: func! SetFileTypeSH(name)
line 1913: 
line 1914: " For shell-like file types, check for an "exec" command hidden in a comment,
line 1915: " as used for Tcl.
line 1916: " Also called from scripts.vim, thus can't be local to this script.
line 1917: func! SetFileTypeShell(name)
line 1936: 
line 1937: " tcsh scripts
line 1938: au BufNewFile,BufRead .tcshrc*,*.tcsh,tcsh.tcshrc,tcsh.login^Icall SetFileTypeShell("tcsh")
line 1939: 
line 1940: " csh scripts, but might also be tcsh scripts (on some systems csh is tcsh)
line 1941: au BufNewFile,BufRead .login*,.cshrc*,csh.cshrc,csh.login,csh.logout,*.csh,.alias  call s:CSH()
line 1942: 
line 1943: func! s:CSH()
line 1952: 
line 1953: " Z-Shell script
line 1954: au BufNewFile,BufRead .zprofile,*/etc/zprofile,.zfbfmarks  setf zsh
line 1955: au BufNewFile,BufRead .zsh*,.zlog*,.zcompdump*  call s:StarSetf('zsh')
line 1956: au BufNewFile,BufRead *.zsh^I^I^Isetf zsh
line 1957: 
line 1958: " Scheme
line 1959: au BufNewFile,BufRead *.scm,*.ss,*.rkt^I^Isetf scheme
line 1960: 
line 1961: " Screen RC
line 1962: au BufNewFile,BufRead .screenrc,screenrc^Isetf screen
line 1963: 
line 1964: " Simula
line 1965: au BufNewFile,BufRead *.sim^I^I^Isetf simula
line 1966: 
line 1967: " SINDA
line 1968: au BufNewFile,BufRead *.sin,*.s85^I^Isetf sinda
line 1969: 
line 1970: " SiSU
line 1971: au BufNewFile,BufRead *.sst,*.ssm,*.ssi,*.-sst,*._sst setf sisu
line 1972: au BufNewFile,BufRead *.sst.meta,*.-sst.meta,*._sst.meta setf sisu
line 1973: 
line 1974: " SKILL
line 1975: au BufNewFile,BufRead *.il,*.ils,*.cdf^I^Isetf skill
line 1976: 
line 1977: " SLRN
line 1978: au BufNewFile,BufRead .slrnrc^I^I^Isetf slrnrc
line 1979: au BufNewFile,BufRead *.score^I^I^Isetf slrnsc
line 1980: 
line 1981: " Smalltalk (and TeX)
line 1982: au BufNewFile,BufRead *.st^I^I^Isetf st
line 1990: au BufNewFile,BufRead *.cls if getline(1) =~ '^%' |  setf tex | elseif getline(1)[0] == '#' && getline(1) =~ 'rexx' |  setf rexx | else |  setf st | endif
line 1991: 
line 1992: " Smarty templates
line 1993: au BufNewFile,BufRead *.tpl^I^I^Isetf smarty
line 1994: 
line 1995: " SMIL or XML
line 2001: au BufNewFile,BufRead *.smil if getline(1) =~ '<?\s*xml.*?>' |   setf xml | else |   setf smil | endif
line 2002: 
line 2003: " SMIL or SNMP MIB file
line 2009: au BufNewFile,BufRead *.smi if getline(1) =~ '\<smil\>' |   setf smil | else |   setf mib | endif
line 2010: 
line 2011: " SMITH
line 2012: au BufNewFile,BufRead *.smt,*.smith^I^Isetf smith
line 2013: 
line 2014: " Snobol4 and spitbol
line 2015: au BufNewFile,BufRead *.sno,*.spt^I^Isetf snobol4
line 2016: 
line 2017: " SNMP MIB files
line 2018: au BufNewFile,BufRead *.mib,*.my^I^Isetf mib
line 2019: 
line 2020: " Snort Configuration
line 2021: au BufNewFile,BufRead *.hog,snort.conf,vision.conf^Isetf hog
line 2022: au BufNewFile,BufRead *.rules^I^I^Icall s:FTRules()
line 2023: 
line 2024: let s:ft_rules_udev_rules_pattern = '^\s*\cudev_rules\s*=\s*"\([^"]\{-1,}\)/*".*'
line 2025: func! s:FTRules()
line 2057: 
line 2058: 
line 2059: " Spec (Linux RPM)
line 2060: au BufNewFile,BufRead *.spec^I^I^Isetf spec
line 2061: 
line 2062: " Speedup (AspenTech plant simulator)
line 2063: au BufNewFile,BufRead *.speedup,*.spdata,*.spd^Isetf spup
line 2064: 
line 2065: " Slice
line 2066: au BufNewFile,BufRead *.ice^I^I^Isetf slice
line 2067: 
line 2068: " Spice
line 2069: au BufNewFile,BufRead *.sp,*.spice^I^Isetf spice
line 2070: 
line 2071: " Spyce
line 2072: au BufNewFile,BufRead *.spy,*.spi^I^Isetf spyce
line 2073: 
line 2074: " Squid
line 2075: au BufNewFile,BufRead squid.conf^I^Isetf squid
line 2076: 
line 2077: " SQL for Oracle Designer
line 2078: au BufNewFile,BufRead *.tyb,*.typ,*.tyc,*.pkb,*.pks^Isetf sql
line 2079: 
line 2080: " SQL
line 2081: au BufNewFile,BufRead *.sql^I^I^Icall s:SQL()
line 2082: 
line 2083: func! s:SQL()
line 2090: 
line 2091: " SQLJ
line 2092: au BufNewFile,BufRead *.sqlj^I^I^Isetf sqlj
line 2093: 
line 2094: " SQR
line 2095: au BufNewFile,BufRead *.sqr,*.sqi^I^Isetf sqr
line 2096: 
line 2097: " OpenSSH configuration
line 2098: au BufNewFile,BufRead ssh_config,*/.ssh/config^Isetf sshconfig
line 2099: 
line 2100: " OpenSSH server configuration
line 2101: au BufNewFile,BufRead sshd_config^I^Isetf sshdconfig
line 2102: 
line 2103: " Stata
line 2104: au BufNewFile,BufRead *.ado,*.class,*.do,*.imata,*.mata   setf stata
line 2105: 
line 2106: " SMCL
line 2107: au BufNewFile,BufRead *.hlp,*.ihlp,*.smcl^Isetf smcl
line 2108: 
line 2109: " Stored Procedures
line 2110: au BufNewFile,BufRead *.stp^I^I^Isetf stp
line 2111: 
line 2112: " Standard ML
line 2113: au BufNewFile,BufRead *.sml^I^I^Isetf sml
line 2114: 
line 2115: " Sratus VOS command macro
line 2116: au BufNewFile,BufRead *.cm^I^I^Isetf voscm
line 2117: 
line 2118: " Sysctl
line 2119: au BufNewFile,BufRead */etc/sysctl.conf,*/etc/sysctl.d/*.conf^Isetf sysctl
line 2120: 
line 2121: " Systemd unit files
line 2122: au BufNewFile,BufRead */systemd/*.{automount,mount,path,service,socket,swap,target,timer}^Isetf systemd
line 2123: 
line 2124: " Synopsys Design Constraints
line 2125: au BufNewFile,BufRead *.sdc^I^I^Isetf sdc
line 2126: 
line 2127: " Sudoers
line 2128: au BufNewFile,BufRead */etc/sudoers,sudoers.tmp^Isetf sudoers
line 2129: 
line 2130: " SVG (Scalable Vector Graphics)
line 2131: au BufNewFile,BufRead *.svg^I^I^Isetf svg
line 2132: 
line 2133: " If the file has an extension of 't' and is in a directory 't' or 'xt' then
line 2134: " it is almost certainly a Perl test file.
line 2135: " If the first line starts with '#' and contains 'perl' it's probably a Perl
line 2136: " file.
line 2137: " (Slow test) If a file contains a 'use' statement then it is almost certainly
line 2138: " a Perl file.
line 2139: func! s:FTperl()
line 2155: 
line 2156: " Tads (or Nroff or Perl test file)
line 2158: au BufNewFile,BufRead *.t if !s:FTnroff() && !s:FTperl() | setf tads | endif
line 2159: 
line 2160: " Tags
line 2161: au BufNewFile,BufRead tags^I^I^Isetf tags
line 2162: 
line 2163: " TAK
line 2164: au BufNewFile,BufRead *.tak^I^I^Isetf tak
line 2165: 
line 2166: " Task
line 2167: au BufRead,BufNewFile {pending,completed,undo}.data  setf taskdata
line 2168: au BufRead,BufNewFile *.task^I^I^Isetf taskedit
line 2169: 
line 2170: " Tcl (JACL too)
line 2171: au BufNewFile,BufRead *.tcl,*.tk,*.itcl,*.itk,*.jacl^Isetf tcl
line 2172: 
line 2173: " TealInfo
line 2174: au BufNewFile,BufRead *.tli^I^I^Isetf tli
line 2175: 
line 2176: " Telix Salt
line 2177: au BufNewFile,BufRead *.slt^I^I^Isetf tsalt
line 2178: 
line 2179: " Tera Term Language
line 2180: au BufRead,BufNewFile *.ttl^I^I^Isetf teraterm
line 2181: 
line 2182: " Terminfo
line 2183: au BufNewFile,BufRead *.ti^I^I^Isetf terminfo
line 2184: 
line 2185: " TeX
line 2186: au BufNewFile,BufRead *.latex,*.sty,*.dtx,*.ltx,*.bbl^Isetf tex
line 2187: au BufNewFile,BufRead *.tex^I^I^Icall s:FTtex()
line 2188: 
line 2189: " Choose context, plaintex, or tex (LaTeX) based on these rules:
line 2190: " 1. Check the first line of the file for "%&<format>".
line 2191: " 2. Check the first 1000 non-comment lines for LaTeX or ConTeXt keywords.
line 2192: " 3. Default to "latex" or to g:tex_flavor, can be set in user's vimrc.
line 2193: func! s:FTtex()
line 2240: 
line 2241: " ConTeXt
line 2242: au BufNewFile,BufRead tex/context/*/*.tex,*.mkii,*.mkiv   setf context
line 2243: 
line 2244: " Texinfo
line 2245: au BufNewFile,BufRead *.texinfo,*.texi,*.txi^Isetf texinfo
line 2246: 
line 2247: " TeX configuration
line 2248: au BufNewFile,BufRead texmf.cnf^I^I^Isetf texmf
line 2249: 
line 2250: " Tidy config
line 2251: au BufNewFile,BufRead .tidyrc,tidyrc^I^Isetf tidy
line 2252: 
line 2253: " TF mud client
line 2254: au BufNewFile,BufRead *.tf,.tfrc,tfrc^I^Isetf tf
line 2255: 
line 2256: " TPP - Text Presentation Program
line 2257: au BufNewFile,BufReadPost *.tpp^I^I^Isetf tpp
line 2258: 
line 2259: " Treetop
line 2260: au BufRead,BufNewFile *.treetop^I^I^Isetf treetop
line 2261: 
line 2262: " Trustees
line 2263: au BufNewFile,BufRead trustees.conf^I^Isetf trustees
line 2264: 
line 2265: " TSS - Geometry
line 2266: au BufNewFile,BufReadPost *.tssgm^I^Isetf tssgm
line 2267: 
line 2268: " TSS - Optics
line 2269: au BufNewFile,BufReadPost *.tssop^I^Isetf tssop
line 2270: 
line 2271: " TSS - Command Line (temporary)
line 2272: au BufNewFile,BufReadPost *.tsscl^I^Isetf tsscl
line 2273: 
line 2274: " TWIG files
line 2275: au BufNewFile,BufReadPost *.twig^I^Isetf twig
line 2276: 
line 2277: " Motif UIT/UIL files
line 2278: au BufNewFile,BufRead *.uit,*.uil^I^Isetf uil
line 2279: 
line 2280: " Udev conf
line 2281: au BufNewFile,BufRead */etc/udev/udev.conf^Isetf udevconf
line 2282: 
line 2283: " Udev permissions
line 2284: au BufNewFile,BufRead */etc/udev/permissions.d/*.permissions setf udevperm
line 2285: "
line 2286: " Udev symlinks config
line 2287: au BufNewFile,BufRead */etc/udev/cdsymlinks.conf^Isetf sh
line 2288: 
line 2289: " UnrealScript
line 2290: au BufNewFile,BufRead *.uc^I^I^Isetf uc
line 2291: 
line 2292: " Updatedb
line 2293: au BufNewFile,BufRead */etc/updatedb.conf^Isetf updatedb
line 2294: 
line 2295: " Upstart (init(8)) config files
line 2296: au BufNewFile,BufRead */usr/share/upstart/*.conf^I       setf upstart
line 2297: au BufNewFile,BufRead */usr/share/upstart/*.override^I       setf upstart
line 2298: au BufNewFile,BufRead */etc/init/*.conf,*/etc/init/*.override  setf upstart
line 2299: au BufNewFile,BufRead */.init/*.conf,*/.init/*.override        setf upstart
line 2300: au BufNewFile,BufRead */.config/upstart/*.conf^I^I       setf upstart
line 2301: au BufNewFile,BufRead */.config/upstart/*.override^I       setf upstart
line 2302: 
line 2303: " Vera
line 2304: au BufNewFile,BufRead *.vr,*.vri,*.vrh^I^Isetf vera
line 2305: 
line 2306: " Verilog HDL
line 2307: au BufNewFile,BufRead *.v^I^I^Isetf verilog
line 2308: 
line 2309: " Verilog-AMS HDL
line 2310: au BufNewFile,BufRead *.va,*.vams^I^Isetf verilogams
line 2311: 
line 2312: " SystemVerilog
line 2313: au BufNewFile,BufRead *.sv,*.svh^I^Isetf systemverilog
line 2314: 
line 2315: " VHDL
line 2316: au BufNewFile,BufRead *.hdl,*.vhd,*.vhdl,*.vbe,*.vst  setf vhdl
line 2317: au BufNewFile,BufRead *.vhdl_[0-9]*^I^Icall s:StarSetf('vhdl')
line 2318: 
line 2319: " Vim script
line 2320: au BufNewFile,BufRead *.vim,*.vba,.exrc,_exrc^Isetf vim
line 2321: 
line 2322: " Viminfo file
line 2323: au BufNewFile,BufRead .viminfo,_viminfo^I^Isetf viminfo
line 2324: 
line 2325: " Virata Config Script File or Drupal module
line 2331: au BufRead,BufNewFile *.hw,*.module,*.pkg if getline(1) =~ '<?php' |   setf php | else |   setf virata | endif
line 2332: 
line 2333: " Visual Basic (also uses *.bas) or FORM
line 2334: au BufNewFile,BufRead *.frm^I^I^Icall s:FTVB("form")
line 2335: 
line 2336: " SaxBasic is close to Visual Basic
line 2337: au BufNewFile,BufRead *.sba^I^I^Isetf vb
line 2338: 
line 2339: " Vgrindefs file
line 2340: au BufNewFile,BufRead vgrindefs^I^I^Isetf vgrindefs
line 2341: 
line 2342: " VRML V1.0c
line 2343: au BufNewFile,BufRead *.wrl^I^I^Isetf vrml
line 2344: 
line 2345: " Vroom (vim testing and executable documentation)
line 2346: au BufNewFile,BufRead *.vroom^I^I^Isetf vroom
line 2347: 
line 2348: " Webmacro
line 2349: au BufNewFile,BufRead *.wm^I^I^Isetf webmacro
line 2350: 
line 2351: " Wget config
line 2352: au BufNewFile,BufRead .wgetrc,wgetrc^I^Isetf wget
line 2353: 
line 2354: " Website MetaLanguage
line 2355: au BufNewFile,BufRead *.wml^I^I^Isetf wml
line 2356: 
line 2357: " Winbatch
line 2358: au BufNewFile,BufRead *.wbt^I^I^Isetf winbatch
line 2359: 
line 2360: " WSML
line 2361: au BufNewFile,BufRead *.wsml^I^I^Isetf wsml
line 2362: 
line 2363: " WvDial
line 2364: au BufNewFile,BufRead wvdial.conf,.wvdialrc^Isetf wvdial
line 2365: 
line 2366: " CVS RC file
line 2367: au BufNewFile,BufRead .cvsrc^I^I^Isetf cvsrc
line 2368: 
line 2369: " CVS commit file
line 2370: au BufNewFile,BufRead cvs\d\+^I^I^Isetf cvs
line 2371: 
line 2372: " WEB (*.web is also used for Winbatch: Guess, based on expecting "%" comment
line 2373: " lines in a WEB file).
line 2379: au BufNewFile,BufRead *.web if getline(1)[0].getline(2)[0].getline(3)[0].getline(4)[0].getline(5)[0] =~ "%" |   setf web | else |   setf winbatch | endif
line 2380: 
line 2381: " Windows Scripting Host and Windows Script Component
line 2382: au BufNewFile,BufRead *.ws[fc]^I^I^Isetf wsh
line 2383: 
line 2384: " XHTML
line 2385: au BufNewFile,BufRead *.xhtml,*.xht^I^Isetf xhtml
line 2386: 
line 2387: " X Pixmap (dynamically sets colors, use BufEnter to make it work better)
line 2393: au BufEnter *.xpm if getline(1) =~ "XPM2" |   setf xpm2 | else |   setf xpm | endif
line 2394: au BufEnter *.xpm2^I^I^I^Isetf xpm2
line 2395: 
line 2396: " XFree86 config
line 2401: au BufNewFile,BufRead XF86Config if getline(1) =~ '\<XConfigurator\>' |   let b:xf86conf_xfree86_version = 3 | endif | setf xf86conf
line 2404: au BufNewFile,BufRead */xorg.conf.d/*.conf let b:xf86conf_xfree86_version = 4 | setf xf86conf
line 2405: 
line 2406: " Xorg config
line 2407: au BufNewFile,BufRead xorg.conf,xorg.conf-4^Ilet b:xf86conf_xfree86_version = 4 | setf xf86conf
line 2408: 
line 2409: " Xinetd conf
line 2410: au BufNewFile,BufRead */etc/xinetd.conf^I^Isetf xinetd
line 2411: 
line 2412: " XS Perl extension interface language
line 2413: au BufNewFile,BufRead *.xs^I^I^Isetf xs
line 2414: 
line 2415: " X resources file
line 2416: au BufNewFile,BufRead .Xdefaults,.Xpdefaults,.Xresources,xdm-config,*.ad setf xdefaults
line 2417: 
line 2418: " Xmath
line 2419: au BufNewFile,BufRead *.msc,*.msf^I^Isetf xmath
line 2421: au BufNewFile,BufRead *.ms if !s:FTnroff() | setf xmath | endif
line 2422: 
line 2423: " XML  specific variants: docbk and xbl
line 2424: au BufNewFile,BufRead *.xml^I^I^Icall s:FTxml()
line 2425: 
line 2426: func! s:FTxml()
line 2451: 
line 2452: " XMI (holding UML models) is also XML
line 2453: au BufNewFile,BufRead *.xmi^I^I^Isetf xml
line 2454: 
line 2455: " CSPROJ files are Visual Studio.NET's XML-based project config files
line 2456: au BufNewFile,BufRead *.csproj,*.csproj.user^Isetf xml
line 2457: 
line 2458: " Qt Linguist translation source and Qt User Interface Files are XML
line 2459: au BufNewFile,BufRead *.ts,*.ui^I^I^Isetf xml
line 2460: 
line 2461: " TPM's are RDF-based descriptions of TeX packages (Nikolai Weibull)
line 2462: au BufNewFile,BufRead *.tpm^I^I^Isetf xml
line 2463: 
line 2464: " Xdg menus
line 2465: au BufNewFile,BufRead */etc/xdg/menus/*.menu^Isetf xml
line 2466: 
line 2467: " ATI graphics driver configuration
line 2468: au BufNewFile,BufRead fglrxrc^I^I^Isetf xml
line 2469: 
line 2470: " XLIFF (XML Localisation Interchange File Format) is also XML
line 2471: au BufNewFile,BufRead *.xlf^I^I^Isetf xml
line 2472: au BufNewFile,BufRead *.xliff^I^I^Isetf xml
line 2473: 
line 2474: " XML User Interface Language
line 2475: au BufNewFile,BufRead *.xul^I^I^Isetf xml
line 2476: 
line 2477: " X11 xmodmap (also see below)
line 2478: au BufNewFile,BufRead *Xmodmap^I^I^Isetf xmodmap
line 2479: 
line 2480: " Xquery
line 2481: au BufNewFile,BufRead *.xq,*.xql,*.xqm,*.xquery,*.xqy^Isetf xquery
line 2482: 
line 2483: " XSD
line 2484: au BufNewFile,BufRead *.xsd^I^I^Isetf xsd
line 2485: 
line 2486: " Xslt
line 2487: au BufNewFile,BufRead *.xsl,*.xslt^I^Isetf xslt
line 2488: 
line 2489: " Yacc
line 2490: au BufNewFile,BufRead *.yy,*.yxx,*.y++^I^Isetf yacc
line 2491: 
line 2492: " Yacc or racc
line 2493: au BufNewFile,BufRead *.y^I^I^Icall s:FTy()
line 2494: 
line 2495: func! s:FTy()
line 2511: 
line 2512: 
line 2513: " Yaml
line 2514: au BufNewFile,BufRead *.yaml,*.yml^I^Isetf yaml
line 2515: 
line 2516: " yum conf (close enough to dosini)
line 2517: au BufNewFile,BufRead */etc/yum.conf^I^Isetf dosini
line 2518: 
line 2519: " Zimbu
line 2520: au BufNewFile,BufRead *.zu^I^I^Isetf zimbu
line 2521: " Zimbu Templates
line 2522: au BufNewFile,BufRead *.zut^I^I^Isetf zimbutempl
line 2523: 
line 2524: " Zope
line 2525: "   dtml (zope dynamic template markup language), pt (zope page template),
line 2526: "   cpt (zope form controller page template)
line 2527: au BufNewFile,BufRead *.dtml,*.pt,*.cpt^I^Icall s:FThtml()
line 2528: "   zsql (zope sql method)
line 2529: au BufNewFile,BufRead *.zsql^I^I^Icall s:SQL()
line 2530: 
line 2531: " Z80 assembler asz80
line 2532: au BufNewFile,BufRead *.z8a^I^I^Isetf z8a
line 2533: 
line 2534: augroup END
line 2535: 
line 2536: 
line 2537: " Source the user-specified filetype file, for backwards compatibility with
line 2538: " Vim 5.x.
line 2539: if exists("myfiletypefile") && filereadable(expand(myfiletypefile))
line 2540:   execute "source " . myfiletypefile
line 2541: endif
line 2542: 
line 2543: 
line 2544: " Check for "*" after loading myfiletypefile, so that scripts.vim is only used
line 2545: " when there are no matching file name extensions.
line 2546: " Don't do this for compressed files.
line 2547: augroup filetypedetect
line 2550: au BufNewFile,BufRead * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif
line 2551: au StdinReadPost * if !did_filetype() | runtime! scripts.vim | endif
line 2552: 
line 2553: 
line 2554: " Extra checks for when no filetype has been detected now.  Mostly used for
line 2555: " patterns that end in "*".  E.g., "zsh*" matches "zsh.vim", but that's a Vim
line 2556: " script file.
line 2557: " Most of these should call s:StarSetf() to avoid names ending in .gz and the
line 2558: " like are used.
line 2559: 
line 2560: " More Apache config files
line 2561: au BufNewFile,BufRead access.conf*,apache.conf*,apache2.conf*,httpd.conf*,srm.conf*^Icall s:StarSetf('apache')
line 2562: au BufNewFile,BufRead */etc/apache2/*.conf*,*/etc/apache2/conf.*/*,*/etc/apache2/mods-*/*,*/etc/apache2/sites-*/*,*/etc/httpd/conf.d/*.conf*^I^Icall s:StarSetf('apache')
line 2563: 
line 2564: " Asterisk config file
line 2565: au BufNewFile,BufRead *asterisk/*.conf*^I^Icall s:StarSetf('asterisk')
line 2566: au BufNewFile,BufRead *asterisk*/*voicemail.conf* call s:StarSetf('asteriskvm')
line 2567: 
line 2568: " Bazaar version control
line 2569: au BufNewFile,BufRead bzr_log.*^I^I^Isetf bzr
line 2570: 
line 2571: " BIND zone
line 2572: au BufNewFile,BufRead */named/db.*,*/bind/db.*^Icall s:StarSetf('bindzone')
line 2573: 
line 2574: " Calendar
line 2577: au BufNewFile,BufRead */.calendar/*,*/share/calendar/*/calendar.*,*/share/calendar/calendar.*^I^I^I^I^Icall s:StarSetf('calendar')
line 2578: 
line 2579: " Changelog
line 2585: au BufNewFile,BufRead [cC]hange[lL]og* if getline(1) =~ '; urgency='|  call s:StarSetf('debchangelog')|else|  call s:StarSetf('changelog')|endif
line 2586: 
line 2587: " Crontab
line 2588: au BufNewFile,BufRead crontab,crontab.*,*/etc/cron.d/*^I^Icall s:StarSetf('crontab')
line 2589: 
line 2590: " dnsmasq(8) configuration
line 2591: au BufNewFile,BufRead */etc/dnsmasq.d/*^I^Icall s:StarSetf('dnsmasq')
line 2592: 
line 2593: " Dracula
line 2594: au BufNewFile,BufRead drac.*^I^I^Icall s:StarSetf('dracula')
line 2595: 
line 2596: " Fvwm
line 2597: au BufNewFile,BufRead */.fvwm/*^I^I^Icall s:StarSetf('fvwm')
line 2599: au BufNewFile,BufRead *fvwmrc*,*fvwm95*.hook let b:fvwm_version = 1 | call s:StarSetf('fvwm')
line 2605: au BufNewFile,BufRead *fvwm2rc* if expand("<afile>:e") == "m4"|  call s:StarSetf('fvwm2m4')|else|  let b:fvwm_version = 2 | call s:StarSetf('fvwm')|endif
line 2606: 
line 2607: " Gedcom
line 2608: au BufNewFile,BufRead */tmp/lltmp*^I^Icall s:StarSetf('gedcom')
line 2609: 
line 2610: " GTK RC
line 2611: au BufNewFile,BufRead .gtkrc*,gtkrc*^I^Icall s:StarSetf('gtkrc')
line 2612: 
line 2613: " Jam
line 2614: au BufNewFile,BufRead Prl*.*,JAM*.*^I^Icall s:StarSetf('jam')
line 2615: 
line 2616: " Jargon
line 2620: au! BufNewFile,BufRead *jarg* if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'THIS IS THE JARGON FILE'|  call s:StarSetf('jargon')|endif
line 2621: 
line 2622: " Kconfig
line 2623: au BufNewFile,BufRead Kconfig.*^I^I^Icall s:StarSetf('kconfig')
line 2624: 
line 2625: " Lilo: Linux loader
line 2626: au BufNewFile,BufRead lilo.conf*^I^Icall s:StarSetf('lilo')
line 2627: 
line 2628: " Logcheck
line 2629: au BufNewFile,BufRead */etc/logcheck/*.d*/*^Icall s:StarSetf('logcheck')
line 2630: 
line 2631: " Makefile
line 2632: au BufNewFile,BufRead [mM]akefile*^I^Icall s:StarSetf('make')
line 2633: 
line 2634: " Ruby Makefile
line 2635: au BufNewFile,BufRead [rR]akefile*^I^Icall s:StarSetf('ruby')
line 2636: 
line 2637: " Mail (also matches muttrc.vim, so this is below the other checks)
line 2638: au BufNewFile,BufRead mutt[[:alnum:]._-]\\\{6\}^Isetf mail
line 2639: 
line 2640: " Modconf
line 2644: au BufNewFile,BufRead */etc/modutils/* if executable(expand("<afile>")) != 1|  call s:StarSetf('modconf')|endif
line 2645: au BufNewFile,BufRead */etc/modprobe.*^I^Icall s:StarSetf('modconf')
line 2646: 
line 2647: " Mutt setup file
line 2648: au BufNewFile,BufRead .mutt{ng,}rc*,*/.mutt{ng,}/mutt{ng,}rc*^Icall s:StarSetf('muttrc')
line 2649: au BufNewFile,BufRead mutt{ng,}rc*,Mutt{ng,}rc*^I^Icall s:StarSetf('muttrc')
line 2650: 
line 2651: " Nroff macros
line 2652: au BufNewFile,BufRead tmac.*^I^I^Icall s:StarSetf('nroff')
line 2653: 
line 2654: " Pam conf
line 2655: au BufNewFile,BufRead */etc/pam.d/*^I^Icall s:StarSetf('pamconf')
line 2656: 
line 2657: " Printcap and Termcap
line 2661: au BufNewFile,BufRead *printcap* if !did_filetype()|  let b:ptcap_type = "print" | call s:StarSetf('ptcap')|endif
line 2665: au BufNewFile,BufRead *termcap* if !did_filetype()|  let b:ptcap_type = "term" | call s:StarSetf('ptcap')|endif
line 2666: 
line 2667: " ReDIF
line 2668: " Only used when the .rdf file was not detected to be XML.
line 2669: au BufRead,BufNewFile *.rdf^I^I^Icall s:Redif()
line 2670: func! s:Redif()
line 2680: 
line 2681: " Remind
line 2682: au BufNewFile,BufRead .reminders*^I^Icall s:StarSetf('remind')
line 2683: 
line 2684: " Vim script
line 2685: au BufNewFile,BufRead *vimrc*^I^I^Icall s:StarSetf('vim')
line 2686: 
line 2687: " Subversion commit file
line 2688: au BufNewFile,BufRead svn-commit*.tmp^I^Isetf svn
line 2689: 
line 2690: " X resources file
line 2691: au BufNewFile,BufRead Xresources*,*/app-defaults/*,*/Xresources/* call s:StarSetf('xdefaults')
line 2692: 
line 2693: " XFree86 config
line 2695: au BufNewFile,BufRead XF86Config-4* let b:xf86conf_xfree86_version = 4 | call s:StarSetf('xf86conf')
line 2700: au BufNewFile,BufRead XF86Config* if getline(1) =~ '\<XConfigurator\>'|  let b:xf86conf_xfree86_version = 3|endif|call s:StarSetf('xf86conf')
line 2701: 
line 2702: " X11 xmodmap
line 2703: au BufNewFile,BufRead *xmodmap*^I^I^Icall s:StarSetf('xmodmap')
line 2704: 
line 2705: " Xinetd conf
line 2706: au BufNewFile,BufRead */etc/xinetd.d/*^I^Icall s:StarSetf('xinetd')
line 2707: 
line 2708: " yum conf (close enough to dosini)
line 2709: au BufNewFile,BufRead */etc/yum.repos.d/*^Icall s:StarSetf('dosini')
line 2710: 
line 2711: " Z-Shell script
line 2712: au BufNewFile,BufRead zsh*,zlog*^I^Icall s:StarSetf('zsh')
line 2713: 
line 2714: 
line 2715: " Plain text files, needs to be far down to not override others.  This avoids
line 2716: " the "conf" type being used if there is a line starting with '#'.
line 2717: au BufNewFile,BufRead *.txt,*.text,README^Isetf text
line 2718: 
line 2719: 
line 2720: " Use the filetype detect plugins.  They may overrule any of the previously
line 2721: " detected filetypes.
line 2722: runtime! ftdetect/*.vim
Searching for "ftdetect/*.vim" in "/home/computer/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after"
Searching for "/home/computer/.vim/ftdetect/*.vim"
Searching for "/var/lib/vim/addons/ftdetect/*.vim"
Searching for "/usr/share/vim/vimfiles/ftdetect/*.vim"
Searching for "/usr/share/vim/vim74/ftdetect/*.vim"
Searching for "/usr/share/vim/vimfiles/after/ftdetect/*.vim"
Searching for "/var/lib/vim/addons/after/ftdetect/*.vim"
Searching for "/home/computer/.vim/after/ftdetect/*.vim"
not found in 'runtimepath': "ftdetect/*.vim"
line 2723: 
line 2724: " NOTE: The above command could have ended the filetypedetect autocmd group
line 2725: " and started another one. Let's make sure it has ended to get to a consistent
line 2726: " state.
line 2727: augroup END
line 2728: 
line 2729: " Generic configuration file (check this last, it's just guessing!)
line 2735: au filetypedetect BufNewFile,BufRead,StdinReadPost * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf conf | endif
line 2736: 
line 2737: 
line 2738: " If the GUI is already running, may still need to install the Syntax menu.
line 2739: " Don't do it when the 'M' flag is included in 'guioptions'.
line 2741: if has("menu") && has("gui_running") && !exists("did_install_syntax_menu") && &guioptions !~# "M"
line 2742:   source <sfile>:p:h/menu.vim
line 2743: endif
line 2744: 
line 2745: " Function called for testing all functions defined here.  These are
line 2746: " script-local, thus need to be executed here.
line 2747: " Returns a string with error messages (hopefully empty).
line 2748: func! TestFiletypeFuncs(testlist)
line 2759: 
line 2760: " Restore 'cpoptions'
line 2761: let &cpo = s:cpo_save
line 2762: unlet s:cpo_save
finished sourcing /usr/share/vim/vim74/filetype.vim
continuing in /usr/share/vim/vim74/syntax/syntax.vim
Searching for "/usr/share/vim/vimfiles/after/filetype.vim"
Searching for "/var/lib/vim/addons/after/filetype.vim"
Searching for "/home/computer/.vim/after/filetype.vim"
line 26:   let s:did_ft = 0
line 27: endif
line 28: 
line 29: " Set up the connection between FileType and Syntax autocommands.
line 30: " This makes the syntax automatically set when the file type is detected.
line 31: augroup syntaxset
line 32:   au! FileType *^Iexe "set syntax=" . expand("<amatch>")
line 33: augroup END
line 34: 
line 35: 
line 36: " Execute the syntax autocommands for the each buffer.
line 37: " If the filetype wasn't detected yet, do that now.
line 38: " Always do the syntaxset autocommands, for buffers where the 'filetype'
line 39: " already was set manually (e.g., help buffers).
line 40: doautoall syntaxset FileType
line 41: if !s:did_ft
line 42:   doautoall filetypedetect BufRead
line 43: endif
finished sourcing /usr/share/vim/vim74/syntax/syntax.vim
continuing in /home/computer/.vimrc
line 17: 
line 18: """"
line 19: " Vundle
line 20: " https://github.com/VundleVim/Vundle.vim
line 21: """"
line 22: 
line 23: " set the runtime path to include Vundle and initialize
line 24: set rtp+=~/.vim/bundle/Vundle.vim
line 25: call vundle#begin()
Searching for "autoload/vundle.vim" in "/home/computer/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after,/home/computer/.vim/bundle/Vundle.vim"
Searching for "/home/computer/.vim/autoload/vundle.vim"
Searching for "/var/lib/vim/addons/autoload/vundle.vim"
Searching for "/usr/share/vim/vimfiles/autoload/vundle.vim"
Searching for "/usr/share/vim/vim74/autoload/vundle.vim"
Searching for "/usr/share/vim/vimfiles/after/autoload/vundle.vim"
Searching for "/var/lib/vim/addons/after/autoload/vundle.vim"
Searching for "/home/computer/.vim/after/autoload/vundle.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/autoload/vundle.vim"
chdir(/home/computer/.vim/bundle/Vundle.vim/autoload)
fchdir() to previous dir
line 25: sourcing "/home/computer/.vim/bundle/Vundle.vim/autoload/vundle.vim"
line 1: " Vundle        is a shortcut for Vim Bundle and Is a simple plugin manager for Vim
line 2: " Author:       gmarik
line 3: " HomePage:     http://github.com/VundleVim/Vundle.vim
line 4: " Readme:       http://github.com/VundleVim/Vundle.vim/blob/master/README.md
line 5: " Version:      0.10.2
line 6: 
line 7: " Plugin Commands
line 9: com! -nargs=+  -bar   Plugin call vundle#config#bundle(<args>)
line 10: 
line 12: com! -nargs=* -bang -complete=custom,vundle#scripts#complete PluginInstall call vundle#installer#new('!' == '<bang>', <f-args>)
line 13: 
line 15: com! -nargs=? -bang -complete=custom,vundle#scripts#complete PluginSearch call vundle#scripts#all('!' == '<bang>', <q-args>)
line 16: 
line 18: com! -nargs=0 -bang PluginList call vundle#installer#list('!' == '<bang>')
line 19: 
line 21: com! -nargs=? -bang   PluginClean call vundle#installer#clean('!' == '<bang>')
line 22: 
line 24: com! -nargs=0         PluginDocs call vundle#installer#helptags(g:vundle#bundles)
line 25: 
line 26: " Aliases
line 27: com! -nargs=* -complete=custom,vundle#scripts#complete PluginUpdate PluginInstall! <args>
line 28: 
line 29: " Vundle Aliases
line 30: com! -nargs=? -bang -complete=custom,vundle#scripts#complete VundleInstall PluginInstall<bang> <args>
line 31: com! -nargs=? -bang -complete=custom,vundle#scripts#complete VundleSearch  PluginSearch<bang> <args>
line 32: com! -nargs=? -bang                                          VundleClean   PluginClean<bang>
line 33: com! -nargs=0                                                VundleDocs    PluginDocs
line 34: com!                                                         VundleUpdate  PluginInstall!
line 35: com! -nargs=*       -complete=custom,vundle#scripts#complete VundleUpdate  PluginInstall! <args>
line 36: 
line 37: " Deprecated Commands
line 38: com! -nargs=+                                                Bundle        call vundle#config#bundle(<args>)
line 39: com! -nargs=? -bang -complete=custom,vundle#scripts#complete BundleInstall PluginInstall<bang> <args>
line 40: com! -nargs=? -bang -complete=custom,vundle#scripts#complete BundleSearch  PluginSearch<bang> <args>
line 41: com! -nargs=0 -bang                                          BundleList    PluginList<bang>
line 42: com! -nargs=? -bang                                          BundleClean   PluginClean<bang>
line 43: com! -nargs=0                                                BundleDocs    PluginDocs
line 44: com!                                                         BundleUpdate  PluginInstall!
line 45: 
line 46: " Set up the signs used in the installer window. (See :help signs)
line 47: if (has('signs'))
line 48:   sign define Vu_error    text=!  texthl=Error
line 49:   sign define Vu_active   text=>  texthl=Comment
line 50:   sign define Vu_todate   text=.  texthl=Comment
line 51:   sign define Vu_new      text=+  texthl=Comment
line 52:   sign define Vu_updated  text=*  texthl=Comment
line 53:   sign define Vu_deleted  text=-  texthl=Comment
line 54:   sign define Vu_helptags text=*  texthl=Comment
line 55:   sign define Vu_pinned   text==  texthl=Comment
line 56: endif
line 57: 
line 58: " Set up Vundle.  This function has to be called from the users vimrc file.
line 59: " This will force Vim to source this file as a side effect which wil define
line 60: " the :Plugin command.  After calling this function the user can use the
line 61: " :Plugin command in the vimrc.  It is not possible to do this automatically
line 62: " because when loading the vimrc file no plugins where loaded yet.
line 63: func! vundle#rc(...) abort
line 69: 
line 70: " Alternative to vundle#rc, offers speed up by modifying rtp only when end()
line 71: " called later.
line 72: func! vundle#begin(...) abort
line 76: 
line 77: " Finishes putting plugins on the rtp.
line 78: func! vundle#end(...) abort
line 82: 
line 83: " Initialize some global variables used by Vundle.
line 84: let vundle#bundle_dir = expand('$HOME/.vim/bundle', 1)
line 85: let vundle#bundles = []
line 86: let vundle#lazy_load = 0
line 87: let vundle#log = []
line 88: let vundle#updated_bundles = []
line 89: 
line 90: " vim: set expandtab sts=2 ts=2 sw=2 tw=78 norl:
finished sourcing /home/computer/.vim/bundle/Vundle.vim/autoload/vundle.vim
continuing in /home/computer/.vimrc
calling function vundle#begin()

line 1:   let g:vundle#lazy_load = 1
line 2:   call call('vundle#rc', a:000)
calling function vundle#begin[2]..vundle#rc()

line 1:   if a:0 > 0
line 2:     let g:vundle#bundle_dir = expand(a:1, 1)
line 3:   endif
line 4:   call vundle#config#init()
Searching for "autoload/vundle/config.vim" in "/home/computer/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after,/home/computer/.vim/bundle/Vundle.vim"
Searching for "/home/computer/.vim/autoload/vundle/config.vim"
Searching for "/var/lib/vim/addons/autoload/vundle/config.vim"
Searching for "/usr/share/vim/vimfiles/autoload/vundle/config.vim"
Searching for "/usr/share/vim/vim74/autoload/vundle/config.vim"
Searching for "/usr/share/vim/vimfiles/after/autoload/vundle/config.vim"
Searching for "/var/lib/vim/addons/after/autoload/vundle/config.vim"
Searching for "/home/computer/.vim/after/autoload/vundle/config.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/autoload/vundle/config.vim"
chdir(/home/computer/.vim/bundle/Vundle.vim/autoload/vundle)
fchdir() to previous dir
line 4: sourcing "/home/computer/.vim/bundle/Vundle.vim/autoload/vundle/config.vim"
line 1: " ---------------------------------------------------------------------------
line 2: " Add a plugin to the runtimepath.
line 3: "
line 4: " arg    -- a string specifying the plugin
line 5: " ...    -- a dictionary of options for the plugin
line 6: " return -- the return value from vundle#config#init_bundle()
line 7: " ---------------------------------------------------------------------------
line 8: func! vundle#config#bundle(arg, ...)
line 23: 
line 24: 
line 25: " ---------------------------------------------------------------------------
line 26: "  When lazy bundle load is used (begin/end functions), add all configured
line 27: "  bundles to runtimepath and reorder appropriately.
line 28: " ---------------------------------------------------------------------------
line 29: func! vundle#config#activate_bundles()
line 33: 
line 34: 
line 35: " ---------------------------------------------------------------------------
line 36: " Initialize Vundle.
line 37: "
line 38: " Start a new bundles list and make sure the runtimepath does not contain
line 39: " directories from a previous call. In theory, this should only be called
line 40: " once.
line 41: " ---------------------------------------------------------------------------
line 42: func! vundle#config#init()
line 48: 
line 49: 
line 50: " ---------------------------------------------------------------------------
line 51: " Add a list of bundles to the runtimepath and source them.
line 52: "
line 53: " bundles -- a list of bundle objects
line 54: " ---------------------------------------------------------------------------
line 55: func! vundle#config#require(bundles) abort
line 66: 
line 67: 
line 68: " ---------------------------------------------------------------------------
line 69: " Create a bundle object from a bundle specification.
line 70: "
line 71: " name   -- the bundle specification as a string
line 72: " opts   -- the options dictionary from then bundle definition
line 73: " return -- an initialized bundle object
line 74: " ---------------------------------------------------------------------------
line 75: func! vundle#config#init_bundle(name, opts)
line 84: 
line 85: 
line 86: " ---------------------------------------------------------------------------
line 87: " Check if the current bundle name has already been used in this running
line 88: " instance and show an error to that effect.
line 89: "
line 90: " bundle -- a bundle object whose name is to be checked
line 91: " return -- 0 if the bundle's name has been seen before, 1 otherwise
line 92: " ---------------------------------------------------------------------------
line 93: funct! s:check_bundle_name(bundle)
line 107: 
line 108: 
line 109: " ---------------------------------------------------------------------------
line 110: " Parse the options which can be supplied with the bundle specification.
line 111: " Corresponding documentation: vundle-plugins-configure
line 112: "
line 113: " opts   -- a dictionary with the user supplied options for the bundle
line 114: " return -- a dictionary with the user supplied options for the bundle, this
line 115: "           will be merged with a s:bundle object into one dictionary.
line 116: " ---------------------------------------------------------------------------
line 117: func! s:parse_options(opts)
line 127: 
line 128: 
line 129: " ---------------------------------------------------------------------------
line 130: " Parse the plugin specification.  Corresponding documentation:
line 131: " vundle-plugins-uris
line 132: "
line 133: " arg    -- the string supplied to identify the plugin
line 134: " return -- a dictionary with the folder name (key 'name') and the uri (key
line 135: "           'uri') for cloning the plugin  and the original argument (key
line 136: "           'name_spec')
line 137: " ---------------------------------------------------------------------------
line 138: func! s:parse_name(arg)
line 160: 
line 161: 
line 162: " ---------------------------------------------------------------------------
line 163: "  Modify the runtimepath, after all bundles have been added, so that the
line 164: "  directories that were in the default runtimepath appear first in the list
line 165: "  (with their 'after' directories last).
line 166: " ---------------------------------------------------------------------------
line 167: func! s:rtp_add_defaults()
line 179: 
line 180: 
line 181: " ---------------------------------------------------------------------------
line 182: " Remove all paths for the plugins which are managed by Vundle from the
line 183: " runtimepath.
line 184: " ---------------------------------------------------------------------------
line 185: func! s:rtp_rm_a()
line 192: 
line 193: 
line 194: " ---------------------------------------------------------------------------
line 195: " Add all paths for the plugins which are managed by Vundle to the
line 196: " runtimepath.
line 197: " ---------------------------------------------------------------------------
line 198: func! s:rtp_add_a()
line 205: 
line 206: 
line 207: " ---------------------------------------------------------------------------
line 208: " Remove a directory and the corresponding 'after' directory from runtimepath.
line 209: "
line 210: " dir    -- the directory name to be removed as a string.  The corresponding
line 211: "           'after' directory will also be removed.
line 212: " ---------------------------------------------------------------------------
line 213: func! s:rtp_rm(dir) abort
line 217: 
line 218: 
line 219: " ---------------------------------------------------------------------------
line 220: " Add a directory and the corresponding 'after' directory to runtimepath.
line 221: "
line 222: " dir    -- the directory name to be added as a string.  The corresponding
line 223: "           'after' directory will also be added.
line 224: " ---------------------------------------------------------------------------
line 225: func! s:rtp_add(dir) abort
line 229: 
line 230: 
line 231: " ---------------------------------------------------------------------------
line 232: " Expand and simplify a path.
line 233: "
line 234: " path   -- the path to expand as a string
line 235: " return -- the expanded and simplified path
line 236: " ---------------------------------------------------------------------------
line 237: func! s:expand_path(path) abort
line 240: 
line 241: 
line 242: " ---------------------------------------------------------------------------
line 243: " Find the actual path inside a bundle directory to be added to the
line 244: " runtimepath.  It might be provided by the user with the 'rtp' option.
line 245: " Corresponding documentation: vundle-plugins-configure
line 246: "
line 247: " opts   -- a bundle dict
line 248: " return -- expanded path to the corresponding plugin directory
line 249: " ---------------------------------------------------------------------------
line 250: func! s:rtpath(opts)
line 253: 
line 254: 
line 255: " ---------------------------------------------------------------------------
line 256: " a bundle 'object'
line 257: " ---------------------------------------------------------------------------
line 258: let s:bundle = {}
line 259: 
line 260: 
line 261: " ---------------------------------------------------------------------------
line 262: " Return the absolute path to the directory inside the bundle directory
line 263: " (prefix) where thr bundle will be cloned.
line 264: "
line 265: " return -- the target location to clone this bundle to
line 266: " ---------------------------------------------------------------------------
line 267: func! s:bundle.path()
line 270: 
line 271: 
line 272: " ---------------------------------------------------------------------------
line 273: "  Determine if the bundle has the pinned attribute set in the config
line 274: "
line 275: "  return -- 1 if the bundle is pinned, 0 otherwise
line 276: " ---------------------------------------------------------------------------
line 277: func! s:bundle.is_pinned()
line 280: 
line 281: " vim: set expandtab sts=2 ts=2 sw=2 tw=78 norl:
finished sourcing /home/computer/.vim/bundle/Vundle.vim/autoload/vundle/config.vim
continuing in function vundle#begin[2]..vundle#rc
calling function vundle#begin[2]..vundle#rc[4]..vundle#config#init()

line 1:   if !exists('g:vundle#bundles') | let g:vundle#bundles = [] | endif
line 1:  let g:vundle#bundles = [] | endif
line 1:  endif
line 2:   call s:rtp_rm_a()
calling function vundle#begin[2]..vundle#rc[4]..vundle#config#init[2]..<SNR>12_rtp_rm_a()

line 1:   let paths = map(copy(g:vundle#bundles), 'v:val.rtpath')
line 2:   let prepends = join(paths, ',')
line 3:   let appends = join(paths, '/after,').'/after'
line 4:   exec 'set rtp-='.fnameescape(prepends)
line 4: set rtp-=
line 5:   exec 'set rtp-='.fnameescape(appends)
line 5: set rtp-=/after
function vundle#begin[2]..vundle#rc[4]..vundle#config#init[2]..<SNR>12_rtp_rm_a returning #0

continuing in function vundle#begin[2]..vundle#rc[4]..vundle#config#init

line 3:   let g:vundle#bundles = []
line 4:   let s:bundle_names = {}
function vundle#begin[2]..vundle#rc[4]..vundle#config#init returning #0

continuing in function vundle#begin[2]..vundle#rc

function vundle#begin[2]..vundle#rc returning #0

continuing in function vundle#begin

function vundle#begin returning #0

continuing in /home/computer/.vimrc

line 26: 
line 27: " alternatively, pass a path where Vundle should install plugins
line 28: " call vundle#begin('~/some/path/here')
line 29: 
line 30: " let Vundle manage Vundle, required
line 31: Plugin 'VundleVim/Vundle.vim'
line 31: call vundle#config#bundle('VundleVim/Vundle.vim')
calling function vundle#config#bundle('VundleVim/Vundle.vim')

line 1:   let bundle = vundle#config#init_bundle(a:arg, a:000)
calling function vundle#config#bundle[1]..vundle#config#init_bundle('VundleVim/Vundle.vim', [])

line 1:   if a:name != substitute(a:name, '^\s*\(.\{-}\)\s*$', '\1', '')
line 2:     echo "Spurious leading and/or trailing whitespace found in plugin spec '" . a:name . "'"
line 3:   endif
line 4:   let opts = extend(s:parse_options(a:opts), s:parse_name(substitute(a:name,"['".'"]\+','','g')), 'keep')
calling function vundle#config#bundle[1]..vundle#config#init_bundle[4]..<SNR>12_parse_options([])

line 1:   " TODO: improve this
line 2:   if len(a:opts) != 1 | return {} | endif
line 2:  return {} | endif
function vundle#config#bundle[1]..vundle#config#init_bundle[4]..<SNR>12_parse_options returning {}

continuing in function vundle#config#bundle[1]..vundle#config#init_bundle

calling function vundle#config#bundle[1]..vundle#config#init_bundle[4]..<SNR>12_parse_name('VundleVim/Vundle.vim')

line 1:   let arg = a:arg
line 2:   let git_proto = exists('g:vundle_default_git_proto') ? g:vundle_default_git_proto : 'https'
line 3: 
line 4:   if    arg =~? '^\s*\(gh\|github\):\S\+'  || arg =~? '^[a-z0-9][a-z0-9-]*/[^/]\+$'
line 6:     let uri = git_proto.'://github.com/'.split(arg, ':')[-1]
line 7:     if uri !~? '\.git$'
line 8:       let uri .= '.git'
line 9:     endif
line 10:     let name = substitute(split(uri,'\/')[-1], '\.git\s*$','','i')
line 11:   elseif arg =~? '^\s*\(git@\|git://\)\S\+'   || arg =~? '\(file\|https\?\)://'   || arg =~? '\.git\s*$'
line 14:     let uri = arg
line 15:     let name = split( substitute(uri,'/\?\.git\s*$','','i') ,'\/')[-1]
line 16:   else
line 17:     let name = arg
line 18:     let uri  = git_proto.'://github.com/vim-scripts/'.name.'.git'
line 19:   endif
line 20:   return {'name': name, 'uri': uri, 'name_spec': arg }
function vundle#config#bundle[1]..vundle#config#init_bundle[4]..<SNR>12_parse_name returning {'uri': 'https://github.com/VundleVim...m', 'name_spec': 'VundleVim/Vundle.vim'}

continuing in function vundle#config#bundle[1]..vundle#config#init_bundle

line 5:   let b = extend(opts, copy(s:bundle))
line 6:   let b.rtpath = s:rtpath(opts)
calling function vundle#config#bundle[1]..vundle#config#init_bundle[6]..<SNR>12_rtpath({'uri': 'https://github.com/VundleVim...eVim/Vundle.vim', 'path': function('1')})

line 1:   return has_key(a:opts, 'rtp') ? s:expand_path(a:opts.path().'/'.a:opts.rtp) : a:opts.path()
calling function vundle#config#bundle[1]..vundle#config#init_bundle[6]..<SNR>12_rtpath[1]..1()

line 1:   return s:expand_path(g:vundle#bundle_dir.'/') . self.name
calling function vundle#config#bundle[1]..vundle#config#init_bundle[6]..<SNR>12_rtpath[1]..1[1]..<SNR>12_expand_path('/home/computer/.vim/bundle/')

line 1:   return simplify(expand(a:path, 1))
function vundle#config#bundle[1]..vundle#config#init_bundle[6]..<SNR>12_rtpath[1]..1[1]..<SNR>12_expand_path returning '/home/computer/.vim/bundle/'

continuing in function vundle#config#bundle[1]..vundle#config#init_bundle[6]..<SNR>12_rtpath[1]..1

function vundle#config#bundle[1]..vundle#config#init_bundle[6]..<SNR>12_rtpath[1]..1 returning '/home/computer/.vim/bundle/Vundle.vim'

continuing in function vundle#config#bundle[1]..vundle#config#init_bundle[6]..<SNR>12_rtpath

function vundle#config#bundle[1]..vundle#config#init_bundle[6]..<SNR>12_rtpath returning '/home/computer/.vim/bundle/Vundle.vim'

continuing in function vundle#config#bundle[1]..vundle#config#init_bundle

line 7:   return b
function vundle#config#bundle[1]..vundle#config#init_bundle returning {'uri': 'https://github.com/VundleVim...eVim/Vundle.vim', 'path': function('1')}

continuing in function vundle#config#bundle

line 2:   if !s:check_bundle_name(bundle)
calling function vundle#config#bundle[2]..<SNR>12_check_bundle_name({'uri': 'https://github.com/VundleVim...eVim/Vundle.vim', 'path': function('1')})

line 1:   if has_key(s:bundle_names, a:bundle.name)
line 2:     echoerr 'Vundle error: Name collision for Plugin ' . a:bundle.name_spec . '. Plugin ' . s:bundle_names[a:bundle.name] . ' previously used the name "' . a:bundle.name . '"' . '. Skipping Plugin ' . a:bundle.name_spec . '.'
line 6:     return 0
line 7:   elseif a:bundle.name !~ '\v^[A-Za-z0-9_-]%(\.?[A-Za-z0-9_-])*$'
line 8:     echoerr 'Invalid plugin name: ' . a:bundle.name
line 9:     return 0
line 10:   endif
line 11:   let s:bundle_names[a:bundle.name] = a:bundle.name_spec
line 12:   return 1
function vundle#config#bundle[2]..<SNR>12_check_bundle_name returning #1

continuing in function vundle#config#bundle

line 3:     return
line 4:   endif
line 5:   if exists('g:vundle#lazy_load') && g:vundle#lazy_load
line 6:     call add(g:vundle#bundles, bundle)
line 7:   else
line 8:     call s:rtp_rm_a()
line 9:     call add(g:vundle#bundles, bundle)
line 10:     call s:rtp_add_a()
line 11:     call s:rtp_add_defaults()
line 12:   endif
line 13:   return bundle
function vundle#config#bundle returning {'uri': 'https://github.com/VundleVim...eVim/Vundle.vim', 'path': function('1')}

continuing in /home/computer/.vimrc

line 32: 
line 33: 
line 34: """"
line 35: "Other Plugins
line 36: """"
line 37: 
line 38: Plugin 'davidhalter/jedi-vim'
line 38: call vundle#config#bundle('davidhalter/jedi-vim')
calling function vundle#config#bundle('davidhalter/jedi-vim')

line 1:   let bundle = vundle#config#init_bundle(a:arg, a:000)
calling function vundle#config#bundle[1]..vundle#config#init_bundle('davidhalter/jedi-vim', [])

line 1:   if a:name != substitute(a:name, '^\s*\(.\{-}\)\s*$', '\1', '')
line 2:     echo "Spurious leading and/or trailing whitespace found in plugin spec '" . a:name . "'"
line 3:   endif
line 4:   let opts = extend(s:parse_options(a:opts), s:parse_name(substitute(a:name,"['".'"]\+','','g')), 'keep')
calling function vundle#config#bundle[1]..vundle#config#init_bundle[4]..<SNR>12_parse_options([])

line 1:   " TODO: improve this
line 2:   if len(a:opts) != 1 | return {} | endif
line 2:  return {} | endif
function vundle#config#bundle[1]..vundle#config#init_bundle[4]..<SNR>12_parse_options returning {}

continuing in function vundle#config#bundle[1]..vundle#config#init_bundle

calling function vundle#config#bundle[1]..vundle#config#init_bundle[4]..<SNR>12_parse_name('davidhalter/jedi-vim')

line 1:   let arg = a:arg
line 2:   let git_proto = exists('g:vundle_default_git_proto') ? g:vundle_default_git_proto : 'https'
line 3: 
line 4:   if    arg =~? '^\s*\(gh\|github\):\S\+'  || arg =~? '^[a-z0-9][a-z0-9-]*/[^/]\+$'
line 6:     let uri = git_proto.'://github.com/'.split(arg, ':')[-1]
line 7:     if uri !~? '\.git$'
line 8:       let uri .= '.git'
line 9:     endif
line 10:     let name = substitute(split(uri,'\/')[-1], '\.git\s*$','','i')
line 11:   elseif arg =~? '^\s*\(git@\|git://\)\S\+'   || arg =~? '\(file\|https\?\)://'   || arg =~? '\.git\s*$'
line 14:     let uri = arg
line 15:     let name = split( substitute(uri,'/\?\.git\s*$','','i') ,'\/')[-1]
line 16:   else
line 17:     let name = arg
line 18:     let uri  = git_proto.'://github.com/vim-scripts/'.name.'.git'
line 19:   endif
line 20:   return {'name': name, 'uri': uri, 'name_spec': arg }
function vundle#config#bundle[1]..vundle#config#init_bundle[4]..<SNR>12_parse_name returning {'uri': 'https://github.com/davidhalt...m', 'name_spec': 'davidhalter/jedi-vim'}

continuing in function vundle#config#bundle[1]..vundle#config#init_bundle

line 5:   let b = extend(opts, copy(s:bundle))
line 6:   let b.rtpath = s:rtpath(opts)
calling function vundle#config#bundle[1]..vundle#config#init_bundle[6]..<SNR>12_rtpath({'uri': 'https://github.com/davidhalt...halter/jedi-vim', 'path': function('1')})

line 1:   return has_key(a:opts, 'rtp') ? s:expand_path(a:opts.path().'/'.a:opts.rtp) : a:opts.path()
calling function vundle#config#bundle[1]..vundle#config#init_bundle[6]..<SNR>12_rtpath[1]..1()

line 1:   return s:expand_path(g:vundle#bundle_dir.'/') . self.name
calling function vundle#config#bundle[1]..vundle#config#init_bundle[6]..<SNR>12_rtpath[1]..1[1]..<SNR>12_expand_path('/home/computer/.vim/bundle/')

line 1:   return simplify(expand(a:path, 1))
function vundle#config#bundle[1]..vundle#config#init_bundle[6]..<SNR>12_rtpath[1]..1[1]..<SNR>12_expand_path returning '/home/computer/.vim/bundle/'

continuing in function vundle#config#bundle[1]..vundle#config#init_bundle[6]..<SNR>12_rtpath[1]..1

function vundle#config#bundle[1]..vundle#config#init_bundle[6]..<SNR>12_rtpath[1]..1 returning '/home/computer/.vim/bundle/jedi-vim'

continuing in function vundle#config#bundle[1]..vundle#config#init_bundle[6]..<SNR>12_rtpath

function vundle#config#bundle[1]..vundle#config#init_bundle[6]..<SNR>12_rtpath returning '/home/computer/.vim/bundle/jedi-vim'

continuing in function vundle#config#bundle[1]..vundle#config#init_bundle

line 7:   return b
function vundle#config#bundle[1]..vundle#config#init_bundle returning {'uri': 'https://github.com/davidhalt...halter/jedi-vim', 'path': function('1')}

continuing in function vundle#config#bundle

line 2:   if !s:check_bundle_name(bundle)
calling function vundle#config#bundle[2]..<SNR>12_check_bundle_name({'uri': 'https://github.com/davidhalt...halter/jedi-vim', 'path': function('1')})

line 1:   if has_key(s:bundle_names, a:bundle.name)
line 2:     echoerr 'Vundle error: Name collision for Plugin ' . a:bundle.name_spec . '. Plugin ' . s:bundle_names[a:bundle.name] . ' previously used the name "' . a:bundle.name . '"' . '. Skipping Plugin ' . a:bundle.name_spec . '.'
line 6:     return 0
line 7:   elseif a:bundle.name !~ '\v^[A-Za-z0-9_-]%(\.?[A-Za-z0-9_-])*$'
line 8:     echoerr 'Invalid plugin name: ' . a:bundle.name
line 9:     return 0
line 10:   endif
line 11:   let s:bundle_names[a:bundle.name] = a:bundle.name_spec
line 12:   return 1
function vundle#config#bundle[2]..<SNR>12_check_bundle_name returning #1

continuing in function vundle#config#bundle

line 3:     return
line 4:   endif
line 5:   if exists('g:vundle#lazy_load') && g:vundle#lazy_load
line 6:     call add(g:vundle#bundles, bundle)
line 7:   else
line 8:     call s:rtp_rm_a()
line 9:     call add(g:vundle#bundles, bundle)
line 10:     call s:rtp_add_a()
line 11:     call s:rtp_add_defaults()
line 12:   endif
line 13:   return bundle
function vundle#config#bundle returning {'uri': 'https://github.com/davidhalt...halter/jedi-vim', 'path': function('1')}

continuing in /home/computer/.vimrc

line 39: 
line 40: """"
line 41: 
line 42: " All of your Plugins must be added before the following line
line 43: call vundle#end()            " required
calling function vundle#end()

line 1:   unlet g:vundle#lazy_load
line 2:   call vundle#config#activate_bundles()
calling function vundle#end[2]..vundle#config#activate_bundles()

line 1:   call s:rtp_add_a()
calling function vundle#end[2]..vundle#config#activate_bundles[1]..<SNR>12_rtp_add_a()

line 1:   let paths = map(copy(g:vundle#bundles), 'v:val.rtpath')
line 2:   let prepends = join(paths, ',')
line 3:   let appends = join(paths, '/after,').'/after'
line 4:   exec 'set rtp^='.fnameescape(prepends)
line 4: set rtp^=/home/computer/.vim/bundle/Vundle.vim,/home/computer/.vim/bundle/jedi-vim
line 5:   exec 'set rtp+='.fnameescape(appends)
line 5: set rtp+=/home/computer/.vim/bundle/Vundle.vim/after,/home/computer/.vim/bundle/jedi-vim/after
function vundle#end[2]..vundle#config#activate_bundles[1]..<SNR>12_rtp_add_a returning #0

continuing in function vundle#end[2]..vundle#config#activate_bundles

line 2:   call s:rtp_add_defaults()
calling function vundle#end[2]..vundle#config#activate_bundles[2]..<SNR>12_rtp_add_defaults()

line 1:   let current = &rtp
line 2:   set rtp&vim
line 3:   let default = &rtp
line 4:   let &rtp = current
line 5:   let default_rtp_items = split(default, ',')
line 6:   if !empty(default_rtp_items)
line 7:     let first_item = fnameescape(default_rtp_items[0])
line 8:     exec 'set rtp-=' . first_item
line 8: set rtp-=/home/computer/.vim
line 9:     exec 'set rtp^=' . first_item
line 9: set rtp^=/home/computer/.vim
line 10:   endif
function vundle#end[2]..vundle#config#activate_bundles[2]..<SNR>12_rtp_add_defaults returning #0

continuing in function vundle#end[2]..vundle#config#activate_bundles

function vundle#end[2]..vundle#config#activate_bundles returning #0

continuing in function vundle#end

function vundle#end returning #0

continuing in /home/computer/.vimrc

line 44: filetype plugin indent on    " required
Searching for "filetype.vim" in "/home/computer/.vim,/home/computer/.vim/bundle/Vundle.vim,/home/computer/.vim/bundle/jedi-vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after,/home/computer/.vim/bundle/Vundle.vim,/home/computer/.vim/bundle/Vundle.vim/after,/home/computer/.vim/bundle/jedi-vim/after"
Searching for "/home/computer/.vim/filetype.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/filetype.vim"
Searching for "/home/computer/.vim/bundle/jedi-vim/filetype.vim"
Searching for "/var/lib/vim/addons/filetype.vim"
Searching for "/usr/share/vim/vimfiles/filetype.vim"
Searching for "/usr/share/vim/vim74/filetype.vim"
chdir(/usr/share/vim/vim74)
fchdir() to previous dir
line 44: sourcing "/usr/share/vim/vim74/filetype.vim"
line 1: " Vim support file to detect file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last Change:^I2015 Dec 03
line 5: 
line 6: " Listen very carefully, I will say this only once
line 7: if exists("did_load_filetypes")
line 8:   finish
finished sourcing /usr/share/vim/vim74/filetype.vim
continuing in /home/computer/.vimrc
Searching for "/usr/share/vim/vimfiles/after/filetype.vim"
Searching for "/var/lib/vim/addons/after/filetype.vim"
Searching for "/home/computer/.vim/after/filetype.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/filetype.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/after/filetype.vim"
Searching for "/home/computer/.vim/bundle/jedi-vim/after/filetype.vim"
Searching for "ftplugin.vim" in "/home/computer/.vim,/home/computer/.vim/bundle/Vundle.vim,/home/computer/.vim/bundle/jedi-vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after,/home/computer/.vim/bundle/Vundle.vim,/home/computer/.vim/bundle/Vundle.vim/after,/home/computer/.vim/bundle/jedi-vim/after"
Searching for "/home/computer/.vim/ftplugin.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/ftplugin.vim"
Searching for "/home/computer/.vim/bundle/jedi-vim/ftplugin.vim"
Searching for "/var/lib/vim/addons/ftplugin.vim"
Searching for "/usr/share/vim/vimfiles/ftplugin.vim"
Searching for "/usr/share/vim/vim74/ftplugin.vim"
chdir(/usr/share/vim/vim74)
fchdir() to previous dir
line 44: sourcing "/usr/share/vim/vim74/ftplugin.vim"
line 1: " Vim support file to switch on loading plugins for file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last change:^I2006 Apr 30
line 5: 
line 6: if exists("did_load_ftplugin")
line 7:   finish
line 8: endif
line 9: let did_load_ftplugin = 1
line 10: 
line 11: augroup filetypeplugin
line 12:   au FileType * call s:LoadFTPlugin()
line 13: 
line 14:   func! s:LoadFTPlugin()
line 35: augroup END
finished sourcing /usr/share/vim/vim74/ftplugin.vim
continuing in /home/computer/.vimrc
Searching for "/usr/share/vim/vimfiles/after/ftplugin.vim"
Searching for "/var/lib/vim/addons/after/ftplugin.vim"
Searching for "/home/computer/.vim/after/ftplugin.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/ftplugin.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/after/ftplugin.vim"
Searching for "/home/computer/.vim/bundle/jedi-vim/after/ftplugin.vim"
Searching for "indent.vim" in "/home/computer/.vim,/home/computer/.vim/bundle/Vundle.vim,/home/computer/.vim/bundle/jedi-vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after,/home/computer/.vim/bundle/Vundle.vim,/home/computer/.vim/bundle/Vundle.vim/after,/home/computer/.vim/bundle/jedi-vim/after"
Searching for "/home/computer/.vim/indent.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/indent.vim"
Searching for "/home/computer/.vim/bundle/jedi-vim/indent.vim"
Searching for "/var/lib/vim/addons/indent.vim"
Searching for "/usr/share/vim/vimfiles/indent.vim"
Searching for "/usr/share/vim/vim74/indent.vim"
chdir(/usr/share/vim/vim74)
fchdir() to previous dir
line 44: sourcing "/usr/share/vim/vim74/indent.vim"
line 1: " Vim support file to switch on loading indent files for file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last Change:^I2008 Feb 22
line 5: 
line 6: if exists("did_indent_on")
line 7:   finish
line 8: endif
line 9: let did_indent_on = 1
line 10: 
line 11: augroup filetypeindent
line 12:   au FileType * call s:LoadIndent()
line 13:   func! s:LoadIndent()
line 31: augroup END
finished sourcing /usr/share/vim/vim74/indent.vim
continuing in /home/computer/.vimrc
Searching for "/usr/share/vim/vimfiles/after/indent.vim"
Searching for "/var/lib/vim/addons/after/indent.vim"
Searching for "/home/computer/.vim/after/indent.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/indent.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/after/indent.vim"
Searching for "/home/computer/.vim/bundle/jedi-vim/after/indent.vim"
line 45: 
line 46: """"
line 47: 
line 48: " Set number lines
line 49: set number
line 50: 
line 51: " Enable folding
line 52: set foldmethod=indent
line 53: set foldlevel=99
line 54: 
line 55: " Enable folding with the spacebar
line 56: nnoremap <space> za
line 57: 
line 58: " Python
line 59: 
line 60: au BufNewFile,BufRead *.py set tabstop=4
line 61: au BufNewFile,BufRead *.py set softtabstop=4
line 62: au BufNewFile,BufRead *.py set shiftwidth=4
line 63: au BufNewFile,BufRead *.py set textwidth=79
line 64: au BufNewFile,BufRead *.py set expandtab
line 65: au BufNewFile,BufRead *.py set autoindent 
line 66: au BufNewFile         *.py set fileformat=unix
line 67: au BufNewFile         *.py set cursorline 
line 68: au BufNewFile         *.py set showmatch
line 69: 
line 70: "Web stuff
line 71: 
line 72: au BufNewFile,BufRead *.js, *.html, *.css set tabstop=2
line 73: au BufNewFile,BufRead *.js, *.html, *.css set softtabstop=2
line 74: au BufNewFile,BufRead *.js, *.html, *.css set shiftwidth=2
line 75: 
line 76: " C
line 77: 
line 78: au BufRead,BufNewFile *.c,*.h set expandtab
line 79: au BufRead,BufNewFile *.c,*.h set tabstop=4
line 80: au BufRead,BufNewFile *.c,*.h set shiftwidth=4
line 81: au BufRead,BufNewFile *.c,*.h set autoindent
line 82: au BufRead,BufNewFile *.c,*.h match BadWhitespace /^\t\+/
line 83: au BufRead,BufNewFile *.c,*.h match BadWhitespace /\s\+$/
line 84: au         BufNewFile *.c,*.h set fileformat=unix
line 85: au BufRead,BufNewFile *.c,*.h let b:comment_leader = '/* '
line 86: 
line 87: " Use the below highlight group when displaying bad whitespace is desired.
line 88: highlight BadWhitespace ctermbg=red guibg=red
line 89: au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
finished sourcing $HOME/.vimrc
Searching for "plugin/**/*.vim" in "/home/computer/.vim,/home/computer/.vim/bundle/Vundle.vim,/home/computer/.vim/bundle/jedi-vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after,/home/computer/.vim/bundle/Vundle.vim,/home/computer/.vim/bundle/Vundle.vim/after,/home/computer/.vim/bundle/jedi-vim/after"
Searching for "/home/computer/.vim/plugin/**/*.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/plugin/**/*.vim"
Searching for "/home/computer/.vim/bundle/jedi-vim/plugin/**/*.vim"
chdir(/home/computer/.vim/bundle/jedi-vim/plugin)
fchdir() to previous dir
sourcing "/home/computer/.vim/bundle/jedi-vim/plugin/jedi.vim"
line 1: "jedi-vim - Omni Completion for python in vim
line 2: " Maintainer: David Halter <davidhalter88@gmail.com>
line 3: "
line 4: " This part of the software is just the vim interface. The really big deal is
line 5: " the Jedi Python library.
line 6: 
line 7: if get(g:, 'jedi#auto_vim_configuration', 1)
line 8:     " jedi-vim doesn't work in compatible mode (vim script syntax problems)
line 9:     if &compatible
line 10:         " vint: -ProhibitSetNoCompatible
line 11:         set nocompatible
line 12:         " vint: +ProhibitSetNoCompatible
line 13:     endif
line 14: 
line 15:     " jedi-vim really needs, otherwise jedi-vim cannot start.
line 16:     filetype plugin on
Searching for "filetype.vim" in "/home/computer/.vim,/home/computer/.vim/bundle/Vundle.vim,/home/computer/.vim/bundle/jedi-vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after,/home/computer/.vim/bundle/Vundle.vim,/home/computer/.vim/bundle/Vundle.vim/after,/home/computer/.vim/bundle/jedi-vim/after"
Searching for "/home/computer/.vim/filetype.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/filetype.vim"
Searching for "/home/computer/.vim/bundle/jedi-vim/filetype.vim"
Searching for "/var/lib/vim/addons/filetype.vim"
Searching for "/usr/share/vim/vimfiles/filetype.vim"
Searching for "/usr/share/vim/vim74/filetype.vim"
chdir(/usr/share/vim/vim74)
fchdir() to previous dir
line 16: sourcing "/usr/share/vim/vim74/filetype.vim"
line 1: " Vim support file to detect file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last Change:^I2015 Dec 03
line 5: 
line 6: " Listen very carefully, I will say this only once
line 7: if exists("did_load_filetypes")
line 8:   finish
finished sourcing /usr/share/vim/vim74/filetype.vim
continuing in /home/computer/.vim/bundle/jedi-vim/plugin/jedi.vim
Searching for "/usr/share/vim/vimfiles/after/filetype.vim"
Searching for "/var/lib/vim/addons/after/filetype.vim"
Searching for "/home/computer/.vim/after/filetype.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/filetype.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/after/filetype.vim"
Searching for "/home/computer/.vim/bundle/jedi-vim/after/filetype.vim"
Searching for "ftplugin.vim" in "/home/computer/.vim,/home/computer/.vim/bundle/Vundle.vim,/home/computer/.vim/bundle/jedi-vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after,/home/computer/.vim/bundle/Vundle.vim,/home/computer/.vim/bundle/Vundle.vim/after,/home/computer/.vim/bundle/jedi-vim/after"
Searching for "/home/computer/.vim/ftplugin.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/ftplugin.vim"
Searching for "/home/computer/.vim/bundle/jedi-vim/ftplugin.vim"
Searching for "/var/lib/vim/addons/ftplugin.vim"
Searching for "/usr/share/vim/vimfiles/ftplugin.vim"
Searching for "/usr/share/vim/vim74/ftplugin.vim"
chdir(/usr/share/vim/vim74)
fchdir() to previous dir
line 16: sourcing "/usr/share/vim/vim74/ftplugin.vim"
line 1: " Vim support file to switch on loading plugins for file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last change:^I2006 Apr 30
line 5: 
line 6: if exists("did_load_ftplugin")
line 7:   finish
finished sourcing /usr/share/vim/vim74/ftplugin.vim
continuing in /home/computer/.vim/bundle/jedi-vim/plugin/jedi.vim
Searching for "/usr/share/vim/vimfiles/after/ftplugin.vim"
Searching for "/var/lib/vim/addons/after/ftplugin.vim"
Searching for "/home/computer/.vim/after/ftplugin.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/ftplugin.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/after/ftplugin.vim"
Searching for "/home/computer/.vim/bundle/jedi-vim/after/ftplugin.vim"
line 17: 
line 18:     " Change completeopt, but only if it has Vim's default value.
line 19:     let s:save_completeopt=&completeopt
line 20:     set completeopt&
line 21:     let s:default_completeopt=&completeopt
line 22:     let &completeopt=s:save_completeopt
line 23:     if s:default_completeopt == &completeopt
line 24:         set completeopt=menuone,longest,preview
line 25:     endif
line 26: 
line 27:     if len(mapcheck('<C-c>', 'i')) == 0
line 28:         inoremap <C-c> <ESC>
line 29:     endif
line 30: endif
line 31: 
line 32: " Pyimport command
line 33: command! -nargs=1 -complete=custom,jedi#py_import_completions Pyimport :call jedi#py_import(<q-args>)
line 34: 
line 35: command! -nargs=0 -bar JediDebugInfo call jedi#debug_info()
line 36: command! -nargs=0 -bang JediClearCache call jedi#clear_cache(<bang>0)
line 37: 
line 38: " vim: set et ts=4:
finished sourcing /home/computer/.vim/bundle/jedi-vim/plugin/jedi.vim
Searching for "/var/lib/vim/addons/plugin/**/*.vim"
Searching for "/usr/share/vim/vimfiles/plugin/**/*.vim"
Searching for "/usr/share/vim/vim74/plugin/**/*.vim"
chdir(/usr/share/vim/vim74/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim74/plugin/getscriptPlugin.vim"
line 1: " ---------------------------------------------------------------------
line 2: " getscriptPlugin.vim
line 3: "  Author:^ICharles E. Campbell
line 4: "  Date:^INov 29, 2013
line 5: "  Installing:^I:help glvs-install
line 6: "  Usage:^I:help glvs
line 7: "
line 8: " GetLatestVimScripts: 642 1 :AutoInstall: getscript.vim
line 9: "
line 10: " (Rom 15:11 WEB) Again, "Praise the Lord, all you Gentiles!  Let
line 11: " all the peoples praise Him."
line 12: " ---------------------------------------------------------------------
line 13: " Initialization:^I{{{1
line 14: " if you're sourcing this file, surely you can't be
line 15: " expecting vim to be in its vi-compatible mode
line 16: if exists("g:loaded_getscriptPlugin")
line 17:  finish
line 18: endif
line 19: if &cp
line 20:  if &verbose
line 21:   echo "GetLatestVimScripts is not vi-compatible; not loaded (you need to set nocp)"
line 22:  endif
line 23:  finish
line 24: endif
line 25: let g:loaded_getscriptPlugin = "v36"
line 26: let s:keepcpo                = &cpo
line 27: set cpo&vim
line 28: 
line 29: " ---------------------------------------------------------------------
line 30: "  Public Interface: {{{1
line 31: com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()
line 32: com!        -nargs=0 GetScripts          call getscript#GetLatestVimScripts()
line 33: silent! com -nargs=0 GLVS                call getscript#GetLatestVimScripts()
line 34: 
line 35: " ---------------------------------------------------------------------
line 36: " Restore Options: {{{1
line 37: let &cpo= s:keepcpo
line 38: unlet s:keepcpo
line 39: 
line 40: " ---------------------------------------------------------------------
line 41: " vim: ts=8 sts=2 fdm=marker nowrap
finished sourcing /usr/share/vim/vim74/plugin/getscriptPlugin.vim
chdir(/usr/share/vim/vim74/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim74/plugin/gzip.vim"
line 1: " Vim plugin for editing compressed files.
line 2: " Maintainer: Bram Moolenaar <Bram@vim.org>
line 3: " Last Change: 2010 Mar 10
line 4: 
line 5: " Exit quickly when:
line 6: " - this plugin was already loaded
line 7: " - when 'compatible' is set
line 8: " - some autocommands are already taking care of compressed files
line 9: if exists("loaded_gzip") || &cp || exists("#BufReadPre#*.gz")
line 10:   finish
line 11: endif
line 12: let loaded_gzip = 1
line 13: 
line 14: augroup gzip
line 15:   " Remove all gzip autocommands
line 16:   au!
line 17: 
line 18:   " Enable editing of gzipped files.
line 19:   " The functions are defined in autoload/gzip.vim.
line 20:   "
line 21:   " Set binary mode before reading the file.
line 22:   " Use "gzip -d", gunzip isn't always available.
line 23:   autocmd BufReadPre,FileReadPre^I*.gz,*.bz2,*.Z,*.lzma,*.xz setlocal bin
line 24:   autocmd BufReadPost,FileReadPost^I*.gz  call gzip#read("gzip -dn")
line 25:   autocmd BufReadPost,FileReadPost^I*.bz2 call gzip#read("bzip2 -d")
line 26:   autocmd BufReadPost,FileReadPost^I*.Z   call gzip#read("uncompress")
line 27:   autocmd BufReadPost,FileReadPost^I*.lzma call gzip#read("lzma -d")
line 28:   autocmd BufReadPost,FileReadPost^I*.xz  call gzip#read("xz -d")
line 29:   autocmd BufWritePost,FileWritePost^I*.gz  call gzip#write("gzip")
line 30:   autocmd BufWritePost,FileWritePost^I*.bz2 call gzip#write("bzip2")
line 31:   autocmd BufWritePost,FileWritePost^I*.Z   call gzip#write("compress -f")
line 32:   autocmd BufWritePost,FileWritePost^I*.lzma call gzip#write("lzma -z")
line 33:   autocmd BufWritePost,FileWritePost^I*.xz  call gzip#write("xz -z")
line 34:   autocmd FileAppendPre^I^I^I*.gz  call gzip#appre("gzip -dn")
line 35:   autocmd FileAppendPre^I^I^I*.bz2 call gzip#appre("bzip2 -d")
line 36:   autocmd FileAppendPre^I^I^I*.Z   call gzip#appre("uncompress")
line 37:   autocmd FileAppendPre^I^I^I*.lzma call gzip#appre("lzma -d")
line 38:   autocmd FileAppendPre^I^I^I*.xz   call gzip#appre("xz -d")
line 39:   autocmd FileAppendPost^I^I*.gz  call gzip#write("gzip")
line 40:   autocmd FileAppendPost^I^I*.bz2 call gzip#write("bzip2")
line 41:   autocmd FileAppendPost^I^I*.Z   call gzip#write("compress -f")
line 42:   autocmd FileAppendPost^I^I*.lzma call gzip#write("lzma -z")
line 43:   autocmd FileAppendPost^I^I*.xz call gzip#write("xz -z")
line 44: augroup END
finished sourcing /usr/share/vim/vim74/plugin/gzip.vim
chdir(/usr/share/vim/vim74/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim74/plugin/logiPat.vim"
line 1: " LogiPat:
line 2: "   Author:  Charles E. Campbell
line 3: "   Date:    Mar 13, 2013
line 4: "   Version: 3
line 5: "   Purpose: to do Boolean-logic based regular expression pattern matching
line 6: " Copyright:    Copyright (C) 1999-2011 Charles E. Campbell {{{1
line 7: "               Permission is hereby granted to use and distribute this code,
line 8: "               with or without modifications, provided that this copyright
line 9: "               notice is copied with it. Like most anything else that's free,
line 10: "               LogiPat.vim is provided *as is* and comes with no warranty
line 11: "               of any kind, either expressed or implied. By using this
line 12: "               plugin, you agree that in no event will the copyright
line 13: "               holder be liable for any damages resulting from the use
line 14: "               of this software.
line 15: "
line 16: "   Usage: {{{1
line 17: "       :LogiPat ...
line 18: "
line 19: "         Boolean logic supported:
line 20: "            () grouping operators
line 21: "            !  not the following pattern
line 22: "            |  logical or
line 23: "            &  logical and
line 24: "            "..pattern.."
line 25: "^IExample: {{{1
line 26: "^I^I:LogiPat !("january"|"february")
line 27: "^I^I  would match all strings not containing the strings january
line 28: "^I^I  or february
line 29: "^IGetLatestVimScripts: 1290 1 :AutoInstall: LogiPat.vim
line 30: "
line 31: "  Behold, you will conceive in your womb, and bring forth a son, {{{1
line 32: "  and will call his name Jesus. He will be great, and will be
line 33: "  called the Son of the Most High. The Lord God will give him the
line 34: "  throne of his father, David, and he will reign over the house of
line 35: "  Jacob forever. There will be no end to his kingdom. (Luke 1:31-33 WEB)
line 36: 
line 37: " ---------------------------------------------------------------------
line 38: " Load Once: {{{1
line 39: if &cp || exists("loaded_logipat")
line 40:  finish
line 41: endif
line 42: let g:loaded_LogiPat = "v3"
line 43: let s:keepcpo        = &cpo
line 44: set cpo&vim
line 45: "DechoRemOn
line 46: 
line 47: " ---------------------------------------------------------------------
line 48: " Public Interface: {{{1
line 49: com!        -nargs=* LogiPat^I^Icall   LogiPat(<q-args>,1)
line 50: silent! com -nargs=* LP^I^I^I^Icall   LogiPat(<q-args>,1)
line 51: com!        -nargs=+ ELP^I^I^Iechomsg   LogiPat(<q-args>)
line 52: com!        -nargs=+ LogiPatFlags^Ilet  s:LogiPatFlags="<args>"
line 53: silent! com -nargs=+ LPF^I^I^Ilet  s:LogiPatFlags="<args>"
line 54: 
line 55: " =====================================================================
line 56: " Functions: {{{1
line 57: 
line 58: " ---------------------------------------------------------------------
line 59: " LogiPat: this function interprets the boolean-logic pattern {{{2
line 60: fun! LogiPat(pat,...)
line 142: 
line 143: " ---------------------------------------------------------------------
line 144: " s:String: Vim6.4 doesn't have string() {{{2
line 145: func! s:String(str)
line 148: 
line 149: " ---------------------------------------------------------------------
line 150: " LP_PatPush: {{{2
line 151: fun! s:LP_PatPush(pat)
line 158: 
line 159: " ---------------------------------------------------------------------
line 160: " LP_PatPop: pop a number/variable from LogiPat's pattern stack {{{2
line 161: fun! s:LP_PatPop(lookup)
line 174: 
line 175: " ---------------------------------------------------------------------
line 176: " LP_OpPush: {{{2
line 177: fun! s:LP_OpPush(op)
line 228: 
line 229: " ---------------------------------------------------------------------
line 230: " LP_Execute: execute operators from opstack using pattern stack {{{2
line 231: fun! s:LP_Execute(preclvl)
line 261: 
line 262: " ---------------------------------------------------------------------
line 263: " LP_Not: writes a logical-not for a pattern {{{2
line 264: fun! s:LP_Not(pat)
line 275: 
line 276: " ---------------------------------------------------------------------
line 277: " LP_Or: writes a logical-or branch using two patterns {{{2
line 278: fun! s:LP_Or(pat1,pat2)
line 284: 
line 285: " ---------------------------------------------------------------------
line 286: " LP_And: writes a logical-and concat using two patterns {{{2
line 287: fun! s:LP_And(pat1,pat2)
line 293: 
line 294: " ---------------------------------------------------------------------
line 295: " StackLook: {{{2
line 296: fun! s:StackLook(description)
line 330: 
line 331: " ---------------------------------------------------------------------
line 332: "  Cleanup And Modeline: {{{1
line 333: let &cpo= s:keepcpo
line 334: unlet s:keepcpo
line 335: " vim: ts=4 fdm=marker
finished sourcing /usr/share/vim/vim74/plugin/logiPat.vim
chdir(/usr/share/vim/vim74/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim74/plugin/matchparen.vim"
line 1: " Vim plugin for showing matching parens
line 2: " Maintainer:  Bram Moolenaar <Bram@vim.org>
line 3: " Last Change: 2016 Feb 16
line 4: 
line 5: " Exit quickly when:
line 6: " - this plugin was already loaded (or disabled)
line 7: " - when 'compatible' is set
line 8: " - the "CursorMoved" autocmd event is not available.
line 9: if exists("g:loaded_matchparen") || &cp || !exists("##CursorMoved")
line 10:   finish
line 11: endif
line 12: let g:loaded_matchparen = 1
line 13: 
line 14: if !exists("g:matchparen_timeout")
line 15:   let g:matchparen_timeout = 300
line 16: endif
line 17: if !exists("g:matchparen_insert_timeout")
line 18:   let g:matchparen_insert_timeout = 60
line 19: endif
line 20: 
line 21: augroup matchparen
line 22:   " Replace all matchparen autocommands
line 23:   autocmd! CursorMoved,CursorMovedI,WinEnter * call s:Highlight_Matching_Pair()
line 24:   if exists('##TextChanged')
line 25:     autocmd! TextChanged,TextChangedI * call s:Highlight_Matching_Pair()
line 26:   endif
line 27: augroup END
line 28: 
line 29: " Skip the rest if it was already done.
line 30: if exists("*s:Highlight_Matching_Pair")
line 31:   finish
line 32: endif
line 33: 
line 34: let s:cpo_save = &cpo
line 35: set cpo-=C
line 36: 
line 37: " The function that is invoked (very often) to define a ":match" highlighting
line 38: " for any matching paren.
line 39: function! s:Highlight_Matching_Pair()
line 187: 
line 188: " Define commands that will disable and enable the plugin.
line 190: command! NoMatchParen windo silent! call matchdelete(3) | unlet! g:loaded_matchparen | au! matchparen
line 191: command! DoMatchParen runtime plugin/matchparen.vim | windo doau CursorMoved
line 192: 
line 193: let &cpo = s:cpo_save
line 194: unlet s:cpo_save
finished sourcing /usr/share/vim/vim74/plugin/matchparen.vim
chdir(/usr/share/vim/vim74/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim74/plugin/netrwPlugin.vim"
line 1: " netrwPlugin.vim: Handles file transfer and remote directory listing across a network
line 2: "            PLUGIN SECTION
line 3: " Date:^I^IFeb 08, 2016
line 4: " Maintainer:^ICharles E Campbell <NdrOchip@ScampbellPfamily.AbizM-NOSPAM>
line 5: " GetLatestVimScripts: 1075 1 :AutoInstall: netrw.vim
line 6: " Copyright:    Copyright (C) 1999-2013 Charles E. Campbell {{{1
line 7: "               Permission is hereby granted to use and distribute this code,
line 8: "               with or without modifications, provided that this copyright
line 9: "               notice is copied with it. Like anything else that's free,
line 10: "               netrw.vim, netrwPlugin.vim, and netrwSettings.vim are provided
line 11: "               *as is* and comes with no warranty of any kind, either
line 12: "               expressed or implied. By using this plugin, you agree that
line 13: "               in no event will the copyright holder be liable for any damages
line 14: "               resulting from the use of this software.
line 15: "
line 16: "  But be doers of the Word, and not only hearers, deluding your own selves {{{1
line 17: "  (James 1:22 RSV)
line 18: " =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
line 19: " Load Once: {{{1
line 20: if &cp || exists("g:loaded_netrwPlugin")
line 21:  finish
line 22: endif
line 23: let g:loaded_netrwPlugin = "v155"
line 24: let s:keepcpo = &cpo
line 25: set cpo&vim
line 26: "DechoRemOn
line 27: 
line 28: " ---------------------------------------------------------------------
line 29: " Public Interface: {{{1
line 30: 
line 31: " Local Browsing Autocmds: {{{2
line 32: augroup FileExplorer
line 33:  au!
line 34:  au BufLeave *  if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
line 35:  au BufEnter *^Isil call s:LocalBrowse(expand("<amatch>"))
line 36:  au VimEnter *^Isil call s:VimEnter(expand("<amatch>"))
line 37:  if has("win32") || has("win95") || has("win64") || has("win16")
line 38:   au BufEnter .* sil call s:LocalBrowse(expand("<amatch>"))
line 39:  endif
line 40: augroup END
line 41: 
line 42: " Network Browsing Reading Writing: {{{2
line 43: augroup Network
line 44:  au!
line 45:  au BufReadCmd   file://*^I^I^I^I^I^I^I^I^I^I^Icall netrw#FileUrlRead(expand("<amatch>"))
line 46:  au BufReadCmd   ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe "sil doau BufReadPre ".fnameescape(expand("<amatch>"))|call netrw#Nread(2,expand("<amatch>"))|exe "sil doau BufReadPost ".fnameescape(expand("<amatch>"))
line 47:  au FileReadCmd  ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe "sil doau FileReadPre ".fnameescape(expand("<amatch>"))|call netrw#Nread(1,expand("<amatch>"))|exe "sil doau FileReadPost ".fnameescape(expand("<amatch>"))
line 48:  au BufWriteCmd  ftp://*,rcp://*,scp://*,http://*,file://*,dav://*,davs://*,rsync://*,sftp://*^I^I^Iexe "sil doau BufWritePre ".fnameescape(expand("<amatch>"))|exe 'Nwrite '.fnameescape(expand("<amatch>"))|exe "sil doau BufWritePost ".fnameescape(expand("<amatch>"))
line 49:  au FileWriteCmd ftp://*,rcp://*,scp://*,http://*,file://*,dav://*,davs://*,rsync://*,sftp://*^I^I^Iexe "sil doau FileWritePre ".fnameescape(expand("<amatch>"))|exe "'[,']".'Nwrite '.fnameescape(expand("<amatch>"))|exe "sil doau FileWritePost ".fnameescape(expand("<amatch>"))
line 50:  try                                                       
line 51:   au SourceCmd   ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe 'Nsource '.fnameescape(expand("<amatch>"))
line 52:  catch /^Vim\%((\a\+)\)\=:E216/                            
line 53:   au SourcePre   ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe 'Nsource '.fnameescape(expand("<amatch>"))
line 54:  endtry
line 55: augroup END
line 56: 
line 57: " Commands: :Nread, :Nwrite, :NetUserPass {{{2
line 58: com! -count=1 -nargs=*^INread^I^Ilet s:svpos= winsaveview()<bar>call netrw#NetRead(<count>,<f-args>)<bar>call winrestview(s:svpos)
line 59: com! -range=% -nargs=*^INwrite^I^Ilet s:svpos= winsaveview()<bar><line1>,<line2>call netrw#NetWrite(<f-args>)<bar>call winrestview(s:svpos)
line 60: com! -nargs=*^I^INetUserPass^Icall NetUserPass(<f-args>)
line 61: com! -nargs=*^I        Nsource^I^Ilet s:svpos= winsaveview()<bar>call netrw#NetSource(<f-args>)<bar>call winrestview(s:svpos)
line 62: com! -nargs=?^I^INtree^I^Icall netrw#SetTreetop(<q-args>)
line 63: 
line 64: " Commands: :Explore, :Sexplore, Hexplore, Vexplore, Lexplore {{{2
line 65: com! -nargs=* -bar -bang -count=0 -complete=dir^IExplore^I^Icall netrw#Explore(<count>,0,0+<bang>0,<q-args>)
line 66: com! -nargs=* -bar -bang -count=0 -complete=dir^ISexplore^Icall netrw#Explore(<count>,1,0+<bang>0,<q-args>)
line 67: com! -nargs=* -bar -bang -count=0 -complete=dir^IHexplore^Icall netrw#Explore(<count>,1,2+<bang>0,<q-args>)
line 68: com! -nargs=* -bar -bang -count=0 -complete=dir^IVexplore^Icall netrw#Explore(<count>,1,4+<bang>0,<q-args>)
line 69: com! -nargs=* -bar       -count=0 -complete=dir^ITexplore^Icall netrw#Explore(<count>,0,6        ,<q-args>)
line 70: com! -nargs=* -bar -bang^I^I^INexplore^Icall netrw#Explore(-1,0,0,<q-args>)
line 71: com! -nargs=* -bar -bang^I^I^IPexplore^Icall netrw#Explore(-2,0,0,<q-args>)
line 72: com! -nargs=* -bar -bang -count=0 -complete=dir Lexplore^Icall netrw#Lexplore(<count>,<bang>0,<q-args>)
line 73: 
line 74: " Commands: NetrwSettings {{{2
line 75: com! -nargs=0^INetrwSettings^Icall netrwSettings#NetrwSettings()
line 76: com! -bang^INetrwClean^Icall netrw#Clean(<bang>0)
line 77: 
line 78: " Maps:
line 79: if !exists("g:netrw_nogx")
line 80:  if maparg('gx','n') == ""
line 81:   if !hasmapto('<Plug>NetrwBrowseX')
line 82:    nmap <unique> gx <Plug>NetrwBrowseX
line 83:   endif
line 84:   nno <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(expand((exists("g:netrw_gx")? g:netrw_gx : '<cfile>')),netrw#CheckIfRemote())<cr>
line 85:  endif
line 86:  if maparg('gx','v') == ""
line 87:   if !hasmapto('<Plug>NetrwBrowseXVis')
line 88:    vmap <unique> gx <Plug>NetrwBrowseXVis
line 89:   endif
line 90:   vno <silent> <Plug>NetrwBrowseXVis :<c-u>call netrw#BrowseXVis()<cr>
line 91:  endif
line 92: endif
line 93: if exists("g:netrw_usetab") && g:netrw_usetab
line 94:  if maparg('<c-tab>','n') == ""
line 95:   nmap <unique> <c-tab> <Plug>NetrwShrink
line 96:  endif
line 97:  nno <silent> <Plug>NetrwShrink :call netrw#Shrink()<cr>
line 98: endif
line 99: 
line 100: " ---------------------------------------------------------------------
line 101: " LocalBrowse: invokes netrw#LocalBrowseCheck() on directory buffers {{{2
line 102: fun! s:LocalBrowse(dirname)
line 148: 
line 149: " ---------------------------------------------------------------------
line 150: " s:VimEnter: after all vim startup stuff is done, this function is called. {{{2
line 151: "             Its purpose: to look over all windows and run s:LocalBrowse() on
line 152: "             them, which checks if they're directories and will create a directory
line 153: "             listing when appropriate.
line 154: "             It also sets s:vimentered, letting s:LocalBrowse() know that s:VimEnter()
line 155: "             has already been called.
line 156: fun! s:VimEnter(dirname)
line 164: 
line 165: " ---------------------------------------------------------------------
line 166: " NetrwStatusLine: {{{1
line 167: fun! NetrwStatusLine()
line 178: 
line 179: " ------------------------------------------------------------------------
line 180: " NetUserPass: set username and password for subsequent ftp transfer {{{1
line 181: "   Usage:  :call NetUserPass()^I^I^I-- will prompt for userid and password
line 182: "^I    :call NetUserPass("uid")^I^I-- will prompt for password
line 183: "^I    :call NetUserPass("uid","password") -- sets global userid and password
line 184: fun! NetUserPass(...)
line 208: 
line 209: " ------------------------------------------------------------------------
line 210: " Modelines And Restoration: {{{1
line 211: let &cpo= s:keepcpo
line 212: unlet s:keepcpo
line 213: " vim:ts=8 fdm=marker
finished sourcing /usr/share/vim/vim74/plugin/netrwPlugin.vim
chdir(/usr/share/vim/vim74/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim74/plugin/rrhelper.vim"
line 1: " Vim plugin with helper function(s) for --remote-wait
line 2: " Maintainer: Flemming Madsen <fma@cci.dk>
line 3: " Last Change: 2008 May 29
line 4: 
line 5: " Has this already been loaded?
line 6: if exists("loaded_rrhelper") || !has("clientserver")
line 7:   finish
finished sourcing /usr/share/vim/vim74/plugin/rrhelper.vim
chdir(/usr/share/vim/vim74/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim74/plugin/spellfile.vim"
line 1: " Vim plugin for downloading spell files
line 2: " Maintainer:  Bram Moolenaar <Bram@vim.org>
line 3: " Last Change: 2006 Feb 01
line 4: 
line 5: " Exit quickly when:
line 6: " - this plugin was already loaded
line 7: " - when 'compatible' is set
line 8: " - some autocommands are already taking care of spell files
line 9: if exists("loaded_spellfile_plugin") || &cp || exists("#SpellFileMissing")
line 10:   finish
line 11: endif
line 12: let loaded_spellfile_plugin = 1
line 13: 
line 14: " The function is in the autoload directory.
line 15: autocmd SpellFileMissing * call spellfile#LoadFile(expand('<amatch>'))
finished sourcing /usr/share/vim/vim74/plugin/spellfile.vim
chdir(/usr/share/vim/vim74/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim74/plugin/tarPlugin.vim"
line 1: " tarPlugin.vim -- a Vim plugin for browsing tarfiles
line 2: " Original was copyright (c) 2002, Michael C. Toren <mct@toren.net>
line 3: " Modified by Charles E. Campbell
line 4: " Distributed under the GNU General Public License.
line 5: "
line 6: " Updates are available from <http://michael.toren.net/code/>.  If you
line 7: " find this script useful, or have suggestions for improvements, please
line 8: " let me know.
line 9: " Also look there for further comments and documentation.
line 10: "
line 11: " This part only sets the autocommands.  The functions are in autoload/tar.vim.
line 12: " ---------------------------------------------------------------------
line 13: "  Load Once: {{{1
line 14: if &cp || exists("g:loaded_tarPlugin")
line 15:  finish
line 16: endif
line 17: let g:loaded_tarPlugin = "v29"
line 18: let s:keepcpo          = &cpo
line 19: set cpo&vim
line 20: 
line 21: " ---------------------------------------------------------------------
line 22: "  Public Interface: {{{1
line 23: augroup tar
line 24:   au!
line 25:   au BufReadCmd   tarfile::*^Icall tar#Read(expand("<amatch>"), 1)
line 26:   au FileReadCmd  tarfile::*^Icall tar#Read(expand("<amatch>"), 0)
line 27:   au BufWriteCmd  tarfile::*^Icall tar#Write(expand("<amatch>"))
line 28:   au FileWriteCmd tarfile::*^Icall tar#Write(expand("<amatch>"))
line 29: 
line 30:   if has("unix")
line 31:    au BufReadCmd   tarfile::*/*^Icall tar#Read(expand("<amatch>"), 1)
line 32:    au FileReadCmd  tarfile::*/*^Icall tar#Read(expand("<amatch>"), 0)
line 33:    au BufWriteCmd  tarfile::*/*^Icall tar#Write(expand("<amatch>"))
line 34:    au FileWriteCmd tarfile::*/*^Icall tar#Write(expand("<amatch>"))
line 35:   endif
line 36: 
line 37:   au BufReadCmd   *.tar.gz^I^Icall tar#Browse(expand("<amatch>"))
line 38:   au BufReadCmd   *.tar^I^I^Icall tar#Browse(expand("<amatch>"))
line 39:   au BufReadCmd   *.lrp^I^I^Icall tar#Browse(expand("<amatch>"))
line 40:   au BufReadCmd   *.tar.bz2^I^Icall tar#Browse(expand("<amatch>"))
line 41:   au BufReadCmd   *.tar.Z^I^Icall tar#Browse(expand("<amatch>"))
line 42:   au BufReadCmd   *.tgz^I^I^Icall tar#Browse(expand("<amatch>"))
line 43:   au BufReadCmd   *.tar.lzma^Icall tar#Browse(expand("<amatch>"))
line 44:   au BufReadCmd   *.tar.xz^I^Icall tar#Browse(expand("<amatch>"))
line 45:   au BufReadCmd   *.txz^I^I^Icall tar#Browse(expand("<amatch>"))
line 46: augroup END
line 47: com! -nargs=? -complete=file Vimuntar call tar#Vimuntar(<q-args>)
line 48: 
line 49: " ---------------------------------------------------------------------
line 50: " Restoration And Modelines: {{{1
line 51: " vim: fdm=marker
line 52: let &cpo= s:keepcpo
line 53: unlet s:keepcpo
finished sourcing /usr/share/vim/vim74/plugin/tarPlugin.vim
chdir(/usr/share/vim/vim74/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim74/plugin/tohtml.vim"
line 1: " Vim plugin for converting a syntax highlighted file to HTML.
line 2: " Maintainer: Ben Fritz <fritzophrenic@gmail.com>
line 3: " Last Change: 2015 Sep 08
line 4: "
line 5: " The core of the code is in $VIMRUNTIME/autoload/tohtml.vim and
line 6: " $VIMRUNTIME/syntax/2html.vim
line 7: "
line 8: " TODO: {{{
line 9: "   * Options for generating the CSS in external style sheets. New :TOcss
line 10: "     command to convert the current color scheme into a (mostly) generic CSS
line 11: "     stylesheet which can be re-used. Alternate stylesheet support? Good start
line 12: "     by Erik Falor
line 13: "     ( https://groups.google.com/d/topic/vim_use/7XTmC4D22dU/discussion ).
line 14: "   * Add optional argument to :TOhtml command to specify mode (gui, cterm,
line 15: "     term) to use for the styling. Suggestion by "nacitar".
line 16: "   * Add way to override or specify which RGB colors map to the color numbers
line 17: "     in cterm. Get better defaults than just guessing? Suggestion by "nacitar".
line 18: "   * Disable filetype detection until after all processing is done.
line 19: "   * Add option for not generating the hyperlink on stuff that looks like a
line 20: "     URL? Or just color the link to fit with the colorscheme (and only special
line 21: "     when hovering)?
line 22: "   * Bug: Opera does not allow printing more than one page if uncopyable
line 23: "     regions is turned on. Possible solution: Add normal text line numbers with
line 24: "     display:none, set to display:inline for print style sheets, and hide
line 25: "     <input> elements for print, to allow Opera printing multiple pages (and
line 26: "     other uncopyable areas?). May need to make the new text invisible to IE
line 27: "     with conditional comments to prevent copying it, IE for some reason likes
line 28: "     to copy hidden text. Other browsers too?
line 29: "   * Bug: still a 1px gap throughout the fold column when html_prevent_copy is
line 30: "     "fn" in some browsers. Specifically, in Chromium on Ubuntu (but not Chrome
line 31: "     on Windows). Perhaps it is font related?
line 32: "   * Bug: still some gaps in the fold column when html_prevent_copy contains
line 33: "     'd' and showing the whole diff (observed in multiple browsers). Only gaps
line 34: "     on diff lines though.
line 35: "   * Undercurl support via CSS3, with fallback to dotted or something:
line 36: "^Ihttps://groups.google.com/d/topic/vim_use/BzXA6He1pHg/discussion
line 37: "   * Redo updates for modified default foldtext (v11) when/if the patch is
line 38: "     accepted to modify it.
line 39: "   * Test case +diff_one_file-dynamic_folds+expand_tabs-hover_unfold
line 40: "^I^I+ignore_conceal-ignore_folding+no_foldcolumn+no_pre+no_progress
line 41: "^I^I+number_lines-pre_wrap-use_css+use_xhtml+whole_filler.xhtml
line 42: "     does not show the whole diff filler as it is supposed to?
line 43: "   * Bug: when 'isprint' is wrong for the current encoding, will generate
line 44: "     invalid content. Can/should anything be done about this? Maybe a separate
line 45: "     plugin to correct 'isprint' based on encoding?
line 46: "   * Check to see if the windows-125\d encodings actually work in Unix without
line 47: "     the 8bit- prefix. Add prefix to autoload dictionaries for Unix if not.
line 48: "   * Font auto-detection similar to
line 49: "     http://www.vim.org/scripts/script.php?script_id=2384 but for a variety of
line 50: "     platforms.
line 51: "   * Error thrown when sourcing 2html.vim directly when plugins are not loaded.
line 52: "   * Pull in code from http://www.vim.org/scripts/script.php?script_id=3113 :
line 53: "^I- listchars support
line 54: "^I- full-line background highlight
line 55: "^I- other?
line 56: "   * Make it so deleted lines in a diff don't create side-scrolling (get it
line 57: "     free with full-line background highlight above).
line 58: "   * Restore open/closed folds and cursor position after processing each file
line 59: "     with option not to restore for speed increase.
line 60: "   * Add extra meta info (generation time, etc.)?
line 61: "   * Tidy up so we can use strict doctype in even more situations
line 62: "   * Implementation detail: add threshold for writing the lines to the html
line 63: "     buffer before we're done (5000 or so lines should do it)
line 64: "   * TODO comments for code cleanup scattered throughout
line 65: "}}}
line 66: 
line 67: if exists('g:loaded_2html_plugin')
line 68:   finish
line 69: endif
line 70: let g:loaded_2html_plugin = 'vim7.4_v2'
line 71: 
line 72: "
line 73: " Changelog: {{{
line 74: "   7.4_v2  (this version): Fix error raised when converting a diff containing
line 75: "                           an empty buffer. Jan Stocker: allow g:html_font to
line 76: "                           take a list so it is easier to specfiy fallback
line 77: "                           fonts in the generated CSS.
line 78: "   7.4_v1  (Vim 7.4.0000): Fix modeline mangling for new "Vim:" format, and
line 79: "^I^I^I    also for version-specific modelines like "vim>703:".
line 80: "
line 81: "   7.3 updates: {{{
line 82: "   7.3_v14 (Vim 7.3.1246): Allow suppressing line number anchors using
line 83: "^I^I^I    g:html_line_ids=0. Allow customizing
line 84: "^I^I^I    important IDs (like line IDs and fold IDs) using
line 85: "^I^I^I    g:html_id_expr evalutated when the buffer conversion
line 86: "^I^I^I    is started.
line 87: "   7.3_v13 (Vim 7.3.1088): Keep foldmethod at manual in the generated file and
line 88: "^I^I^I    insert modeline to set it to manual.
line 89: "^I^I^I    Fix bug: diff mode with 2 unsaved buffers creates a
line 90: "^I^I^I    duplicate of one buffer instead of including both.
line 91: "^I^I^I    Add anchors to each line so you can put '#L123'
line 92: "^I^I^I    or '#123' at the end of the URL to jump to line 123
line 93: "^I^I^I    (idea by Andy Spencer). Add javascript to open folds
line 94: "^I^I^I    to show the anchor being jumped to if it is hidden.
line 95: "^I^I^I    Fix XML validation error: &nsbp; not part of XML.
line 96: "^I^I^I    Allow TOhtml to chain together with other commands
line 97: "^I^I^I    using |.
line 98: "   7.3_v12 (Vim 7.3.0616): Fix modeline mangling to also work for when multiple
line 99: "^I^I^I    highlight groups make up the start-of-modeline text.
line 100: "^I^I^I    Improve render time of page with uncopyable regions
line 101: "^I^I^I    by not using one-input-per-char. Change name of
line 102: "^I^I^I    uncopyable option from html_unselectable to
line 103: "^I^I^I    html_prevent_copy. Added html_no_invalid option and
line 104: "^I^I^I    default to inserting invalid markup for uncopyable
line 105: "^I^I^I    regions to prevent MS Word from pasting undeletable
line 106: "^I^I^I    <input> elements. Fix 'cpo' handling (Thilo Six).
line 107: "^I^I 7.3_v12b1: Add html_unselectable option. Rework logic to
line 108: "^I^I^I    eliminate post-processing substitute commands in
line 109: "^I^I^I    favor of doing the work up front. Remove unnecessary
line 110: "^I^I^I    special treatment of 'LineNr' highlight group. Minor
line 111: "^I^I^I    speed improvements. Fix modeline mangling in
line 112: "^I^I^I    generated output so it works for text in the first
line 113: "^I^I^I    column. Fix missing line number and fold column in
line 114: "^I^I^I    diff filler lines. Fix that some fonts have a 1px
line 115: "^I^I^I    gap (using a dirty hack, improvements welcome). Add
line 116: "^I^I^I    "colorscheme" meta tag. Does NOT include support for
line 117: "^I^I^I    the new default foldtext added in v11, as the patch
line 118: "^I^I^I    adding it has not yet been included in Vim.
line 119: "   7.3_v11 ( unreleased ): Support new default foldtext from patch by Christian
line 120: "^I^I^I    Brabandt in
line 121: "^I^I^I    http://groups.google.com/d/topic/vim_dev/B6FSGfq9VoI/discussion.
line 122: "^I^I^I    This patch has not yet been included in Vim, thus
line 123: "^I^I^I    these changes are removed in the next version.
line 124: "   7.3_v10 (Vim 7.3.0227): Fix error E684 when converting a range wholly inside
line 125: "^I^I^I    multiple nested folds with dynamic folding on.
line 126: "^I^I^I    Also fix problem with foldtext in this situation.
line 127: "   7.3_v9  (Vim 7.3.0170): Add html_pre_wrap option active with html_use_css
line 128: "^I^I^I    and without html_no_pre, default value same as
line 129: "^I^I^I    'wrap' option, (Andy Spencer). Don't use
line 130: "^I^I^I    'fileencoding' for converted document encoding if
line 131: "^I^I^I    'buftype' indicates a special buffer which isn't
line 132: "^I^I^I    written.
line 133: "   7.3_v8  (Vim 7.3.0100): Add html_expand_tabs option to allow leaving tab
line 134: "^I^I^I    characters in generated output (Andy Spencer).
line 135: "^I^I^I    Escape text that looks like a modeline so Vim
line 136: "^I^I^I    doesn't use anything in the converted HTML as a
line 137: "^I^I^I    modeline. Bugfixes: Fix folding when a fold starts
line 138: "^I^I^I    before the conversion range. Remove fold column when
line 139: "^I^I^I    there are no folds.
line 140: "   7.3_v7  (Vim 7-3-0063): see betas released on vim_dev below:
line 141: "^I^I  7.3_v7b3: Fixed bug, convert Unicode to UTF-8 all the way.
line 142: "^I^I  7.3_v7b2: Remove automatic detection of encodings that are not
line 143: "^I^I^I    supported by all major browsers according to
line 144: "^I^I^I    http://wiki.whatwg.org/wiki/Web_Encodings and
line 145: "^I^I^I    convert to UTF-8 for all Unicode encodings. Make
line 146: "^I^I^I    HTML encoding to Vim encoding detection be
line 147: "^I^I^I    case-insensitive for built-in pairs.
line 148: "^I^I  7.3_v7b1: Remove use of setwinvar() function which cannot be
line 149: "^I^I^I    called in restricted mode (Andy Spencer). Use
line 150: "^I^I^I    'fencoding' instead of 'encoding' to determine by
line 151: "^I^I^I    charset, and make sure the 'fenc' of the generated
line 152: "^I^I^I    file matches its indicated charset. Add charsets for
line 153: "^I^I^I    all of Vim's natively supported encodings.
line 154: "   7.3_v6  (Vim 7.3.0000): Really fix bug with 'nowrapscan', 'magic' and other
line 155: "^I^I^I    user settings interfering with diff mode generation,
line 156: "^I^I^I    trailing whitespace (e.g. line number column) when
line 157: "^I^I^I    using html_no_pre, and bugs when using
line 158: "^I^I^I    html_hover_unfold.
line 159: "   7.3_v5  ( unreleased ): Fix bug with 'nowrapscan' and also with out-of-sync
line 160: "^I^I^I    folds in diff mode when first line was folded.
line 161: "   7.3_v4  (Vim 7.3.0000): Bugfixes, especially for xhtml markup, and diff mode
line 162: "   7.3_v3  (Vim 7.3.0000): Refactor option handling and make html_use_css
line 163: "^I^I^I    default to true when not set to anything. Use strict
line 164: "^I^I^I    doctypes where possible. Rename use_xhtml option to
line 165: "^I^I^I    html_use_xhtml for consistency. Use .xhtml extension
line 166: "^I^I^I    when using this option. Add meta tag for settings.
line 167: "   7.3_v2  (Vim 7.3.0000): Fix syntax highlighting in diff mode to use both the
line 168: "^I^I^I    diff colors and the normal syntax colors
line 169: "   7.3_v1  (Vim 7.3.0000): Add conceal support and meta tags in output
line 170: "}}}
line 171: "}}}
line 172: 
line 173: " Define the :TOhtml command when:
line 174: " - 'compatible' is not set
line 175: " - this plugin was not already loaded
line 176: " - user commands are available. {{{
line 177: if !&cp && !exists(":TOhtml") && has("user_commands")
line 178:   command -range=% -bar TOhtml :call tohtml#Convert2HTML(<line1>, <line2>)
line 179: endif "}}}
line 180: 
line 181: " Make sure any patches will probably use consistent indent
line 182: "   vim: ts=8 sw=2 sts=2 noet fdm=marker
finished sourcing /usr/share/vim/vim74/plugin/tohtml.vim
chdir(/usr/share/vim/vim74/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim74/plugin/vimballPlugin.vim"
line 1: " vimballPlugin : construct a file containing both paths and files
line 2: " Author: Charles E. Campbell, Jr.
line 3: " Copyright: (c) 2004-2010 by Charles E. Campbell, Jr.
line 4: "            The VIM LICENSE applies to Vimball.vim, and Vimball.txt
line 5: "            (see |copyright|) except use "Vimball" instead of "Vim".
line 6: "            No warranty, express or implied.
line 7: "  *** ***   Use At-Your-Own-Risk!   *** ***
line 8: "
line 9: " (Rom 2:1 WEB) Therefore you are without excuse, O man, whoever you are who
line 10: "      judge. For in that which you judge another, you condemn yourself. For
line 11: "      you who judge practice the same things.
line 12: " GetLatestVimScripts: 1502 1 :AutoInstall: vimball.vim
line 13: 
line 14: " ---------------------------------------------------------------------
line 15: "  Load Once: {{{1
line 16: if &cp || exists("g:loaded_vimballPlugin")
line 17:  finish
line 18: endif
line 19: let g:loaded_vimballPlugin = "v35"
line 20: let s:keepcpo              = &cpo
line 21: set cpo&vim
line 22: 
line 23: " ------------------------------------------------------------------------------
line 24: " Public Interface: {{{1
line 25: com! -ra   -complete=file -na=+ -bang MkVimball^I^I^I^Icall vimball#MkVimball(<line1>,<line2>,<bang>0,<f-args>)
line 26: com! -na=? -complete=dir  UseVimball^I^I^I^I^I^Icall vimball#Vimball(1,<f-args>)
line 27: com! -na=0                VimballList^I^I^I^I^I^Icall vimball#Vimball(0)
line 28: com! -na=* -complete=dir  RmVimball^I^I^I^I^I^I^Icall vimball#SaveSettings()|call vimball#RmVimball(<f-args>)|call vimball#RestoreSettings()
line 29: au BufEnter  *.vba,*.vba.gz,*.vba.bz2,*.vba.zip,*.vba.xz^Isetlocal bt=nofile fmr=[[[,]]] fdm=marker|if &ff != 'unix'|setlocal ma ff=unix noma|endif|call vimball#ShowMesg(0,"Source this file to extract it! (:so %)")
line 30: au SourceCmd *.vba.gz,*.vba.bz2,*.vba.zip,*.vba.xz^I^I^Iif expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|endif|call vimball#Decompress(expand("<amatch>"))|so %|if expand("%")!=expand("<afile>")|close|endif
line 31: au SourceCmd *.vba^I^I^I^I^I^I^I^I^I^I^Iif expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|call vimball#Vimball(1)|close|else|call vimball#Vimball(1)|endif
line 32: au BufEnter  *.vmb,*.vmb.gz,*.vmb.bz2,*.vmb.zip,*.vmb.xz^Isetlocal bt=nofile fmr=[[[,]]] fdm=marker|if &ff != 'unix'|setlocal ma ff=unix noma|endif|call vimball#ShowMesg(0,"Source this file to extract it! (:so %)")
line 33: au SourceCmd *.vmb.gz,*.vmb.bz2,*.vmb.zip,*.vmb.xz^I^I^Iif expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|endif|call vimball#Decompress(expand("<amatch>"))|so %|if expand("%")!=expand("<afile>")|close|endif
line 34: au SourceCmd *.vmb^I^I^I^I^I^I^I^I^I^I^Iif expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|call vimball#Vimball(1)|close|else|call vimball#Vimball(1)|endif
line 35: 
line 36: " =====================================================================
line 37: " Restoration And Modelines: {{{1
line 38: " vim: fdm=marker
line 39: let &cpo= s:keepcpo
line 40: unlet s:keepcpo
finished sourcing /usr/share/vim/vim74/plugin/vimballPlugin.vim
chdir(/usr/share/vim/vim74/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim74/plugin/zipPlugin.vim"
line 1: " zipPlugin.vim: Handles browsing zipfiles
line 2: "            PLUGIN PORTION
line 3: " Date:^I^I^IJun 07, 2013
line 4: " Maintainer:^ICharles E Campbell <NdrOchip@ScampbellPfamily.AbizM-NOSPAM>
line 5: " License:^I^IVim License  (see vim's :help license)
line 6: " Copyright:    Copyright (C) 2005-2013 Charles E. Campbell {{{1
line 7: "               Permission is hereby granted to use and distribute this code,
line 8: "               with or without modifications, provided that this copyright
line 9: "               notice is copied with it. Like anything else that's free,
line 10: "               zipPlugin.vim is provided *as is* and comes with no warranty
line 11: "               of any kind, either expressed or implied. By using this
line 12: "               plugin, you agree that in no event will the copyright
line 13: "               holder be liable for any damages resulting from the use
line 14: "               of this software.
line 15: "
line 16: " (James 4:8 WEB) Draw near to God, and he will draw near to you.
line 17: " Cleanse your hands, you sinners; and purify your hearts, you double-minded.
line 18: " ---------------------------------------------------------------------
line 19: " Load Once: {{{1
line 20: if &cp || exists("g:loaded_zipPlugin")
line 21:  finish
line 22: endif
line 23: let g:loaded_zipPlugin = "v27"
line 24: let s:keepcpo          = &cpo
line 25: set cpo&vim
line 26: 
line 27: " ---------------------------------------------------------------------
line 28: " Options: {{{1
line 29: if !exists("g:zipPlugin_ext")
line 30:  let g:zipPlugin_ext= '*.zip,*.jar,*.xpi,*.ja,*.war,*.ear,*.celzip,*.oxt,*.kmz,*.wsz,*.xap,*.docx,*.docm,*.dotx,*.dotm,*.potx,*.potm,*.ppsx,*.ppsm,*.pptx,*.pptm,*.ppam,*.sldx,*.thmx,*.xlam,*.xlsx,*.xlsm,*.xlsb,*.xltx,*.xltm,*.xlam,*.crtx,*.vdw,*.glox,*.gcsx,*.gqsx'
line 31: endif
line 32: 
line 33: " ---------------------------------------------------------------------
line 34: " Public Interface: {{{1
line 35: augroup zip
line 36:  au!
line 37:  au BufReadCmd   zipfile:*^Icall zip#Read(expand("<amatch>"), 1)
line 38:  au FileReadCmd  zipfile:*^Icall zip#Read(expand("<amatch>"), 0)
line 39:  au BufWriteCmd  zipfile:*^Icall zip#Write(expand("<amatch>"))
line 40:  au FileWriteCmd zipfile:*^Icall zip#Write(expand("<amatch>"))
line 41: 
line 42:  if has("unix")
line 43:   au BufReadCmd   zipfile:*/*^Icall zip#Read(expand("<amatch>"), 1)
line 44:   au FileReadCmd  zipfile:*/*^Icall zip#Read(expand("<amatch>"), 0)
line 45:   au BufWriteCmd  zipfile:*/*^Icall zip#Write(expand("<amatch>"))
line 46:   au FileWriteCmd zipfile:*/*^Icall zip#Write(expand("<amatch>"))
line 47:  endif
line 48: 
line 49:  exe "au BufReadCmd ".g:zipPlugin_ext.' call zip#Browse(expand("<amatch>"))'
line 49: au BufReadCmd *.zip,*.jar,*.xpi,*.ja,*.war,*.ear,*.celzip,*.oxt,*.kmz,*.wsz,*.xap,*.docx,*.docm,*.dotx,*.dotm,*.potx,*.potm,*.ppsx,*.ppsm,*.pptx,*.pptm,*.ppam,*.sldx,*.thmx,*.xlam,*.xlsx,*.xlsm,*.xlsb,*.xltx,*.xltm,*.xlam,*.crtx,*.vdw,*.glox,*.gcsx,*.gqsx call zip#Browse(expand("<amatch>"))
line 50: augroup END
line 51: 
line 52: " ---------------------------------------------------------------------
line 53: "  Restoration And Modelines: {{{1
line 54: "  vim: fdm=marker
line 55: let &cpo= s:keepcpo
line 56: unlet s:keepcpo
finished sourcing /usr/share/vim/vim74/plugin/zipPlugin.vim
Searching for "/usr/share/vim/vimfiles/after/plugin/**/*.vim"
Searching for "/var/lib/vim/addons/after/plugin/**/*.vim"
Searching for "/home/computer/.vim/after/plugin/**/*.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/plugin/**/*.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/after/plugin/**/*.vim"
Searching for "/home/computer/.vim/bundle/jedi-vim/after/plugin/**/*.vim"
Searching for "pack/*/start/*" in "/home/computer/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/home/computer/.vim/after"
Searching for "/home/computer/.vim/pack/*/start/*"
Searching for "/usr/share/vim/vimfiles/pack/*/start/*"
Searching for "/usr/share/vim/vim74/pack/*/start/*"
Searching for "/usr/share/vim/vimfiles/after/pack/*/start/*"
Searching for "/home/computer/.vim/after/pack/*/start/*"
not found in 'packpath': "pack/*/start/*"
Reading viminfo file "/home/computer/.viminfo" info oldfiles
E325: ATTENTION
Found a swap file by the name ".ex21-03.py.swp"
          owned by: computer   dated: Mon Apr 17 21:34:49 2017
         file name: ~computer/gits/lpthw/21thru25/ex21-03.py
          modified: YES
         user name: computer   host name: computer
        process ID: 19141
While opening file "ex21-03.py"
             dated: Mon Apr 17 21:34:26 2017

(1) Another program may be editing the same file.  If this is the case,
    be careful not to end up with two different instances of the same
    file when making changes.  Quit, or continue with caution.
(2) An edit session for this file crashed.
    If this is the case, use ":recover" or "vim -r ex21-03.py"
    to recover the changes (see ":help recovery").
    If you did this already, delete the swap file ".ex21-03.py.swp"
    to avoid this message.

Swap file ".ex21-03.py.swp" already exists!
[O]pen Read-Only, (E)dit anyway, (R)ecover, (D)elete it, (Q)uit, (A)bort: 
"ex21-03.py" 
"ex21-03.py" 1L, 23C
Reading viminfo file "/home/computer/.viminfo" marks
Executing BufRead Auto commands for "*.py"
autocommand setf python

line 0: setf python
Executing FileType Auto commands for "*"
autocommand exe "set syntax=" . expand("<amatch>")

line 0: exe "set syntax=" . expand("<amatch>")
line 0: set syntax=python
Executing Syntax Auto commands for "*"
autocommand call s:SynSet()

line 0: call s:SynSet()
calling function <SNR>4_SynSet()

line 1:   " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
line 2:   syn clear
line 3:   if exists("b:current_syntax")
line 4:     unlet b:current_syntax
line 5:   endif
line 6: 
line 7:   let s = expand("<amatch>")
line 8:   if s == "ON"
line 9:     " :set syntax=ON
line 10:     if &filetype == ""
line 11:       echohl ErrorMsg
line 12:       echo "filetype unknown"
line 13:       echohl None
line 14:     endif
line 15:     let s = &filetype
line 16:   elseif s == "OFF"
line 17:     let s = ""
line 18:   endif
line 19: 
line 20:   if s != ""
line 21:     " Load the syntax file(s).  When there are several, separated by dots,
line 22:     " load each in sequence.
line 23:     for name in split(s, '\.')
line 24:       exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
line 24: runtime! syntax/python.vim syntax/python/*.vim
Searching for "syntax/python.vim syntax/python/*.vim" in "/home/computer/.vim,/home/computer/.vim/bundle/Vundle.vim,/home/computer/.vim/bundle/jedi-vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after,/home/computer/.vim/bundle/Vundle.vim,/home/computer/.vim/bundle/Vundle.vim/after,/home/computer/.vim/bundle/jedi-vim/after"
Searching for "/home/computer/.vim/syntax/python.vim"
Searching for "/home/computer/.vim/syntax/python/*.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/syntax/python.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/syntax/python/*.vim"
Searching for "/home/computer/.vim/bundle/jedi-vim/syntax/python.vim"
Searching for "/home/computer/.vim/bundle/jedi-vim/syntax/python/*.vim"
Searching for "/var/lib/vim/addons/syntax/python.vim"
Searching for "/var/lib/vim/addons/syntax/python/*.vim"
Searching for "/usr/share/vim/vimfiles/syntax/python.vim"
Searching for "/usr/share/vim/vimfiles/syntax/python/*.vim"
Searching for "/usr/share/vim/vim74/syntax/python.vim"
chdir(/usr/share/vim/vim74/syntax)
fchdir() to previous dir
line 24: sourcing "/usr/share/vim/vim74/syntax/python.vim"
line 1: " Vim syntax file
line 2: " Language:^IPython
line 3: " Maintainer:^IZvezdan Petkovic <zpetkovic@acm.org>
line 4: " Last Change:^I2016 Feb 20
line 5: " Credits:^INeil Schemenauer <nas@python.ca>
line 6: "^I^IDmitry Vasiliev
line 7: "
line 8: "^I^IThis version is a major rewrite by Zvezdan Petkovic.
line 9: "
line 10: "^I^I- introduced highlighting of doctests
line 11: "^I^I- updated keywords, built-ins, and exceptions
line 12: "^I^I- corrected regular expressions for
line 13: "
line 14: "^I^I  * functions
line 15: "^I^I  * decorators
line 16: "^I^I  * strings
line 17: "^I^I  * escapes
line 18: "^I^I  * numbers
line 19: "^I^I  * space error
line 20: "
line 21: "^I^I- corrected synchronization
line 22: "^I^I- more highlighting is ON by default, except
line 23: "^I^I- space error highlighting is OFF by default
line 24: "
line 25: " Optional highlighting can be controlled using these variables.
line 26: "
line 27: "   let python_no_builtin_highlight = 1
line 28: "   let python_no_doctest_code_highlight = 1
line 29: "   let python_no_doctest_highlight = 1
line 30: "   let python_no_exception_highlight = 1
line 31: "   let python_no_number_highlight = 1
line 32: "   let python_space_error_highlight = 1
line 33: "
line 34: " All the options above can be switched on together.
line 35: "
line 36: "   let python_highlight_all = 1
line 37: "
line 38: 
line 39: " For version 5.x: Clear all syntax items.
line 40: " For version 6.x: Quit when a syntax file was already loaded.
line 41: if version < 600
line 42:   syntax clear
line 43: elseif exists("b:current_syntax")
line 44:   finish
line 45: endif
line 46: 
line 47: " We need nocompatible mode in order to continue lines with backslashes.
line 48: " Original setting will be restored.
line 49: let s:cpo_save = &cpo
line 50: set cpo&vim
line 51: 
line 52: " Keep Python keywords in alphabetical order inside groups for easy
line 53: " comparison with the table in the 'Python Language Reference'
line 54: " https://docs.python.org/2/reference/lexical_analysis.html#keywords,
line 55: " https://docs.python.org/3/reference/lexical_analysis.html#keywords.
line 56: " Groups are in the order presented in NAMING CONVENTIONS in syntax.txt.
line 57: " Exceptions come last at the end of each group (class and def below).
line 58: "
line 59: " Keywords 'with' and 'as' are new in Python 2.6
line 60: " (use 'from __future__ import with_statement' in Python 2.5).
line 61: "
line 62: " Some compromises had to be made to support both Python 3 and 2.
line 63: " We include Python 3 features, but when a definition is duplicated,
line 64: " the last definition takes precedence.
line 65: "
line 66: " - 'False', 'None', and 'True' are keywords in Python 3 but they are
line 67: "   built-ins in 2 and will be highlighted as built-ins below.
line 68: " - 'exec' is a built-in in Python 3 and will be highlighted as
line 69: "   built-in below.
line 70: " - 'nonlocal' is a keyword in Python 3 and will be highlighted.
line 71: " - 'print' is a built-in in Python 3 and will be highlighted as
line 72: "   built-in below (use 'from __future__ import print_function' in 2)
line 73: " - async and await were added in Python 3.5 and are soft keywords.
line 74: "
line 75: syn keyword pythonStatement^IFalse, None, True
line 76: syn keyword pythonStatement^Ias assert break continue del exec global
line 77: syn keyword pythonStatement^Ilambda nonlocal pass print return with yield
line 78: syn keyword pythonStatement^Iclass def nextgroup=pythonFunction skipwhite
line 79: syn keyword pythonConditional^Ielif else if
line 80: syn keyword pythonRepeat^Ifor while
line 81: syn keyword pythonOperator^Iand in is not or
line 82: syn keyword pythonException^Iexcept finally raise try
line 83: syn keyword pythonInclude^Ifrom import
line 84: syn keyword pythonAsync^I^Iasync await
line 85: 
line 86: " Decorators (new in Python 2.4)
line 87: syn match   pythonDecorator^I"@" display nextgroup=pythonFunction skipwhite
line 88: " The zero-length non-grouping match before the function name is
line 89: " extremely important in pythonFunction.  Without it, everything is
line 90: " interpreted as a function inside the contained environment of
line 91: " doctests.
line 92: " A dot must be allowed because of @MyClass.myfunc decorators.
line 94: syn match   pythonFunction "\%(\%(def\s\|class\s\|@\)\s*\)\@<=\h\%(\w\|\.\)*" contained
line 95: 
line 96: syn match   pythonComment^I"#.*$" contains=pythonTodo,@Spell
line 97: syn keyword pythonTodo^I^IFIXME NOTE NOTES TODO XXX contained
line 98: 
line 99: " Triple-quoted strings can contain doctests.
line 102: syn region  pythonString matchgroup=pythonQuotes start=+[uU]\=\z(['"]\)+ end="\z1" skip="\\\\\|\\\z1" contains=pythonEscape,@Spell
line 105: syn region  pythonString matchgroup=pythonTripleQuotes start=+[uU]\=\z('''\|"""\)+ end="\z1" keepend contains=pythonEscape,pythonSpaceError,pythonDoctest,@Spell
line 108: syn region  pythonRawString matchgroup=pythonQuotes start=+[uU]\=[rR]\z(['"]\)+ end="\z1" skip="\\\\\|\\\z1" contains=@Spell
line 111: syn region  pythonRawString matchgroup=pythonTripleQuotes start=+[uU]\=[rR]\z('''\|"""\)+ end="\z1" keepend contains=pythonSpaceError,pythonDoctest,@Spell
line 112: 
line 113: syn match   pythonEscape^I+\\[abfnrtv'"\\]+ contained
line 114: syn match   pythonEscape^I"\\\o\{1,3}" contained
line 115: syn match   pythonEscape^I"\\x\x\{2}" contained
line 116: syn match   pythonEscape^I"\%(\\u\x\{4}\|\\U\x\{8}\)" contained
line 117: " Python allows case-insensitive Unicode IDs: http://www.unicode.org/charts/
line 118: syn match   pythonEscape^I"\\N{\a\+\%(\s\a\+\)*}" contained
line 119: syn match   pythonEscape^I"\\$"
line 120: 
line 121: if exists("python_highlight_all")
line 122:   if exists("python_no_builtin_highlight")
line 123:     unlet python_no_builtin_highlight
line 124:   endif
line 125:   if exists("python_no_doctest_code_highlight")
line 126:     unlet python_no_doctest_code_highlight
line 127:   endif
line 128:   if exists("python_no_doctest_highlight")
line 129:     unlet python_no_doctest_highlight
line 130:   endif
line 131:   if exists("python_no_exception_highlight")
line 132:     unlet python_no_exception_highlight
line 133:   endif
line 134:   if exists("python_no_number_highlight")
line 135:     unlet python_no_number_highlight
line 136:   endif
line 137:   let python_space_error_highlight = 1
line 138: endif
line 139: 
line 140: " It is very important to understand all details before changing the
line 141: " regular expressions below or their order.
line 142: " The word boundaries are *not* the floating-point number boundaries
line 143: " because of a possible leading or trailing decimal point.
line 144: " The expressions below ensure that all valid number literals are
line 145: " highlighted, and invalid number literals are not.  For example,
line 146: "
line 147: " - a decimal point in '4.' at the end of a line is highlighted,
line 148: " - a second dot in 1.0.0 is not highlighted,
line 149: " - 08 is not highlighted,
line 150: " - 08e0 or 08j are highlighted,
line 151: "
line 152: " and so on, as specified in the 'Python Language Reference'.
line 153: " https://docs.python.org/2/reference/lexical_analysis.html#numeric-literals
line 154: " https://docs.python.org/3/reference/lexical_analysis.html#numeric-literals
line 155: if !exists("python_no_number_highlight")
line 156:   " numbers (including longs and complex)
line 157:   syn match   pythonNumber^I"\<0[oO]\=\o\+[Ll]\=\>"
line 158:   syn match   pythonNumber^I"\<0[xX]\x\+[Ll]\=\>"
line 159:   syn match   pythonNumber^I"\<0[bB][01]\+[Ll]\=\>"
line 160:   syn match   pythonNumber^I"\<\%([1-9]\d*\|0\)[Ll]\=\>"
line 161:   syn match   pythonNumber^I"\<\d\+[jJ]\>"
line 162:   syn match   pythonNumber^I"\<\d\+[eE][+-]\=\d\+[jJ]\=\>"
line 164:   syn match   pythonNumber "\<\d\+\.\%([eE][+-]\=\d\+\)\=[jJ]\=\%(\W\|$\)\@="
line 166:   syn match   pythonNumber "\%(^\|\W\)\zs\d*\.\d\+\%([eE][+-]\=\d\+\)\=[jJ]\=\>"
line 167: endif
line 168: 
line 169: " Group the built-ins in the order in the 'Python Library Reference' for
line 170: " easier comparison.
line 171: " https://docs.python.org/2/library/constants.html
line 172: " https://docs.python.org/3/library/constants.html
line 173: " http://docs.python.org/2/library/functions.html
line 174: " http://docs.python.org/3/library/functions.html
line 175: " http://docs.python.org/2/library/functions.html#non-essential-built-in-functions
line 176: " http://docs.python.org/3/library/functions.html#non-essential-built-in-functions
line 177: " Python built-in functions are in alphabetical order.
line 178: if !exists("python_no_builtin_highlight")
line 179:   " built-in constants
line 180:   " 'False', 'True', and 'None' are also reserved words in Python 3
line 181:   syn keyword pythonBuiltin^IFalse True None
line 182:   syn keyword pythonBuiltin^INotImplemented Ellipsis __debug__
line 183:   " built-in functions
line 184:   syn keyword pythonBuiltin^Iabs all any bin bool bytearray callable chr
line 185:   syn keyword pythonBuiltin^Iclassmethod compile complex delattr dict dir
line 186:   syn keyword pythonBuiltin^Idivmod enumerate eval filter float format
line 187:   syn keyword pythonBuiltin^Ifrozenset getattr globals hasattr hash
line 188:   syn keyword pythonBuiltin^Ihelp hex id input int isinstance
line 189:   syn keyword pythonBuiltin^Iissubclass iter len list locals map max
line 190:   syn keyword pythonBuiltin^Imemoryview min next object oct open ord pow
line 191:   syn keyword pythonBuiltin^Iprint property range repr reversed round set
line 192:   syn keyword pythonBuiltin^Isetattr slice sorted staticmethod str
line 193:   syn keyword pythonBuiltin^Isum super tuple type vars zip __import__
line 194:   " Python 2 only
line 195:   syn keyword pythonBuiltin^Ibasestring cmp execfile file
line 196:   syn keyword pythonBuiltin^Ilong raw_input reduce reload unichr
line 197:   syn keyword pythonBuiltin^Iunicode xrange
line 198:   " Python 3 only
line 199:   syn keyword pythonBuiltin^Iascii bytes exec
line 200:   " non-essential built-in functions; Python 2 only
line 201:   syn keyword pythonBuiltin^Iapply buffer coerce intern
line 202:   " avoid highlighting attributes as builtins
line 203:   syn match   pythonAttribute^I/\.\h\w*/hs=s+1 contains=ALLBUT,pythonBuiltin transparent
line 204: endif
line 205: 
line 206: " From the 'Python Library Reference' class hierarchy at the bottom.
line 207: " http://docs.python.org/2/library/exceptions.html
line 208: " http://docs.python.org/3/library/exceptions.html
line 209: if !exists("python_no_exception_highlight")
line 210:   " builtin base exceptions (used mostly as base classes for other exceptions)
line 211:   syn keyword pythonExceptions^IBaseException Exception
line 212:   syn keyword pythonExceptions^IArithmeticError BufferError
line 213:   syn keyword pythonExceptions^ILookupError
line 214:   " builtin base exceptions removed in Python 3
line 215:   syn keyword pythonExceptions^IEnvironmentError StandardError
line 216:   " builtin exceptions (actually raised)
line 217:   syn keyword pythonExceptions^IAssertionError AttributeError
line 218:   syn keyword pythonExceptions^IEOFError FloatingPointError GeneratorExit
line 219:   syn keyword pythonExceptions^IImportError IndentationError
line 220:   syn keyword pythonExceptions^IIndexError KeyError KeyboardInterrupt
line 221:   syn keyword pythonExceptions^IMemoryError NameError NotImplementedError
line 222:   syn keyword pythonExceptions^IOSError OverflowError ReferenceError
line 223:   syn keyword pythonExceptions^IRuntimeError StopIteration SyntaxError
line 224:   syn keyword pythonExceptions^ISystemError SystemExit TabError TypeError
line 225:   syn keyword pythonExceptions^IUnboundLocalError UnicodeError
line 226:   syn keyword pythonExceptions^IUnicodeDecodeError UnicodeEncodeError
line 227:   syn keyword pythonExceptions^IUnicodeTranslateError ValueError
line 228:   syn keyword pythonExceptions^IZeroDivisionError
line 229:   " builtin OS exceptions in Python 3
line 230:   syn keyword pythonExceptions^IBlockingIOError BrokenPipeError
line 231:   syn keyword pythonExceptions^IChildProcessError ConnectionAbortedError
line 232:   syn keyword pythonExceptions^IConnectionError ConnectionRefusedError
line 233:   syn keyword pythonExceptions^IConnectionResetError FileExistsError
line 234:   syn keyword pythonExceptions^IFileNotFoundError InterruptedError
line 235:   syn keyword pythonExceptions^IIsADirectoryError NotADirectoryError
line 236:   syn keyword pythonExceptions^IPermissionError ProcessLookupError
line 237:   syn keyword pythonExceptions^IRecursionError StopAsyncIteration
line 238:   syn keyword pythonExceptions^ITimeoutError
line 239:   " builtin exceptions deprecated/removed in Python 3
line 240:   syn keyword pythonExceptions^IIOError VMSError WindowsError
line 241:   " builtin warnings
line 242:   syn keyword pythonExceptions^IBytesWarning DeprecationWarning FutureWarning
line 243:   syn keyword pythonExceptions^IImportWarning PendingDeprecationWarning
line 244:   syn keyword pythonExceptions^IRuntimeWarning SyntaxWarning UnicodeWarning
line 245:   syn keyword pythonExceptions^IUserWarning Warning
line 246:   " builtin warnings in Python 3
line 247:   syn keyword pythonExceptions^IResourceWarning
line 248: endif
line 249: 
line 250: if exists("python_space_error_highlight")
line 251:   " trailing whitespace
line 252:   syn match   pythonSpaceError^Idisplay excludenl "\s\+$"
line 253:   " mixed tabs and spaces
line 254:   syn match   pythonSpaceError^Idisplay " \+\t"
line 255:   syn match   pythonSpaceError^Idisplay "\t\+ "
line 256: endif
line 257: 
line 258: " Do not spell doctests inside strings.
line 259: " Notice that the end of a string, either ''', or """, will end the contained
line 260: " doctest too.  Thus, we do *not* need to have it as an end pattern.
line 261: if !exists("python_no_doctest_highlight")
line 262:   if !exists("python_no_doctest_code_highlight")
line 265:     syn region pythonDoctest start="^\s*>>>\s" end="^\s*$" contained contains=ALLBUT,pythonDoctest,@Spell
line 268:     syn region pythonDoctestValue start=+^\s*\%(>>>\s\|\.\.\.\s\|"""\|'''\)\@!\S\++ end="$" contained
line 269:   else
line 272:     syn region pythonDoctest start="^\s*>>>" end="^\s*$" contained contains=@NoSpell
line 273:   endif
line 274: endif
line 275: 
line 276: " Sync at the beginning of class, function, or method definition.
line 277: syn sync match pythonSync grouphere NONE "^\s*\%(def\|class\)\s\+\h\w*\s*("
line 278: 
line 279: if version >= 508 || !exists("did_python_syn_inits")
line 280:   if version <= 508
line 281:     let did_python_syn_inits = 1
line 282:     command -nargs=+ HiLink hi link <args>
line 283:   else
line 284:     command -nargs=+ HiLink hi def link <args>
line 285:   endif
line 286: 
line 287:   " The default highlight links.  Can be overridden later.
line 288:   HiLink pythonStatement^IStatement
line 288: hi def link pythonStatement^IStatement
line 289:   HiLink pythonConditional^IConditional
line 289: hi def link pythonConditional^IConditional
line 290:   HiLink pythonRepeat^I^IRepeat
line 290: hi def link pythonRepeat^I^IRepeat
line 291:   HiLink pythonOperator^I^IOperator
line 291: hi def link pythonOperator^I^IOperator
line 292:   HiLink pythonException^IException
line 292: hi def link pythonException^IException
line 293:   HiLink pythonInclude^I^IInclude
line 293: hi def link pythonInclude^I^IInclude
line 294:   HiLink pythonAsync^I^IStatement
line 294: hi def link pythonAsync^I^IStatement
line 295:   HiLink pythonDecorator^IDefine
line 295: hi def link pythonDecorator^IDefine
line 296:   HiLink pythonFunction^I^IFunction
line 296: hi def link pythonFunction^I^IFunction
line 297:   HiLink pythonComment^I^IComment
line 297: hi def link pythonComment^I^IComment
line 298:   HiLink pythonTodo^I^ITodo
line 298: hi def link pythonTodo^I^ITodo
line 299:   HiLink pythonString^I^IString
line 299: hi def link pythonString^I^IString
line 300:   HiLink pythonRawString^IString
line 300: hi def link pythonRawString^IString
line 301:   HiLink pythonQuotes^I^IString
line 301: hi def link pythonQuotes^I^IString
line 302:   HiLink pythonTripleQuotes^IpythonQuotes
line 302: hi def link pythonTripleQuotes^IpythonQuotes
line 303:   HiLink pythonEscape^I^ISpecial
line 303: hi def link pythonEscape^I^ISpecial
line 304:   if !exists("python_no_number_highlight")
line 305:     HiLink pythonNumber^I^INumber
line 305: hi def link pythonNumber^I^INumber
line 306:   endif
line 307:   if !exists("python_no_builtin_highlight")
line 308:     HiLink pythonBuiltin^IFunction
line 308: hi def link pythonBuiltin^IFunction
line 309:   endif
line 310:   if !exists("python_no_exception_highlight")
line 311:     HiLink pythonExceptions^IStructure
line 311: hi def link pythonExceptions^IStructure
line 312:   endif
line 313:   if exists("python_space_error_highlight")
line 314:     HiLink pythonSpaceError^IError
line 314: hi def link pythonSpaceError^IError
line 315:   endif
line 316:   if !exists("python_no_doctest_highlight")
line 317:     HiLink pythonDoctest^ISpecial
line 317: hi def link pythonDoctest^ISpecial
line 318:     HiLink pythonDoctestValue^IDefine
line 318: hi def link pythonDoctestValue^IDefine
line 319:   endif
line 320: 
line 321:   delcommand HiLink
line 322: endif
line 323: 
line 324: let b:current_syntax = "python"
line 325: 
line 326: let &cpo = s:cpo_save
line 327: unlet s:cpo_save
line 328: 
line 329: " vim:set sw=2 sts=2 ts=8 noet:
finished sourcing /usr/share/vim/vim74/syntax/python.vim
continuing in function <SNR>4_SynSet
Searching for "/usr/share/vim/vim74/syntax/python/*.vim"
Searching for "/usr/share/vim/vimfiles/after/syntax/python.vim"
Searching for "/usr/share/vim/vimfiles/after/syntax/python/*.vim"
Searching for "/var/lib/vim/addons/after/syntax/python.vim"
Searching for "/var/lib/vim/addons/after/syntax/python/*.vim"
Searching for "/home/computer/.vim/after/syntax/python.vim"
Searching for "/home/computer/.vim/after/syntax/python/*.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/syntax/python.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/syntax/python/*.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/after/syntax/python.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/after/syntax/python/*.vim"
Searching for "/home/computer/.vim/bundle/jedi-vim/after/syntax/python.vim"
chdir(/home/computer/.vim/bundle/jedi-vim/after/syntax)
fchdir() to previous dir
line 24: sourcing "/home/computer/.vim/bundle/jedi-vim/after/syntax/python.vim"
line 1: if !jedi#init_python()
Searching for "autoload/jedi.vim" in "/home/computer/.vim,/home/computer/.vim/bundle/Vundle.vim,/home/computer/.vim/bundle/jedi-vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after,/home/computer/.vim/bundle/Vundle.vim,/home/computer/.vim/bundle/Vundle.vim/after,/home/computer/.vim/bundle/jedi-vim/after"
Searching for "/home/computer/.vim/autoload/jedi.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/autoload/jedi.vim"
Searching for "/home/computer/.vim/bundle/jedi-vim/autoload/jedi.vim"
chdir(/home/computer/.vim/bundle/jedi-vim/autoload)
fchdir() to previous dir
line 1: sourcing "/home/computer/.vim/bundle/jedi-vim/autoload/jedi.vim"
line 1: scriptencoding utf-8
line 2: 
line 3: " ------------------------------------------------------------------------
line 4: " Settings initialization
line 5: " ------------------------------------------------------------------------
line 12: let s:deprecations = { 'get_definition_command':     'goto_definitions_command', 'pydoc':                      'documentation_command', 'related_names_command':      'usages_command', 'autocompletion_command':     'completions_command', 'show_function_definition':   'show_call_signatures', }
line 13: 
line 39: let s:default_settings = { 'use_tabs_not_buffers': 0, 'use_splits_not_buffers': 1, 'auto_initialization': 1, 'auto_vim_configuration': 1, 'goto_command': "'<leader>d'", 'goto_assignments_command': "'<leader>g'", 'goto_definitions_command': "''", 'completions_command': "'<C-Space>'", 'call_signatures_command': "'<leader>n'", 'usages_command': "'<leader>n'", 'rename_command': "'<leader>r'", 'popup_on_dot': 1, 'documentation_command': "'K'", 'show_call_signatures': 1, 'show_call_signatures_delay': 500, 'call_signature_escape': "'?!?'", 'auto_close_doc': 1, 'max_doc_height': 30, 'popup_select_first': 1, 'quickfix_window_height': 10, 'completions_enabled': 1, 'force_py_version': "'auto'", 'smart_auto_mappings': 1, 'use_tag_stack': 1 }
line 40: 
line 41: for [s:key, s:val] in items(s:deprecations)
line 42:     if exists('g:jedi#'.s:key)
line 43:         echom "'g:jedi#".s:key."' is deprecated. Please use 'g:jedi#".s:val."' instead. Sorry for the inconvenience."
line 44:         exe 'let g:jedi#'.s:val.' = g:jedi#'.s:key
line 45:     endif
line 46: endfor
line 41: for [s:key, s:val] in items(s:deprecations)
line 42:     if exists('g:jedi#'.s:key)
line 43:         echom "'g:jedi#".s:key."' is deprecated. Please use 'g:jedi#".s:val."' instead. Sorry for the inconvenience."
line 44:         exe 'let g:jedi#'.s:val.' = g:jedi#'.s:key
line 45:     endif
line 46: endfor
line 41: for [s:key, s:val] in items(s:deprecations)
line 42:     if exists('g:jedi#'.s:key)
line 43:         echom "'g:jedi#".s:key."' is deprecated. Please use 'g:jedi#".s:val."' instead. Sorry for the inconvenience."
line 44:         exe 'let g:jedi#'.s:val.' = g:jedi#'.s:key
line 45:     endif
line 46: endfor
line 41: for [s:key, s:val] in items(s:deprecations)
line 42:     if exists('g:jedi#'.s:key)
line 43:         echom "'g:jedi#".s:key."' is deprecated. Please use 'g:jedi#".s:val."' instead. Sorry for the inconvenience."
line 44:         exe 'let g:jedi#'.s:val.' = g:jedi#'.s:key
line 45:     endif
line 46: endfor
line 41: for [s:key, s:val] in items(s:deprecations)
line 42:     if exists('g:jedi#'.s:key)
line 43:         echom "'g:jedi#".s:key."' is deprecated. Please use 'g:jedi#".s:val."' instead. Sorry for the inconvenience."
line 44:         exe 'let g:jedi#'.s:val.' = g:jedi#'.s:key
line 45:     endif
line 46: endfor
line 41: for [s:key, s:val] in items(s:deprecations)
line 42:     if exists('g:jedi#'.s:key)
line 43:         echom "'g:jedi#".s:key."' is deprecated. Please use 'g:jedi#".s:val."' instead. Sorry for the inconvenience."
line 44:         exe 'let g:jedi#'.s:val.' = g:jedi#'.s:key
line 45:     endif
line 46: endfor
line 47: 
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 50: let g:jedi#smart_auto_mappings = 1
line 51:     endif
line 52: endfor
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 50: let g:jedi#completions_enabled = 1
line 51:     endif
line 52: endfor
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 50: let g:jedi#popup_select_first = 1
line 51:     endif
line 52: endfor
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 50: let g:jedi#goto_definitions_command = ''
line 51:     endif
line 52: endfor
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 50: let g:jedi#auto_vim_configuration = 1
line 51:     endif
line 52: endfor
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 50: let g:jedi#use_tabs_not_buffers = 0
line 51:     endif
line 52: endfor
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 50: let g:jedi#quickfix_window_height = 10
line 51:     endif
line 52: endfor
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 50: let g:jedi#documentation_command = 'K'
line 51:     endif
line 52: endfor
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 50: let g:jedi#use_splits_not_buffers = 1
line 51:     endif
line 52: endfor
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 50: let g:jedi#call_signature_escape = '?!?'
line 51:     endif
line 52: endfor
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 50: let g:jedi#usages_command = '<leader>n'
line 51:     endif
line 52: endfor
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 50: let g:jedi#call_signatures_command = '<leader>n'
line 51:     endif
line 52: endfor
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 50: let g:jedi#max_doc_height = 30
line 51:     endif
line 52: endfor
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 50: let g:jedi#show_call_signatures = 1
line 51:     endif
line 52: endfor
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 50: let g:jedi#auto_initialization = 1
line 51:     endif
line 52: endfor
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 50: let g:jedi#popup_on_dot = 1
line 51:     endif
line 52: endfor
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 50: let g:jedi#rename_command = '<leader>r'
line 51:     endif
line 52: endfor
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 50: let g:jedi#show_call_signatures_delay = 500
line 51:     endif
line 52: endfor
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 50: let g:jedi#use_tag_stack = 1
line 51:     endif
line 52: endfor
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 50: let g:jedi#auto_close_doc = 1
line 51:     endif
line 52: endfor
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 50: let g:jedi#goto_assignments_command = '<leader>g'
line 51:     endif
line 52: endfor
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 50: let g:jedi#completions_command = '<C-Space>'
line 51:     endif
line 52: endfor
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 50: let g:jedi#goto_command = '<leader>d'
line 51:     endif
line 52: endfor
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 50: let g:jedi#force_py_version = 'auto'
line 51:     endif
line 52: endfor
line 48: for [s:key, s:val] in items(s:default_settings)
line 49:     if !exists('g:jedi#'.s:key)
line 50:         exe 'let g:jedi#'.s:key.' = '.s:val
line 51:     endif
line 52: endfor
line 53: 
line 54: 
line 55: " ------------------------------------------------------------------------
line 56: " Python initialization
line 57: " ------------------------------------------------------------------------
line 58: let s:script_path = fnameescape(expand('<sfile>:p:h:h'))
line 59: 
line 60: function! s:init_python() abort
line 116: 
line 117: 
line 118: function! jedi#reinit_python() abort
line 122: 
line 123: 
line 124: let s:_init_python = -1
line 125: function! jedi#init_python() abort
line 139: 
line 140: 
line 141: let s:python_version = 'null'
line 142: function! jedi#setup_py_version(py_version) abort
line 163: 
line 164: 
line 165: function! jedi#debug_info() abort
line 251: 
line 252: function! jedi#force_py_version(py_version) abort
line 256: 
line 257: 
line 258: function! jedi#force_py_version_switch() abort
line 267: 
line 268: 
line 269: " Helper function instead of `python vim.eval()`, and `.command()` because
line 270: " these also return error definitions.
line 271: function! jedi#_vim_exceptions(str, is_eval) abort
line 286: 
line 287: call jedi#init_python()  " Might throw an error.
calling function jedi#init_python()

line 1:     if s:_init_python == -1
line 2:         try
line 3:             let s:_init_python = s:init_python()
calling function jedi#init_python[3]..<SNR>29_init_python()

line 1:     if g:jedi#force_py_version !=# 'auto'
line 2:         " Always use the user supplied version.
line 3:         try
line 4:             return jedi#force_py_version(g:jedi#force_py_version)
line 5:         catch
line 6:             throw 'Could not setup g:jedi#force_py_version: '.v:exception
line 7:         endtry
line 8:     endif
line 9: 
line 10:     " Handle "auto" version.
line 11:     if has('nvim') || (has('python') && has('python3'))
line 12:         " Neovim usually has both python providers. Skipping the `has` check
line 13:         " avoids starting both of them.
line 14: 
line 15:         " Get default python version from interpreter in $PATH.
line 16:         let s:def_py = system('python -c '.shellescape('import sys; sys.stdout.write(str(sys.version_info[0]))'))
line 17:         if v:shell_error != 0 || !len(s:def_py)
line 18:             if !exists('g:jedi#squelch_py_warning')
line 19:                 echohl WarningMsg
line 20:                 echom 'Warning: jedi-vim failed to get Python version from sys.version_info: ' . s:def_py
line 21:                 echom 'Falling back to version 2.'
line 22:                 echohl None
line 23:             endif
line 24:             let s:def_py = 2
line 25:         elseif &verbose
line 26:             echom 'jedi-vim: auto-detected Python: '.s:def_py
line 27:         endif
line 28: 
line 29:         " Make sure that the auto-detected version is available in Vim.
line 30:         if !has('nvim') || has('python'.(s:def_py == 2 ? '' : s:def_py))
line 31:             return jedi#force_py_version(s:def_py)
line 32:         endif
line 33: 
line 34:         " Add a warning in case the auto-detected version is not available,
line 35:         " usually because of a missing neovim module in a VIRTUAL_ENV.
line 36:         if has('nvim')
line 37:             echohl WarningMsg
line 38:             echom 'jedi-vim: the detected Python version ('.s:def_py.')' 'is not functional.' 'Is the "neovim" module installed?' 'While jedi-vim will work, it might not use the' 'expected Python path.'
line 43:             echohl None
line 44:         endif
line 45:     endif
line 46: 
line 47:     if has('python')
line 48:         call jedi#setup_py_version(2)
line 49:     elseif has('python3')
line 50:         call jedi#setup_py_version(3)
calling function jedi#init_python[3]..<SNR>29_init_python[50]..jedi#setup_py_version(3)

line 1:     if a:py_version == 2
line 2:         let cmd_init = 'pyfile'
line 3:         let cmd_exec = 'python'
line 4:         let s:python_version = 2
line 5:     elseif a:py_version == 3
line 6:         let cmd_init = 'py3file'
line 7:         let cmd_exec = 'python3'
line 8:         let s:python_version = 3
line 9:     else
line 10:         throw 'jedi#setup_py_version: invalid py_version: '.a:py_version
line 11:     endif
line 12: 
line 13:     try
line 14:         execute cmd_init.' '.s:script_path.'/initialize.py'
line 14: py3file /home/computer/.vim/bundle/jedi-vim/initialize.py
line 15:     catch
line 16:         throw 'jedi#setup_py_version: '.v:exception
line 17:     endtry
line 18:     execute 'command! -nargs=1 PythonJedi '.cmd_exec.' <args>'
line 18: command! -nargs=1 PythonJedi python3 <args>
line 19:     return 1
function jedi#init_python[3]..<SNR>29_init_python[50]..jedi#setup_py_version returning #1

continuing in function jedi#init_python[3]..<SNR>29_init_python

line 51:     else
line 52:         throw 'jedi-vim requires Vim with support for Python 2 or 3.'
line 53:     endif
line 54:     return 1
function jedi#init_python[3]..<SNR>29_init_python returning #1

continuing in function jedi#init_python

line 4:         catch
line 5:             let s:_init_python = 0
line 6:             if !exists('g:jedi#squelch_py_warning')
line 7:                 echoerr 'Error: jedi-vim failed to initialize Python: ' .v:exception.' (in '.v:throwpoint.')'
line 9:             endif
line 10:         endtry
line 11:     endif
line 12:     return s:_init_python
function jedi#init_python returning #1

continuing in /home/computer/.vim/bundle/jedi-vim/autoload/jedi.vim

line 288: 
line 289: " ------------------------------------------------------------------------
line 290: " functions that call python code
line 291: " ------------------------------------------------------------------------
line 292: function! jedi#goto() abort
line 295: 
line 296: function! jedi#goto_assignments() abort
line 299: 
line 300: function! jedi#goto_definitions() abort
line 303: 
line 304: function! jedi#usages() abort
line 307: 
line 308: function! jedi#rename(...) abort
line 311: 
line 312: function! jedi#rename_visual(...) abort
line 315: 
line 316: function! jedi#completions(findstart, base) abort
line 319: 
line 320: function! jedi#enable_speed_debugging() abort
line 323: 
line 324: function! jedi#enable_debugging() abort
line 327: 
line 328: function! jedi#disable_debugging() abort
line 331: 
line 332: function! jedi#py_import(args) abort
line 335: 
line 336: function! jedi#py_import_completions(argl, cmdl, pos) abort
line 339: 
line 340: function! jedi#clear_cache(bang) abort
line 346: 
line 347: 
line 348: " ------------------------------------------------------------------------
line 349: " show_documentation
line 350: " ------------------------------------------------------------------------
line 351: function! jedi#show_documentation() abort
line 395: 
line 396: " ------------------------------------------------------------------------
line 397: " helper functions
line 398: " ------------------------------------------------------------------------
line 399: 
line 400: function! jedi#add_goto_window(len) abort
line 415: 
line 416: 
line 417: function! jedi#goto_window_on_enter() abort
line 429: 
line 430: 
line 431: function! s:syn_stack() abort
line 437: 
line 438: 
line 439: function! jedi#do_popup_on_dot_in_highlight() abort
line 456: 
line 457: 
line 458: let s:show_call_signatures_last = [0, 0, '']
line 459: function! jedi#show_call_signatures() abort
line 487: 
line 488: 
line 489: function! jedi#clear_call_signatures() abort
line 497: 
line 498: 
line 499: function! jedi#configure_call_signatures() abort
line 520: 
line 521: 
line 522: " Determine where the current window is on the screen for displaying call
line 523: " signatures in the correct column.
line 524: function! s:save_first_col() abort
line 564: 
line 565: 
line 566: function! jedi#complete_string(is_popup_on_dot) abort
line 576: 
line 577: 
line 578: function! jedi#complete_opened(is_popup_on_dot) abort
line 594: 
line 595: 
line 596: function! jedi#smart_auto_mappings() abort
line 604: 
line 605: 
line 606: "PythonJedi jedi_vim.jedi.set_debug_function(jedi_vim.print_to_stdout, speed=True, warnings=False, notices=False)
line 607: "PythonJedi jedi_vim.jedi.set_debug_function(jedi_vim.print_to_stdout)
line 608: 
line 609: " vim: set et ts=4:
finished sourcing /home/computer/.vim/bundle/jedi-vim/autoload/jedi.vim
continuing in /home/computer/.vim/bundle/jedi-vim/after/syntax/python.vim
calling function jedi#init_python()

line 1:     if s:_init_python == -1
line 2:         try
line 3:             let s:_init_python = s:init_python()
line 4:         catch
line 5:             let s:_init_python = 0
line 6:             if !exists('g:jedi#squelch_py_warning')
line 7:                 echoerr 'Error: jedi-vim failed to initialize Python: ' .v:exception.' (in '.v:throwpoint.')'
line 9:             endif
line 10:         endtry
line 11:     endif
line 12:     return s:_init_python
function jedi#init_python returning #1

continuing in /home/computer/.vim/bundle/jedi-vim/after/syntax/python.vim

line 2:     finish
line 3: endif
line 4: 
line 5: if g:jedi#show_call_signatures > 0 && has('conceal')
line 6:     " +conceal is the default for vim >= 7.3
line 7: 
line 8:     let s:e = g:jedi#call_signature_escape
line 9:     let s:full = s:e.'jedi=.\{-}'.s:e.'.\{-}'.s:e.'jedi'.s:e
line 10:     let s:ignore = s:e.'jedi.\{-}'.s:e
line 11:     exe 'syn match jediIgnore "'.s:ignore.'" contained conceal'
line 11: syn match jediIgnore "?!?jedi.\{-}?!?" contained conceal
line 12:     setlocal conceallevel=2
line 13:     syn match jediFatSymbol "\*_\*" contained conceal
line 14:     syn match jediFat "\*_\*.\{-}\*_\*" contained contains=jediFatSymbol
line 15:     syn match jediSpace "\v[ ]+( )@=" contained
line 18:     exe 'syn match jediFunction "'.s:full.'" keepend extend ' .' contains=jediIgnore,jediFat,jediSpace' .' containedin=pythonComment,pythonString,pythonRawString'
line 18: syn match jediFunction "?!?jedi=.\{-}?!?.\{-}?!?jedi?!?" keepend extend  contains=jediIgnore,jediFat,jediSpace containedin=pythonComment,pythonString,pythonRawString
line 19:     unlet! s:e s:full s:ignore
line 20: 
line 21:     hi def link jediIgnore Ignore
line 22:     hi def link jediFatSymbol Ignore
line 23:     hi def link jediSpace Normal
line 24: 
line 25:     if exists('g:colors_name')
line 26:         hi def link jediFunction CursorLine
line 27:         hi def link jediFat TabLine
line 28:     else
line 29:         hi jediFunction term=NONE cterm=NONE ctermfg=6 guifg=Black gui=NONE ctermbg=0 guibg=Grey
line 30:         hi jediFat term=bold,underline cterm=bold,underline gui=bold,underline ctermbg=0 guibg=#555555
line 31:     endif
line 32: endif
finished sourcing /home/computer/.vim/bundle/jedi-vim/after/syntax/python.vim
continuing in function <SNR>4_SynSet
Searching for "/home/computer/.vim/bundle/jedi-vim/after/syntax/python/*.vim"
line 25:     endfor
line 23:     for name in split(s, '\.')
line 24:       exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
line 25:     endfor
line 26:   endif
function <SNR>4_SynSet returning #0

continuing in Syntax Auto commands for "*"

Executing FileType Auto commands for "*"
autocommand call s:LoadFTPlugin()

line 0: call s:LoadFTPlugin()
calling function <SNR>13_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17: ^Iexe 'runtime! ftplugin/' . name . '.vim ftplugin/' . name . '_*.vim ftplugin/' . name . '/*.vim'
line 17: runtime! ftplugin/python.vim ftplugin/python_*.vim ftplugin/python/*.vim
Searching for "ftplugin/python.vim ftplugin/python_*.vim ftplugin/python/*.vim" in "/home/computer/.vim,/home/computer/.vim/bundle/Vundle.vim,/home/computer/.vim/bundle/jedi-vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after,/home/computer/.vim/bundle/Vundle.vim,/home/computer/.vim/bundle/Vundle.vim/after,/home/computer/.vim/bundle/jedi-vim/after"
Searching for "/home/computer/.vim/ftplugin/python.vim"
Searching for "/home/computer/.vim/ftplugin/python_*.vim"
Searching for "/home/computer/.vim/ftplugin/python/*.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/ftplugin/python.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/ftplugin/python_*.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/ftplugin/python/*.vim"
Searching for "/home/computer/.vim/bundle/jedi-vim/ftplugin/python.vim"
Searching for "/home/computer/.vim/bundle/jedi-vim/ftplugin/python_*.vim"
Searching for "/home/computer/.vim/bundle/jedi-vim/ftplugin/python/*.vim"
chdir(/home/computer/.vim/bundle/jedi-vim/ftplugin/python)
fchdir() to previous dir
line 17: sourcing "/home/computer/.vim/bundle/jedi-vim/ftplugin/python/jedi.vim"
line 1: if !jedi#init_python()
calling function jedi#init_python()

line 1:     if s:_init_python == -1
line 2:         try
line 3:             let s:_init_python = s:init_python()
line 4:         catch
line 5:             let s:_init_python = 0
line 6:             if !exists('g:jedi#squelch_py_warning')
line 7:                 echoerr 'Error: jedi-vim failed to initialize Python: ' .v:exception.' (in '.v:throwpoint.')'
line 9:             endif
line 10:         endtry
line 11:     endif
line 12:     return s:_init_python
function jedi#init_python returning #1

continuing in /home/computer/.vim/bundle/jedi-vim/ftplugin/python/jedi.vim

line 2:     finish
line 3: endif
line 4: " ------------------------------------------------------------------------
line 5: " Initialization of jedi-vim
line 6: " ------------------------------------------------------------------------
line 7: 
line 8: if g:jedi#auto_initialization
line 9:     " goto / get_definition / usages
line 10:     if len(g:jedi#goto_command)
line 11:         execute 'nnoremap <buffer> '.g:jedi#goto_command.' :call jedi#goto()<CR>'
line 11: nnoremap <buffer> <leader>d :call jedi#goto()<CR>
line 12:     endif
line 13:     if len(g:jedi#goto_assignments_command)
line 14:         execute 'nnoremap <buffer> '.g:jedi#goto_assignments_command.' :call jedi#goto_assignments()<CR>'
line 14: nnoremap <buffer> <leader>g :call jedi#goto_assignments()<CR>
line 15:     endif
line 16:     if len(g:jedi#goto_definitions_command)
line 17:         execute 'nnoremap <buffer> '.g:jedi#goto_definitions_command.' :call jedi#goto_definitions()<CR>'
line 18:     endif
line 19:     if len(g:jedi#usages_command)
line 20:         execute 'nnoremap <buffer> '.g:jedi#usages_command.' :call jedi#usages()<CR>'
line 20: nnoremap <buffer> <leader>n :call jedi#usages()<CR>
line 21:     endif
line 22:     " rename
line 23:     if len(g:jedi#rename_command)
line 24:         execute 'nnoremap <buffer> '.g:jedi#rename_command.' :call jedi#rename()<CR>'
line 24: nnoremap <buffer> <leader>r :call jedi#rename()<CR>
line 25:         execute 'vnoremap <buffer> '.g:jedi#rename_command.' :call jedi#rename_visual()<CR>'
line 25: vnoremap <buffer> <leader>r :call jedi#rename_visual()<CR>
line 26:     endif
line 27:     " documentation/pydoc
line 28:     if len(g:jedi#documentation_command)
line 29:         execute 'nnoremap <silent> <buffer>'.g:jedi#documentation_command.' :call jedi#show_documentation()<CR>'
line 29: nnoremap <silent> <buffer>K :call jedi#show_documentation()<CR>
line 30:     endif
line 31: 
line 32:     if g:jedi#show_call_signatures > 0 && has('conceal')
line 33:         call jedi#configure_call_signatures()
calling function jedi#configure_call_signatures()

line 1:     augroup jedi_call_signatures
line 2:     autocmd! * <buffer>
line 3:     if g:jedi#show_call_signatures == 2  " Command line call signatures
line 4:         autocmd InsertEnter <buffer> let g:jedi#first_col = s:save_first_col()
line 5:     endif
line 6:     autocmd InsertEnter <buffer> let s:show_call_signatures_last = [0, 0, '']
line 7:     autocmd InsertLeave <buffer> call jedi#clear_call_signatures()
line 8:     if g:jedi#show_call_signatures_delay > 0
line 9:         autocmd InsertEnter <buffer> let b:_jedi_orig_updatetime = &updatetime | let &updatetime = g:jedi#show_call_signatures_delay
line 11:         autocmd InsertLeave <buffer> if exists('b:_jedi_orig_updatetime') |   let &updatetime = b:_jedi_orig_updatetime |   unlet b:_jedi_orig_updatetime | endif
line 15:         autocmd CursorHoldI <buffer> call jedi#show_call_signatures()
line 16:     else
line 17:         autocmd CursorMovedI <buffer> call jedi#show_call_signatures()
line 18:     endif
line 19:     augroup END
function jedi#configure_call_signatures returning #0

continuing in /home/computer/.vim/bundle/jedi-vim/ftplugin/python/jedi.vim

line 34:     endif
line 35: 
line 36:     if g:jedi#completions_enabled == 1
line 37:         inoremap <silent> <buffer> . .<C-R>=jedi#complete_string(1)<CR>
line 38:     endif
line 39: 
line 40:     if g:jedi#smart_auto_mappings == 1
line 41:         inoremap <silent> <buffer> <space> <C-R>=jedi#smart_auto_mappings()<CR>
line 42:     end
line 43: 
line 44:     if g:jedi#auto_close_doc
line 45:         " close preview if its still open after insert
line 46:         augroup jedi_preview
line 47:             autocmd! InsertLeave <buffer> if pumvisible() == 0|pclose|endif
line 48:         augroup END
line 49:     endif
line 50: endif
finished sourcing /home/computer/.vim/bundle/jedi-vim/ftplugin/python/jedi.vim
continuing in function <SNR>13_LoadFTPlugin
Searching for "/var/lib/vim/addons/ftplugin/python.vim"
Searching for "/var/lib/vim/addons/ftplugin/python_*.vim"
Searching for "/var/lib/vim/addons/ftplugin/python/*.vim"
Searching for "/usr/share/vim/vimfiles/ftplugin/python.vim"
Searching for "/usr/share/vim/vimfiles/ftplugin/python_*.vim"
Searching for "/usr/share/vim/vimfiles/ftplugin/python/*.vim"
Searching for "/usr/share/vim/vim74/ftplugin/python.vim"
chdir(/usr/share/vim/vim74/ftplugin)
fchdir() to previous dir
line 17: sourcing "/usr/share/vim/vim74/ftplugin/python.vim"
line 1: " Vim filetype plugin file
line 2: " Language:^Ipython
line 3: " Maintainer:^IJohannes Zellner <johannes@zellner.org>
line 4: " Last Change:^I2014 Feb 09
line 5: " Last Change By Johannes: Wed, 21 Apr 2004 13:13:08 CEST
line 6: 
line 7: if exists("b:did_ftplugin") | finish | endif
line 7:  finish | endif
line 7:  endif
line 8: let b:did_ftplugin = 1
line 9: let s:keepcpo= &cpo
line 10: set cpo&vim
line 11: 
line 12: setlocal cinkeys-=0#
line 13: setlocal indentkeys-=0#
line 14: setlocal include=^\\s*\\(from\\\|import\\)
line 15: setlocal includeexpr=substitute(v:fname,'\\.','/','g')
line 16: setlocal suffixesadd=.py
line 17: setlocal comments=b:#,fb:-
line 18: setlocal commentstring=#\ %s
line 19: 
line 20: setlocal omnifunc=pythoncomplete#Complete
line 21: 
line 22: set wildignore+=*.pyc
line 23: 
line 24: nnoremap <silent> <buffer> ]] :call <SID>Python_jump('/^\(class\\|def\)')<cr>
line 25: nnoremap <silent> <buffer> [[ :call <SID>Python_jump('?^\(class\\|def\)')<cr>
line 26: nnoremap <silent> <buffer> ]m :call <SID>Python_jump('/^\s*\(class\\|def\)')<cr>
line 27: nnoremap <silent> <buffer> [m :call <SID>Python_jump('?^\s*\(class\\|def\)')<cr>
line 28: 
line 29: if !exists('*<SID>Python_jump')
line 30:   fun! <SID>Python_jump(motion) range
line 41: endif
line 42: 
line 43: if has("browsefilter") && !exists("b:browsefilter")
line 45:     let b:browsefilter = "Python Files (*.py)\t*.py\n" . "All Files (*.*)\t*.*\n"
line 46: endif
line 47: 
line 48: " As suggested by PEP8.
line 49: setlocal expandtab shiftwidth=4 softtabstop=4 tabstop=8
line 50: 
line 51: " First time: try finding "pydoc".
line 52: if !exists('g:pydoc_executable')
line 53:     if executable('pydoc')
line 54:         let g:pydoc_executable = 1
line 55:     else
line 56:         let g:pydoc_executable = 0
line 57:     endif
line 58: endif
line 59: " If "pydoc" was found use it for keywordprg.
line 60: if g:pydoc_executable
line 61:     setlocal keywordprg=pydoc
line 62: endif
line 63: 
line 64: let &cpo = s:keepcpo
line 65: unlet s:keepcpo
finished sourcing /usr/share/vim/vim74/ftplugin/python.vim
continuing in function <SNR>13_LoadFTPlugin
Searching for "/usr/share/vim/vim74/ftplugin/python_*.vim"
Searching for "/usr/share/vim/vim74/ftplugin/python/*.vim"
Searching for "/usr/share/vim/vimfiles/after/ftplugin/python.vim"
Searching for "/usr/share/vim/vimfiles/after/ftplugin/python_*.vim"
Searching for "/usr/share/vim/vimfiles/after/ftplugin/python/*.vim"
Searching for "/var/lib/vim/addons/after/ftplugin/python.vim"
Searching for "/var/lib/vim/addons/after/ftplugin/python_*.vim"
Searching for "/var/lib/vim/addons/after/ftplugin/python/*.vim"
Searching for "/home/computer/.vim/after/ftplugin/python.vim"
Searching for "/home/computer/.vim/after/ftplugin/python_*.vim"
Searching for "/home/computer/.vim/after/ftplugin/python/*.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/ftplugin/python.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/ftplugin/python_*.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/ftplugin/python/*.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/after/ftplugin/python.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/after/ftplugin/python_*.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/after/ftplugin/python/*.vim"
Searching for "/home/computer/.vim/bundle/jedi-vim/after/ftplugin/python.vim"
Searching for "/home/computer/.vim/bundle/jedi-vim/after/ftplugin/python_*.vim"
Searching for "/home/computer/.vim/bundle/jedi-vim/after/ftplugin/python/*.vim"
chdir(/home/computer/.vim/bundle/jedi-vim/after/ftplugin/python)
fchdir() to previous dir
line 17: sourcing "/home/computer/.vim/bundle/jedi-vim/after/ftplugin/python/jedi.vim"
line 1: if !jedi#init_python()
calling function jedi#init_python()

line 1:     if s:_init_python == -1
line 2:         try
line 3:             let s:_init_python = s:init_python()
line 4:         catch
line 5:             let s:_init_python = 0
line 6:             if !exists('g:jedi#squelch_py_warning')
line 7:                 echoerr 'Error: jedi-vim failed to initialize Python: ' .v:exception.' (in '.v:throwpoint.')'
line 9:             endif
line 10:         endtry
line 11:     endif
line 12:     return s:_init_python
function jedi#init_python returning #1

continuing in /home/computer/.vim/bundle/jedi-vim/after/ftplugin/python/jedi.vim

line 2:     finish
line 3: endif
line 4: 
line 5: if g:jedi#auto_initialization
line 6:     if g:jedi#completions_enabled
line 7:         " We need our own omnifunc, so this overrides the omnifunc set by
line 8:         " $VIMRUNTIME/ftplugin/python.vim.
line 9:         setlocal omnifunc=jedi#completions
line 10: 
line 11:         " map ctrl+space for autocompletion
line 12:         if g:jedi#completions_command ==# '<C-Space>'
line 13:             " In terminals, <C-Space> sometimes equals <Nul>.
line 14:             imap <buffer> <Nul> <C-Space>
line 15:             smap <buffer> <Nul> <C-Space>
line 16:         endif
line 17:         if len(g:jedi#completions_command)
line 18:             execute 'inoremap <expr> <buffer> '.g:jedi#completions_command.' jedi#complete_string(0)'
line 18: inoremap <expr> <buffer> <C-Space> jedi#complete_string(0)
line 19:             " A separate mapping for select mode: deletes and completes.
line 20:             execute 'snoremap <expr> <buffer> '.g:jedi#completions_command." '\<C-g>c'.jedi#complete_string(0)"
line 20: snoremap <expr> <buffer> <C-Space> '^Gc'.jedi#complete_string(0)
line 21:         endif
line 22:     endif
line 23: endif
finished sourcing /home/computer/.vim/bundle/jedi-vim/after/ftplugin/python/jedi.vim
continuing in function <SNR>13_LoadFTPlugin
line 18:       endfor
line 16:       for name in split(s, '\.')
line 17: ^Iexe 'runtime! ftplugin/' . name . '.vim ftplugin/' . name . '_*.vim ftplugin/' . name . '/*.vim'
line 18:       endfor
line 19:     endif
function <SNR>13_LoadFTPlugin returning #0

continuing in FileType Auto commands for "*"

Executing FileType Auto commands for "*"
autocommand call s:LoadIndent()

line 0: call s:LoadIndent()
calling function <SNR>14_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14: ^Iexe 'runtime! indent/' . name . '.vim'
line 14: runtime! indent/python.vim
Searching for "indent/python.vim" in "/home/computer/.vim,/home/computer/.vim/bundle/Vundle.vim,/home/computer/.vim/bundle/jedi-vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/computer/.vim/after,/home/computer/.vim/bundle/Vundle.vim,/home/computer/.vim/bundle/Vundle.vim/after,/home/computer/.vim/bundle/jedi-vim/after"
Searching for "/home/computer/.vim/indent/python.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/indent/python.vim"
Searching for "/home/computer/.vim/bundle/jedi-vim/indent/python.vim"
Searching for "/var/lib/vim/addons/indent/python.vim"
Searching for "/usr/share/vim/vimfiles/indent/python.vim"
Searching for "/usr/share/vim/vim74/indent/python.vim"
chdir(/usr/share/vim/vim74/indent)
fchdir() to previous dir
line 14: sourcing "/usr/share/vim/vim74/indent/python.vim"
line 1: " Vim indent file
line 2: " Language:^I^IPython
line 3: " Maintainer:^I^IBram Moolenaar <Bram@vim.org>
line 4: " Original Author:^IDavid Bustos <bustos@caltech.edu>
line 5: " Last Change:^I^I2013 Jul 9
line 6: 
line 7: " Only load this indent file when no other was loaded.
line 8: if exists("b:did_indent")
line 9:   finish
line 10: endif
line 11: let b:did_indent = 1
line 12: 
line 13: " Some preliminary settings
line 14: setlocal nolisp^I^I" Make sure lisp indenting doesn't supersede us
line 15: setlocal autoindent^I" indentexpr isn't much help otherwise
line 16: 
line 17: setlocal indentexpr=GetPythonIndent(v:lnum)
line 18: setlocal indentkeys+=<:>,=elif,=except
line 19: 
line 20: " Only define the function once.
line 21: if exists("*GetPythonIndent")
line 22:   finish
line 23: endif
line 24: let s:keepcpo= &cpo
line 25: set cpo&vim
line 26: 
line 27: " Come here when loading the script the first time.
line 28: 
line 29: let s:maxoff = 50^I" maximum number of lines to look backwards for ()
line 30: 
line 31: function GetPythonIndent(lnum)
line 194: 
line 195: let &cpo = s:keepcpo
line 196: unlet s:keepcpo
line 197: 
line 198: " vim:sw=2
finished sourcing /usr/share/vim/vim74/indent/python.vim
continuing in function <SNR>14_LoadIndent
Searching for "/usr/share/vim/vimfiles/after/indent/python.vim"
Searching for "/var/lib/vim/addons/after/indent/python.vim"
Searching for "/home/computer/.vim/after/indent/python.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/indent/python.vim"
Searching for "/home/computer/.vim/bundle/Vundle.vim/after/indent/python.vim"
Searching for "/home/computer/.vim/bundle/jedi-vim/after/indent/python.vim"
line 15:       endfor
line 13:       for name in split(s, '\.')
line 14: ^Iexe 'runtime! indent/' . name . '.vim'
line 15:       endfor
line 16:     endif
function <SNR>14_LoadIndent returning #0

continuing in FileType Auto commands for "*"

Executing BufRead Auto commands for "*"
autocommand if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif

line 0: if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif
line 0:  runtime! scripts.vim | endif
line 0:  endif
Executing BufRead Auto commands for "*"
autocommand if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf conf | endif

line 0: if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf conf | endif
line 0:    setf conf | endif
line 0:  endif
Executing BufRead Auto commands for "*.py"
autocommand set tabstop=4

line 0: set tabstop=4
autocommand set softtabstop=4

line 0: set softtabstop=4
autocommand set shiftwidth=4

line 0: set shiftwidth=4
autocommand set textwidth=79

line 0: set textwidth=79
autocommand set expandtab

line 0: set expandtab
autocommand set autoindent 

line 0: set autoindent 
Executing BufRead Auto commands for "*.py"
autocommand match BadWhitespace /\s\+$/

line 0: match BadWhitespace /\s\+$/
Executing BufEnter Auto commands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

line 0: sil call s:LocalBrowse(expand("<amatch>"))
calling function <SNR>20_LocalBrowse('/home/computer/gits/lpthw/21thru25/ex21-03.py')

line 1:   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
line 2:   " Otherwise, the BufEnter event gets triggered when attempts to write to
line 3:   " the DBG buffer are made.
line 4:   
line 5:   if !exists("s:vimentered")
line 6:    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
line 7:    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
line 8: "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
line 9: "   call Dret("s:LocalBrowse")
line 10:    return
function <SNR>20_LocalBrowse returning #0

continuing in BufEnter Auto commands for "*"

Executing VimEnter Auto commands for "*"
autocommand sil call s:VimEnter(expand("<amatch>"))

line 0: sil call s:VimEnter(expand("<amatch>"))
calling function <SNR>20_VimEnter('/home/computer/gits/lpthw/21thru25/ex21-03.py')

line 1: "  call Dfunc("s:VimEnter(dirname<".a:dirname.">) expand(%)<".expand("%").">")
line 2:   let curwin       = winnr()
line 3:   let s:vimentered = 1
line 4:   windo call s:LocalBrowse(expand("%:p"))
line 4: call s:LocalBrowse(expand("%:p"))
calling function <SNR>20_VimEnter[4]..<SNR>20_LocalBrowse('/home/computer/gits/lpthw/21thru25/ex21-03.py')

line 1:   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
line 2:   " Otherwise, the BufEnter event gets triggered when attempts to write to
line 3:   " the DBG buffer are made.
line 4:   
line 5:   if !exists("s:vimentered")
line 6:    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
line 7:    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
line 8: "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
line 9: "   call Dret("s:LocalBrowse")
line 10:    return
line 11:   endif
line 12: 
line 13: "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
line 14: 
line 15:   if has("amiga")
line 16:    " The check against '' is made for the Amiga, where the empty
line 17:    " string is the current directory and not checking would break
line 18:    " things such as the help command.
line 19: "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
line 20:    if a:dirname != '' && isdirectory(a:dirname)
line 21:     sil! call netrw#LocalBrowseCheck(a:dirname)
line 22:     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 23:      exe w:netrw_bannercnt
line 24:     endif
line 25:    endif
line 26: 
line 27:   elseif isdirectory(a:dirname)
line 28: "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
line 29: "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
line 30: "   call Decho("(s:LocalBrowse) COMBAK#23: buf#".bufnr("%")." file<".expand("%")."> line#".line(".")." col#".col("."))
line 31:    sil! call netrw#LocalBrowseCheck(a:dirname)
line 32: "   call Decho("(s:LocalBrowse) COMBAK#24: buf#".bufnr("%")." file<".expand("%")."> line#".line(".")." col#".col("."))
line 33:    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 34:     exe w:netrw_bannercnt
line 35: "    call Decho("(s:LocalBrowse) COMBAK#25: buf#".bufnr("%")." file<".expand("%")."> line#".line(".")." col#".col("."))
line 36:    endif
line 37: 
line 38:   else
line 39:    " not a directory, ignore it
line 40: "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
line 41:   endif
line 42: "  call Decho("(s:LocalBrowse) COMBAK#26: buf#".bufnr("%")." file<".expand("%")."> line#".line(".")." col#".col("."))
line 43: 
line 44: "  call Dret("s:LocalBrowse")
function <SNR>20_VimEnter[4]..<SNR>20_LocalBrowse returning #0

continuing in function <SNR>20_VimEnter

line 5:   exe curwin."wincmd w"
line 5: 1wincmd w
line 6: "  call Dret("s:VimEnter")
function <SNR>20_VimEnter returning #0

continuing in VimEnter Auto commands for "*"

Executing CursorMoved Auto commands for "*"
autocommand call s:Highlight_Matching_Pair()

line 0: call s:Highlight_Matching_Pair()
calling function <SNR>19_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   if exists('w:paren_hl_on') && w:paren_hl_on
line 3:     silent! call matchdelete(3)
line 4:     let w:paren_hl_on = 0
line 5:   endif
line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
function <SNR>19_Highlight_Matching_Pair returning #0

continuing in CursorMoved Auto commands for "*"

calling function GetPythonIndent(2)

line 1: 
line 2:   " If this line is explicitly joined: If the previous line was also joined,
line 3:   " line it up with that one, otherwise add two 'shiftwidth'
line 4:   if getline(a:lnum - 1) =~ '\\$'
line 5:     if a:lnum > 1 && getline(a:lnum - 2) =~ '\\$'
line 6:       return indent(a:lnum - 1)
line 7:     endif
line 8:     return indent(a:lnum - 1) + (exists("g:pyindent_continue") ? eval(g:pyindent_continue) : (shiftwidth() * 2))
line 9:   endif
line 10: 
line 11:   " If the start of the line is in a string don't change the indent.
line 12:   if has('syntax_items') && synIDattr(synID(a:lnum, 1, 1), "name") =~ "String$"
line 14:     return -1
line 15:   endif
line 16: 
line 17:   " Search backwards for the previous non-empty line.
line 18:   let plnum = prevnonblank(v:lnum - 1)
line 19: 
line 20:   if plnum == 0
line 21:     " This is the first non-empty line, use zero indent.
line 22:     return 0
line 23:   endif
line 24: 
line 25:   " If the previous line is inside parenthesis, use the indent of the starting
line 26:   " line.
line 27:   " Trick: use the non-existing "dummy" variable to break out of the loop when
line 28:   " going too far back.
line 29:   call cursor(plnum, 1)
line 30:   let parlnum = searchpair('(\|{\|\[', '', ')\|}\|\]', 'nbW', "line('.') < " . (plnum - s:maxoff) . " ? dummy :" . " synIDattr(synID(line('.'), col('.'), 1), 'name')" . " =~ '\\(Comment\\|Todo\\|String\\)$'")
line 34:   if parlnum > 0
line 35:     let plindent = indent(parlnum)
line 36:     let plnumstart = parlnum
line 37:   else
line 38:     let plindent = indent(plnum)
line 39:     let plnumstart = plnum
line 40:   endif
line 41: 
line 42: 
line 43:   " When inside parenthesis: If at the first line below the parenthesis add
line 44:   " two 'shiftwidth', otherwise same as previous line.
line 45:   " i = (a
line 46:   "       + b
line 47:   "       + c)
line 48:   call cursor(a:lnum, 1)
line 49:   let p = searchpair('(\|{\|\[', '', ')\|}\|\]', 'bW', "line('.') < " . (a:lnum - s:maxoff) . " ? dummy :" . " synIDattr(synID(line('.'), col('.'), 1), 'name')" . " =~ '\\(Comment\\|Todo\\|String\\)$'")
line 53:   if p > 0
line 54:     if p == plnum
line 55:       " When the start is inside parenthesis, only indent one 'shiftwidth'.
line 56:       let pp = searchpair('(\|{\|\[', '', ')\|}\|\]', 'bW', "line('.') < " . (a:lnum - s:maxoff) . " ? dummy :" . " synIDattr(synID(line('.'), col('.'), 1), 'name')" . " =~ '\\(Comment\\|Todo\\|String\\)$'")
line 60:       if pp > 0
line 61: ^Ireturn indent(plnum) + (exists("g:pyindent_nested_paren") ? eval(g:pyindent_nested_paren) : shiftwidth())
line 62:       endif
line 63:       return indent(plnum) + (exists("g:pyindent_open_paren") ? eval(g:pyindent_open_paren) : (shiftwidth() * 2))
line 64:     endif
line 65:     if plnumstart == p
line 66:       return indent(plnum)
line 67:     endif
line 68:     return plindent
line 69:   endif
line 70: 
line 71: 
line 72:   " Get the line and remove a trailing comment.
line 73:   " Use syntax highlighting attributes when possible.
line 74:   let pline = getline(plnum)
line 75:   let pline_len = strlen(pline)
line 76:   if has('syntax_items')
line 77:     " If the last character in the line is a comment, do a binary search for
line 78:     " the start of the comment.  synID() is slow, a linear search would take
line 79:     " too long on a long line.
line 80:     if synIDattr(synID(plnum, pline_len, 1), "name") =~ "\\(Comment\\|Todo\\)$"
line 81:       let min = 1
line 82:       let max = pline_len
line 83:       while min < max
line 84: ^Ilet col = (min + max) / 2
line 85: ^Iif synIDattr(synID(plnum, col, 1), "name") =~ "\\(Comment\\|Todo\\)$"
line 86: ^I  let max = col
line 87: ^Ielse
line 88: ^I  let min = col + 1
line 89: ^Iendif
line 90:       endwhile
line 83:       while min < max
line 84: ^Ilet col = (min + max) / 2
line 85: ^Iif synIDattr(synID(plnum, col, 1), "name") =~ "\\(Comment\\|Todo\\)$"
line 86: ^I  let max = col
line 87: ^Ielse
line 88: ^I  let min = col + 1
line 89: ^Iendif
line 90:       endwhile
line 83:       while min < max
line 84: ^Ilet col = (min + max) / 2
line 85: ^Iif synIDattr(synID(plnum, col, 1), "name") =~ "\\(Comment\\|Todo\\)$"
line 86: ^I  let max = col
line 87: ^Ielse
line 88: ^I  let min = col + 1
line 89: ^Iendif
line 90:       endwhile
line 83:       while min < max
line 84: ^Ilet col = (min + max) / 2
line 85: ^Iif synIDattr(synID(plnum, col, 1), "name") =~ "\\(Comment\\|Todo\\)$"
line 86: ^I  let max = col
line 87: ^Ielse
line 88: ^I  let min = col + 1
line 89: ^Iendif
line 90:       endwhile
line 83:       while min < max
line 84: ^Ilet col = (min + max) / 2
line 85: ^Iif synIDattr(synID(plnum, col, 1), "name") =~ "\\(Comment\\|Todo\\)$"
line 86: ^I  let max = col
line 87: ^Ielse
line 88: ^I  let min = col + 1
line 89: ^Iendif
line 90:       endwhile
line 83:       while min < max
line 84: ^Ilet col = (min + max) / 2
line 85: ^Iif synIDattr(synID(plnum, col, 1), "name") =~ "\\(Comment\\|Todo\\)$"
line 86: ^I  let max = col
line 87: ^Ielse
line 88: ^I  let min = col + 1
line 89: ^Iendif
line 90:       endwhile
line 91:       let pline = strpart(pline, 0, min - 1)
line 92:     endif
line 93:   else
line 94:     let col = 0
line 95:     while col < pline_len
line 96:       if pline[col] == '#'
line 97: ^Ilet pline = strpart(pline, 0, col)
line 98: ^Ibreak
line 99:       endif
line 100:       let col = col + 1
line 101:     endwhile
line 102:   endif
line 103: 
line 104:   " If the previous line ended with a colon, indent this line
line 105:   if pline =~ ':\s*$'
line 106:     return plindent + shiftwidth()
line 107:   endif
line 108: 
line 109:   " If the previous line was a stop-execution statement...
line 110:   if getline(plnum) =~ '^\s*\(break\|continue\|raise\|return\|pass\)\>'
line 111:     " See if the user has already dedented
line 112:     if indent(a:lnum) > indent(plnum) - shiftwidth()
line 113:       " If not, recommend one dedent
line 114:       return indent(plnum) - shiftwidth()
line 115:     endif
line 116:     " Otherwise, trust the user
line 117:     return -1
line 118:   endif
line 119: 
line 120:   " If the current line begins with a keyword that lines up with "try"
line 121:   if getline(a:lnum) =~ '^\s*\(except\|finally\)\>'
line 122:     let lnum = a:lnum - 1
line 123:     while lnum >= 1
line 124:       if getline(lnum) =~ '^\s*\(try\|except\)\>'
line 125: ^Ilet ind = indent(lnum)
line 126: ^Iif ind >= indent(a:lnum)
line 127: ^I  return -1^I" indent is already less than this
line 128: ^Iendif
line 129: ^Ireturn ind^I" line up with previous try or except
line 130:       endif
line 131:       let lnum = lnum - 1
line 132:     endwhile
line 133:     return -1^I^I" no matching "try"!
line 134:   endif
line 135: 
line 136:   " If the current line begins with a header keyword, dedent
line 137:   if getline(a:lnum) =~ '^\s*\(elif\|else\)\>'
line 138: 
line 139:     " Unless the previous line was a one-liner
line 140:     if getline(plnumstart) =~ '^\s*\(for\|if\|try\)\>'
line 141:       return plindent
line 142:     endif
line 143: 
line 144:     " Or the user has already dedented
line 145:     if indent(a:lnum) <= plindent - shiftwidth()
line 146:       return -1
line 147:     endif
line 148: 
line 149:     return plindent - shiftwidth()
line 150:   endif
line 151: 
line 152:   " When after a () construct we probably want to go back to the start line.
line 153:   " a = (b
line 154:   "       + c)
line 155:   " here
line 156:   if parlnum > 0
line 157:     return plindent
line 158:   endif
line 159: 
line 160:   return -1
function GetPythonIndent returning #-1

Executing InsertEnter Auto commands for "<buffer=1>"
autocommand let s:show_call_signatures_last = [0, 0, '']

line 0: let s:show_call_signatures_last = [0, 0, '']
autocommand let b:_jedi_orig_updatetime = &updatetime | let &updatetime = g:jedi#show_call_signatures_delay

line 0: let b:_jedi_orig_updatetime = &updatetime | let &updatetime = g:jedi#show_call_signatures_delay
line 0:  let &updatetime = g:jedi#show_call_signatures_delay-- INSERT --
Executing CursorMovedI Auto commands for "*"
autocommand call s:Highlight_Matching_Pair()

line 0: call s:Highlight_Matching_Pair()
calling function <SNR>19_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   if exists('w:paren_hl_on') && w:paren_hl_on
line 3:     silent! call matchdelete(3)
line 4:     let w:paren_hl_on = 0
line 5:   endif
line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
function <SNR>19_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Auto commands for "*"

Executing TextChangedI Auto commands for "*"
autocommand call s:Highlight_Matching_Pair()

line 0: call s:Highlight_Matching_Pair()
calling function <SNR>19_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   if exists('w:paren_hl_on') && w:paren_hl_on
line 3:     silent! call matchdelete(3)
line 4:     let w:paren_hl_on = 0
line 5:   endif
line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
function <SNR>19_Highlight_Matching_Pair returning #0

continuing in TextChangedI Auto commands for "*"

calling function GetPythonIndent(3)

line 1: 
line 2:   " If this line is explicitly joined: If the previous line was also joined,
line 3:   " line it up with that one, otherwise add two 'shiftwidth'
line 4:   if getline(a:lnum - 1) =~ '\\$'
line 5:     if a:lnum > 1 && getline(a:lnum - 2) =~ '\\$'
line 6:       return indent(a:lnum - 1)
line 7:     endif
line 8:     return indent(a:lnum - 1) + (exists("g:pyindent_continue") ? eval(g:pyindent_continue) : (shiftwidth() * 2))
line 9:   endif
line 10: 
line 11:   " If the start of the line is in a string don't change the indent.
line 12:   if has('syntax_items') && synIDattr(synID(a:lnum, 1, 1), "name") =~ "String$"
line 14:     return -1
line 15:   endif
line 16: 
line 17:   " Search backwards for the previous non-empty line.
line 18:   let plnum = prevnonblank(v:lnum - 1)
line 19: 
line 20:   if plnum == 0
line 21:     " This is the first non-empty line, use zero indent.
line 22:     return 0
line 23:   endif
line 24: 
line 25:   " If the previous line is inside parenthesis, use the indent of the starting
line 26:   " line.
line 27:   " Trick: use the non-existing "dummy" variable to break out of the loop when
line 28:   " going too far back.
line 29:   call cursor(plnum, 1)
line 30:   let parlnum = searchpair('(\|{\|\[', '', ')\|}\|\]', 'nbW', "line('.') < " . (plnum - s:maxoff) . " ? dummy :" . " synIDattr(synID(line('.'), col('.'), 1), 'name')" . " =~ '\\(Comment\\|Todo\\|String\\)$'")
line 34:   if parlnum > 0
line 35:     let plindent = indent(parlnum)
line 36:     let plnumstart = parlnum
line 37:   else
line 38:     let plindent = indent(plnum)
line 39:     let plnumstart = plnum
line 40:   endif
line 41: 
line 42: 
line 43:   " When inside parenthesis: If at the first line below the parenthesis add
line 44:   " two 'shiftwidth', otherwise same as previous line.
line 45:   " i = (a
line 46:   "       + b
line 47:   "       + c)
line 48:   call cursor(a:lnum, 1)
line 49:   let p = searchpair('(\|{\|\[', '', ')\|}\|\]', 'bW', "line('.') < " . (a:lnum - s:maxoff) . " ? dummy :" . " synIDattr(synID(line('.'), col('.'), 1), 'name')" . " =~ '\\(Comment\\|Todo\\|String\\)$'")
line 53:   if p > 0
line 54:     if p == plnum
line 55:       " When the start is inside parenthesis, only indent one 'shiftwidth'.
line 56:       let pp = searchpair('(\|{\|\[', '', ')\|}\|\]', 'bW', "line('.') < " . (a:lnum - s:maxoff) . " ? dummy :" . " synIDattr(synID(line('.'), col('.'), 1), 'name')" . " =~ '\\(Comment\\|Todo\\|String\\)$'")
line 60:       if pp > 0
line 61: ^Ireturn indent(plnum) + (exists("g:pyindent_nested_paren") ? eval(g:pyindent_nested_paren) : shiftwidth())
line 62:       endif
line 63:       return indent(plnum) + (exists("g:pyindent_open_paren") ? eval(g:pyindent_open_paren) : (shiftwidth() * 2))
line 64:     endif
line 65:     if plnumstart == p
line 66:       return indent(plnum)
line 67:     endif
line 68:     return plindent
line 69:   endif
line 70: 
line 71: 
line 72:   " Get the line and remove a trailing comment.
line 73:   " Use syntax highlighting attributes when possible.
line 74:   let pline = getline(plnum)
line 75:   let pline_len = strlen(pline)
line 76:   if has('syntax_items')
line 77:     " If the last character in the line is a comment, do a binary search for
line 78:     " the start of the comment.  synID() is slow, a linear search would take
line 79:     " too long on a long line.
line 80:     if synIDattr(synID(plnum, pline_len, 1), "name") =~ "\\(Comment\\|Todo\\)$"
line 81:       let min = 1
line 82:       let max = pline_len
line 83:       while min < max
line 84: ^Ilet col = (min + max) / 2
line 85: ^Iif synIDattr(synID(plnum, col, 1), "name") =~ "\\(Comment\\|Todo\\)$"
line 86: ^I  let max = col
line 87: ^Ielse
line 88: ^I  let min = col + 1
line 89: ^Iendif
line 90:       endwhile
line 83:       while min < max
line 84: ^Ilet col = (min + max) / 2
line 85: ^Iif synIDattr(synID(plnum, col, 1), "name") =~ "\\(Comment\\|Todo\\)$"
line 86: ^I  let max = col
line 87: ^Ielse
line 88: ^I  let min = col + 1
line 89: ^Iendif
line 90:       endwhile
line 83:       while min < max
line 84: ^Ilet col = (min + max) / 2
line 85: ^Iif synIDattr(synID(plnum, col, 1), "name") =~ "\\(Comment\\|Todo\\)$"
line 86: ^I  let max = col
line 87: ^Ielse
line 88: ^I  let min = col + 1
line 89: ^Iendif
line 90:       endwhile
line 83:       while min < max
line 84: ^Ilet col = (min + max) / 2
line 85: ^Iif synIDattr(synID(plnum, col, 1), "name") =~ "\\(Comment\\|Todo\\)$"
line 86: ^I  let max = col
line 87: ^Ielse
line 88: ^I  let min = col + 1
line 89: ^Iendif
line 90:       endwhile
line 83:       while min < max
line 84: ^Ilet col = (min + max) / 2
line 85: ^Iif synIDattr(synID(plnum, col, 1), "name") =~ "\\(Comment\\|Todo\\)$"
line 86: ^I  let max = col
line 87: ^Ielse
line 88: ^I  let min = col + 1
line 89: ^Iendif
line 90:       endwhile
line 83:       while min < max
line 84: ^Ilet col = (min + max) / 2
line 85: ^Iif synIDattr(synID(plnum, col, 1), "name") =~ "\\(Comment\\|Todo\\)$"
line 86: ^I  let max = col
line 87: ^Ielse
line 88: ^I  let min = col + 1
line 89: ^Iendif
line 90:       endwhile
line 91:       let pline = strpart(pline, 0, min - 1)
line 92:     endif
line 93:   else
line 94:     let col = 0
line 95:     while col < pline_len
line 96:       if pline[col] == '#'
line 97: ^Ilet pline = strpart(pline, 0, col)
line 98: ^Ibreak
line 99:       endif
line 100:       let col = col + 1
line 101:     endwhile
line 102:   endif
line 103: 
line 104:   " If the previous line ended with a colon, indent this line
line 105:   if pline =~ ':\s*$'
line 106:     return plindent + shiftwidth()
line 107:   endif
line 108: 
line 109:   " If the previous line was a stop-execution statement...
line 110:   if getline(plnum) =~ '^\s*\(break\|continue\|raise\|return\|pass\)\>'
line 111:     " See if the user has already dedented
line 112:     if indent(a:lnum) > indent(plnum) - shiftwidth()
line 113:       " If not, recommend one dedent
line 114:       return indent(plnum) - shiftwidth()
line 115:     endif
line 116:     " Otherwise, trust the user
line 117:     return -1
line 118:   endif
line 119: 
line 120:   " If the current line begins with a keyword that lines up with "try"
line 121:   if getline(a:lnum) =~ '^\s*\(except\|finally\)\>'
line 122:     let lnum = a:lnum - 1
line 123:     while lnum >= 1
line 124:       if getline(lnum) =~ '^\s*\(try\|except\)\>'
line 125: ^Ilet ind = indent(lnum)
line 126: ^Iif ind >= indent(a:lnum)
line 127: ^I  return -1^I" indent is already less than this
line 128: ^Iendif
line 129: ^Ireturn ind^I" line up with previous try or except
line 130:       endif
line 131:       let lnum = lnum - 1
line 132:     endwhile
line 133:     return -1^I^I" no matching "try"!
line 134:   endif
line 135: 
line 136:   " If the current line begins with a header keyword, dedent
line 137:   if getline(a:lnum) =~ '^\s*\(elif\|else\)\>'
line 138: 
line 139:     " Unless the previous line was a one-liner
line 140:     if getline(plnumstart) =~ '^\s*\(for\|if\|try\)\>'
line 141:       return plindent
line 142:     endif
line 143: 
line 144:     " Or the user has already dedented
line 145:     if indent(a:lnum) <= plindent - shiftwidth()
line 146:       return -1
line 147:     endif
line 148: 
line 149:     return plindent - shiftwidth()
line 150:   endif
line 151: 
line 152:   " When after a () construct we probably want to go back to the start line.
line 153:   " a = (b
line 154:   "       + c)
line 155:   " here
line 156:   if parlnum > 0
line 157:     return plindent
line 158:   endif
line 159: 
line 160:   return -1
function GetPythonIndent returning #-1

Executing CursorMovedI Auto commands for "*"
autocommand call s:Highlight_Matching_Pair()

line 0: call s:Highlight_Matching_Pair()
calling function <SNR>19_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   if exists('w:paren_hl_on') && w:paren_hl_on
line 3:     silent! call matchdelete(3)
line 4:     let w:paren_hl_on = 0
line 5:   endif
line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
function <SNR>19_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Auto commands for "*"

Executing TextChangedI Auto commands for "*"
autocommand call s:Highlight_Matching_Pair()

line 0: call s:Highlight_Matching_Pair()
calling function <SNR>19_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   if exists('w:paren_hl_on') && w:paren_hl_on
line 3:     silent! call matchdelete(3)
line 4:     let w:paren_hl_on = 0
line 5:   endif
line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
function <SNR>19_Highlight_Matching_Pair returning #0

continuing in TextChangedI Auto commands for "*"

Executing CursorHoldI Auto commands for "<buffer=1>"
autocommand call jedi#show_call_signatures()

line 0: call jedi#show_call_signatures()
calling function jedi#show_call_signatures()

line 1:     if s:_init_python == 0
line 2:         return 1
line 3:     endif
line 4:     let [line, col] = [line('.'), col('.')]
line 5:     let curline = getline(line)
line 6:     let reload_signatures = 1
line 7: 
line 8:     " Caching.  On the same line only.
line 9:     if line == s:show_call_signatures_last[0]
line 10:         " Check if the number of commas and parenthesis before or after the
line 11:         " cursor has not changed since the last call, which means that the
line 12:         " argument position was not changed and we can skip repainting.
line 13:         let prevcol = s:show_call_signatures_last[1]
line 14:         let prevline = s:show_call_signatures_last[2]
line 15:         if substitute(curline[:col-2], '[^,()]', '', 'g') == substitute(prevline[:prevcol-2], '[^,()]', '', 'g') && substitute(curline[(col-2):], '[^,()]', '', 'g') == substitute(prevline[(prevcol-2):], '[^,()]', '', 'g')
line 19:             let reload_signatures = 0
line 20:         endif
line 21:     endif
line 22:     let s:show_call_signatures_last = [line, col, curline]
line 23: 
line 24:     if reload_signatures
line 25:         PythonJedi jedi_vim.show_call_signatures()
line 25: python3 jedi_vim.show_call_signatures()
calling function jedi#show_call_signatures[25]..jedi#_vim_exceptions('has(''conceal'') && g:jedi#show_call_signatures', 1)

line 1:     let l:result = {}
line 2:     try
line 3:         if a:is_eval
line 4:             let l:result.result = eval(a:str)
line 5:         else
line 6:             execute a:str
line 7:             let l:result.result = ''
line 8:         endif
line 9:     catch
line 10:         let l:result.exception = v:exception
line 11:         let l:result.throwpoint = v:throwpoint
line 12:     endtry
line 13:     return l:result
function jedi#show_call_signatures[25]..jedi#_vim_exceptions returning {'result': 1}

continuing in function jedi#show_call_signatures

calling function jedi#show_call_signatures[25]..jedi#_vim_exceptions('&encoding', 1)

line 1:     let l:result = {}
line 2:     try
line 3:         if a:is_eval
line 4:             let l:result.result = eval(a:str)
line 5:         else
line 6:             execute a:str
line 7:             let l:result.result = ''
line 8:         endif
line 9:     catch
line 10:         let l:result.exception = v:exception
line 11:         let l:result.throwpoint = v:throwpoint
line 12:     endtry
line 13:     return l:result
function jedi#show_call_signatures[25]..jedi#_vim_exceptions returning {'result': 'utf-8'}

continuing in function jedi#show_call_signatures

calling function jedi#show_call_signatures[25]..jedi#_vim_exceptions('g:jedi#show_call_signatures', 1)

line 1:     let l:result = {}
line 2:     try
line 3:         if a:is_eval
line 4:             let l:result.result = eval(a:str)
line 5:         else
line 6:             execute a:str
line 7:             let l:result.result = ''
line 8:         endif
line 9:     catch
line 10:         let l:result.exception = v:exception
line 11:         let l:result.throwpoint = v:throwpoint
line 12:     endtry
line 13:     return l:result
function jedi#show_call_signatures[25]..jedi#_vim_exceptions returning {'result': 1}

continuing in function jedi#show_call_signatures

calling function jedi#show_call_signatures[25]..jedi#_vim_exceptions('g:jedi#call_signature_escape', 1)

line 1:     let l:result = {}
line 2:     try
line 3:         if a:is_eval
line 4:             let l:result.result = eval(a:str)
line 5:         else
line 6:             execute a:str
line 7:             let l:result.result = ''
line 8:         endif
line 9:     catch
line 10:         let l:result.exception = v:exception
line 11:         let l:result.throwpoint = v:throwpoint
line 12:     endtry
line 13:     return l:result
function jedi#show_call_signatures[25]..jedi#_vim_exceptions returning {'result': '?!?'}

continuing in function jedi#show_call_signatures

line 26:     endif
function jedi#show_call_signatures returning #0

continuing in CursorHoldI Auto commands for "<buffer=1>"

calling function GetPythonIndent(4)

line 1: 
line 2:   " If this line is explicitly joined: If the previous line was also joined,
line 3:   " line it up with that one, otherwise add two 'shiftwidth'
line 4:   if getline(a:lnum - 1) =~ '\\$'
line 5:     if a:lnum > 1 && getline(a:lnum - 2) =~ '\\$'
line 6:       return indent(a:lnum - 1)
line 7:     endif
line 8:     return indent(a:lnum - 1) + (exists("g:pyindent_continue") ? eval(g:pyindent_continue) : (shiftwidth() * 2))
line 9:   endif
line 10: 
line 11:   " If the start of the line is in a string don't change the indent.
line 12:   if has('syntax_items') && synIDattr(synID(a:lnum, 1, 1), "name") =~ "String$"
line 14:     return -1
line 15:   endif
line 16: 
line 17:   " Search backwards for the previous non-empty line.
line 18:   let plnum = prevnonblank(v:lnum - 1)
line 19: 
line 20:   if plnum == 0
line 21:     " This is the first non-empty line, use zero indent.
line 22:     return 0
line 23:   endif
line 24: 
line 25:   " If the previous line is inside parenthesis, use the indent of the starting
line 26:   " line.
line 27:   " Trick: use the non-existing "dummy" variable to break out of the loop when
line 28:   " going too far back.
line 29:   call cursor(plnum, 1)
line 30:   let parlnum = searchpair('(\|{\|\[', '', ')\|}\|\]', 'nbW', "line('.') < " . (plnum - s:maxoff) . " ? dummy :" . " synIDattr(synID(line('.'), col('.'), 1), 'name')" . " =~ '\\(Comment\\|Todo\\|String\\)$'")
line 34:   if parlnum > 0
line 35:     let plindent = indent(parlnum)
line 36:     let plnumstart = parlnum
line 37:   else
line 38:     let plindent = indent(plnum)
line 39:     let plnumstart = plnum
line 40:   endif
line 41: 
line 42: 
line 43:   " When inside parenthesis: If at the first line below the parenthesis add
line 44:   " two 'shiftwidth', otherwise same as previous line.
line 45:   " i = (a
line 46:   "       + b
line 47:   "       + c)
line 48:   call cursor(a:lnum, 1)
line 49:   let p = searchpair('(\|{\|\[', '', ')\|}\|\]', 'bW', "line('.') < " . (a:lnum - s:maxoff) . " ? dummy :" . " synIDattr(synID(line('.'), col('.'), 1), 'name')" . " =~ '\\(Comment\\|Todo\\|String\\)$'")
line 53:   if p > 0
line 54:     if p == plnum
line 55:       " When the start is inside parenthesis, only indent one 'shiftwidth'.
line 56:       let pp = searchpair('(\|{\|\[', '', ')\|}\|\]', 'bW', "line('.') < " . (a:lnum - s:maxoff) . " ? dummy :" . " synIDattr(synID(line('.'), col('.'), 1), 'name')" . " =~ '\\(Comment\\|Todo\\|String\\)$'")
line 60:       if pp > 0
line 61: ^Ireturn indent(plnum) + (exists("g:pyindent_nested_paren") ? eval(g:pyindent_nested_paren) : shiftwidth())
line 62:       endif
line 63:       return indent(plnum) + (exists("g:pyindent_open_paren") ? eval(g:pyindent_open_paren) : (shiftwidth() * 2))
line 64:     endif
line 65:     if plnumstart == p
line 66:       return indent(plnum)
line 67:     endif
line 68:     return plindent
line 69:   endif
line 70: 
line 71: 
line 72:   " Get the line and remove a trailing comment.
line 73:   " Use syntax highlighting attributes when possible.
line 74:   let pline = getline(plnum)
line 75:   let pline_len = strlen(pline)
line 76:   if has('syntax_items')
line 77:     " If the last character in the line is a comment, do a binary search for
line 78:     " the start of the comment.  synID() is slow, a linear search would take
line 79:     " too long on a long line.
line 80:     if synIDattr(synID(plnum, pline_len, 1), "name") =~ "\\(Comment\\|Todo\\)$"
line 81:       let min = 1
line 82:       let max = pline_len
line 83:       while min < max
line 84: ^Ilet col = (min + max) / 2
line 85: ^Iif synIDattr(synID(plnum, col, 1), "name") =~ "\\(Comment\\|Todo\\)$"
line 86: ^I  let max = col
line 87: ^Ielse
line 88: ^I  let min = col + 1
line 89: ^Iendif
line 90:       endwhile
line 83:       while min < max
line 84: ^Ilet col = (min + max) / 2
line 85: ^Iif synIDattr(synID(plnum, col, 1), "name") =~ "\\(Comment\\|Todo\\)$"
line 86: ^I  let max = col
line 87: ^Ielse
line 88: ^I  let min = col + 1
line 89: ^Iendif
line 90:       endwhile
line 83:       while min < max
line 84: ^Ilet col = (min + max) / 2
line 85: ^Iif synIDattr(synID(plnum, col, 1), "name") =~ "\\(Comment\\|Todo\\)$"
line 86: ^I  let max = col
line 87: ^Ielse
line 88: ^I  let min = col + 1
line 89: ^Iendif
line 90:       endwhile
line 83:       while min < max
line 84: ^Ilet col = (min + max) / 2
line 85: ^Iif synIDattr(synID(plnum, col, 1), "name") =~ "\\(Comment\\|Todo\\)$"
line 86: ^I  let max = col
line 87: ^Ielse
line 88: ^I  let min = col + 1
line 89: ^Iendif
line 90:       endwhile
line 83:       while min < max
line 84: ^Ilet col = (min + max) / 2
line 85: ^Iif synIDattr(synID(plnum, col, 1), "name") =~ "\\(Comment\\|Todo\\)$"
line 86: ^I  let max = col
line 87: ^Ielse
line 88: ^I  let min = col + 1
line 89: ^Iendif
line 90:       endwhile
line 83:       while min < max
line 84: ^Ilet col = (min + max) / 2
line 85: ^Iif synIDattr(synID(plnum, col, 1), "name") =~ "\\(Comment\\|Todo\\)$"
line 86: ^I  let max = col
line 87: ^Ielse
line 88: ^I  let min = col + 1
line 89: ^Iendif
line 90:       endwhile
line 91:       let pline = strpart(pline, 0, min - 1)
line 92:     endif
line 93:   else
line 94:     let col = 0
line 95:     while col < pline_len
line 96:       if pline[col] == '#'
line 97: ^Ilet pline = strpart(pline, 0, col)
line 98: ^Ibreak
line 99:       endif
line 100:       let col = col + 1
line 101:     endwhile
line 102:   endif
line 103: 
line 104:   " If the previous line ended with a colon, indent this line
line 105:   if pline =~ ':\s*$'
line 106:     return plindent + shiftwidth()
line 107:   endif
line 108: 
line 109:   " If the previous line was a stop-execution statement...
line 110:   if getline(plnum) =~ '^\s*\(break\|continue\|raise\|return\|pass\)\>'
line 111:     " See if the user has already dedented
line 112:     if indent(a:lnum) > indent(plnum) - shiftwidth()
line 113:       " If not, recommend one dedent
line 114:       return indent(plnum) - shiftwidth()
line 115:     endif
line 116:     " Otherwise, trust the user
line 117:     return -1
line 118:   endif
line 119: 
line 120:   " If the current line begins with a keyword that lines up with "try"
line 121:   if getline(a:lnum) =~ '^\s*\(except\|finally\)\>'
line 122:     let lnum = a:lnum - 1
line 123:     while lnum >= 1
line 124:       if getline(lnum) =~ '^\s*\(try\|except\)\>'
line 125: ^Ilet ind = indent(lnum)
line 126: ^Iif ind >= indent(a:lnum)
line 127: ^I  return -1^I" indent is already less than this
line 128: ^Iendif
line 129: ^Ireturn ind^I" line up with previous try or except
line 130:       endif
line 131:       let lnum = lnum - 1
line 132:     endwhile
line 133:     return -1^I^I" no matching "try"!
line 134:   endif
line 135: 
line 136:   " If the current line begins with a header keyword, dedent
line 137:   if getline(a:lnum) =~ '^\s*\(elif\|else\)\>'
line 138: 
line 139:     " Unless the previous line was a one-liner
line 140:     if getline(plnumstart) =~ '^\s*\(for\|if\|try\)\>'
line 141:       return plindent
line 142:     endif
line 143: 
line 144:     " Or the user has already dedented
line 145:     if indent(a:lnum) <= plindent - shiftwidth()
line 146:       return -1
line 147:     endif
line 148: 
line 149:     return plindent - shiftwidth()
line 150:   endif
line 151: 
line 152:   " When after a () construct we probably want to go back to the start line.
line 153:   " a = (b
line 154:   "       + c)
line 155:   " here
line 156:   if parlnum > 0
line 157:     return plindent
line 158:   endif
line 159: 
line 160:   return -1
function GetPythonIndent returning #-1

Executing CursorMovedI Auto commands for "*"
autocommand call s:Highlight_Matching_Pair()

line 0: call s:Highlight_Matching_Pair()
calling function <SNR>19_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   if exists('w:paren_hl_on') && w:paren_hl_on
line 3:     silent! call matchdelete(3)
line 4:     let w:paren_hl_on = 0
line 5:   endif
line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
function <SNR>19_Highlight_Matching_Pair returning #0

continuing in CursorMovedI Auto commands for "*"

Executing TextChangedI Auto commands for "*"
autocommand call s:Highlight_Matching_Pair()

line 0: call s:Highlight_Matching_Pair()
calling function <SNR>19_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   if exists('w:paren_hl_on') && w:paren_hl_on
line 3:     silent! call matchdelete(3)
line 4:     let w:paren_hl_on = 0
line 5:   endif
line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
function <SNR>19_Highlight_Matching_Pair returning #0

continuing in TextChangedI Auto commands for "*"

Executing CursorHoldI Auto commands for "<buffer=1>"
autocommand call jedi#show_call_signatures()

line 0: call jedi#show_call_signatures()
calling function jedi#show_call_signatures()

line 1:     if s:_init_python == 0
line 2:         return 1
line 3:     endif
line 4:     let [line, col] = [line('.'), col('.')]
line 5:     let curline = getline(line)
line 6:     let reload_signatures = 1
line 7: 
line 8:     " Caching.  On the same line only.
line 9:     if line == s:show_call_signatures_last[0]
line 10:         " Check if the number of commas and parenthesis before or after the
line 11:         " cursor has not changed since the last call, which means that the
line 12:         " argument position was not changed and we can skip repainting.
line 13:         let prevcol = s:show_call_signatures_last[1]
line 14:         let prevline = s:show_call_signatures_last[2]
line 15:         if substitute(curline[:col-2], '[^,()]', '', 'g') == substitute(prevline[:prevcol-2], '[^,()]', '', 'g') && substitute(curline[(col-2):], '[^,()]', '', 'g') == substitute(prevline[(prevcol-2):], '[^,()]', '', 'g')
line 19:             let reload_signatures = 0
line 20:         endif
line 21:     endif
line 22:     let s:show_call_signatures_last = [line, col, curline]
line 23: 
line 24:     if reload_signatures
line 25:         PythonJedi jedi_vim.show_call_signatures()
line 25: python3 jedi_vim.show_call_signatures()
calling function jedi#show_call_signatures[25]..jedi#_vim_exceptions('has(''conceal'') && g:jedi#show_call_signatures', 1)

line 1:     let 